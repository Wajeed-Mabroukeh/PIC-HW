

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Sat Jul 23 23:29:41 2022

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.45
    69                           ; Generated 16/11/2017 GMT
    70                           ; 
    71                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4620 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataBANK0
   104  004254                     __pidataBANK0:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _LCD_INIT_STRING
   108  004254  28                 	db	40
   109  004255  0C                 	db	12
   110  004256  01                 	db	1
   111  004257  06                 	db	6
   112                           
   113                           	psect	idataBANK1
   114  004258                     __pidataBANK1:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _start_t1
   118  004258  0BDC               	dw	3036
   119                           
   120                           	psect	smallconst
   121  001000                     __psmallconst:
   122                           	opt stack 0
   123  001000  00                 	db	0
   124  001001                     __powers_:
   125                           	opt stack 0
   126  001001  0000               	dw	0
   127  001003  3F80               	dw	16256
   128  001005  0000               	dw	0
   129  001007  4120               	dw	16672
   130  001009  0000               	dw	0
   131  00100B  42C8               	dw	17096
   132  00100D  0000               	dw	0
   133  00100F  447A               	dw	17530
   134  001011  4000               	dw	16384
   135  001013  461C               	dw	17948
   136  001015  5000               	dw	20480
   137  001017  47C3               	dw	18371
   138  001019  2400               	dw	9216
   139  00101B  4974               	dw	18804
   140  00101D  9680               	dw	38528
   141  00101F  4B18               	dw	19224
   142  001021  BC20               	dw	48160
   143  001023  4CBE               	dw	19646
   144  001025  6B28               	dw	27432
   145  001027  4E6E               	dw	20078
   146  001029  02F9               	dw	761
   147  00102B  5015               	dw	20501
   148  00102D  78EC               	dw	30956
   149  00102F  60AD               	dw	24749
   150  001031  F2CA               	dw	62154
   151  001033  7149               	dw	29001
   152  001035                     __end_of__powers_:
   153                           	opt stack 0
   154  001035                     __npowers_:
   155                           	opt stack 0
   156  001035  0000               	dw	0
   157  001037  3F80               	dw	16256
   158  001039  CCCD               	dw	52429
   159  00103B  3DCC               	dw	15820
   160  00103D  D70A               	dw	55050
   161  00103F  3C23               	dw	15395
   162  001041  126F               	dw	4719
   163  001043  3A83               	dw	14979
   164  001045  B717               	dw	46871
   165  001047  38D1               	dw	14545
   166  001049  C5AC               	dw	50604
   167  00104B  3727               	dw	14119
   168  00104D  37BD               	dw	14269
   169  00104F  3586               	dw	13702
   170  001051  BF95               	dw	49045
   171  001053  33D6               	dw	13270
   172  001055  CC77               	dw	52343
   173  001057  322B               	dw	12843
   174  001059  705F               	dw	28767
   175  00105B  3089               	dw	12425
   176  00105D  E6FF               	dw	59135
   177  00105F  2EDB               	dw	11995
   178  001061  E508               	dw	58632
   179  001063  1E3C               	dw	7740
   180  001065  4260               	dw	16992
   181  001067  0DA2               	dw	3490
   182  001069                     __end_of__npowers_:
   183                           	opt stack 0
   184  001069                     _dpowers:
   185                           	opt stack 0
   186  001069  0001               	dw	1
   187  00106B  0000               	dw	0
   188  00106D  000A               	dw	10
   189  00106F  0000               	dw	0
   190  001071  0064               	dw	100
   191  001073  0000               	dw	0
   192  001075  03E8               	dw	1000
   193  001077  0000               	dw	0
   194  001079  2710               	dw	10000
   195  00107B  0000               	dw	0
   196  00107D  86A0               	dw	34464
   197  00107F  0001               	dw	1
   198  001081  4240               	dw	16960
   199  001083  000F               	dw	15
   200  001085  9680               	dw	38528
   201  001087  0098               	dw	152
   202  001089  E100               	dw	57600
   203  00108B  05F5               	dw	1525
   204  00108D  CA00               	dw	51712
   205  00108F  3B9A               	dw	15258
   206  001091                     __end_of_dpowers:
   207                           	opt stack 0
   208  0000                     _TXREG	set	4013
   209  0000                     _RCSTAbits	set	4011
   210  0000                     _RCSTA	set	4011
   211  0000                     _TXSTAbits	set	4012
   212  0000                     _SPBRGH	set	4016
   213  0000                     _SPBRG	set	4015
   214  0000                     _TXSTA	set	4012
   215  0000                     _BAUDCONbits	set	4024
   216  0000                     _CCP1CONbits	set	4029
   217  0000                     _CCPR1L	set	4030
   218  0000                     _T2CONbits	set	4042
   219  0000                     _CCP1CON	set	4029
   220  0000                     _T2CON	set	4042
   221  0000                     _PR2	set	4043
   222  0000                     _ADRESL	set	4035
   223  0000                     _ADRESH	set	4036
   224  0000                     _ADCON2	set	4032
   225  0000                     _ADCON0bits	set	4034
   226  0000                     _PORTEbits	set	3972
   227  0000                     _PORTB	set	3969
   228  0000                     _PORTD	set	3971
   229  0000                     _PORTA	set	3968
   230  0000                     _TRISCbits	set	3988
   231  0000                     _PORTCbits	set	3970
   232  0000                     _RCREG	set	4014
   233  0000                     _PORTDbits	set	3971
   234  0000                     _PORTBbits	set	3969
   235  0000                     _PIR1bits	set	3998
   236  0000                     _T1CONbits	set	4045
   237  0000                     _PIE2	set	4000
   238  0000                     _PIR1	set	3998
   239  0000                     _PIE1bits	set	3997
   240  0000                     _T1CON	set	4045
   241  0000                     _TMR1L	set	4046
   242  0000                     _TMR1H	set	4047
   243  0000                     _TMR0L	set	4054
   244  0000                     _TMR0H	set	4055
   245  0000                     _INTCONbits	set	4082
   246  0000                     _T0CONbits	set	4053
   247  0000                     _T0CON	set	4053
   248  0000                     _TRISE	set	3990
   249  0000                     _TRISD	set	3989
   250  0000                     _TRISC	set	3988
   251  0000                     _TRISB	set	3987
   252  0000                     _TRISA	set	3986
   253  0000                     _ADCON1	set	4033
   254  0000                     _ADCON0	set	4034
   255  001091                     STR_7:
   256  001091  57                 	db	87	;'W'
   257  001092  61                 	db	97	;'a'
   258  001093  72                 	db	114	;'r'
   259  001094  6E                 	db	110	;'n'
   260  001095  69                 	db	105	;'i'
   261  001096  6E                 	db	110	;'n'
   262  001097  67                 	db	103	;'g'
   263  001098  20                 	db	32
   264  001099  48                 	db	72	;'H'
   265  00109A  69                 	db	105	;'i'
   266  00109B  67                 	db	103	;'g'
   267  00109C  68                 	db	104	;'h'
   268  00109D  20                 	db	32
   269  00109E  54                 	db	84	;'T'
   270  00109F  65                 	db	101	;'e'
   271  0010A0  6D                 	db	109	;'m'
   272  0010A1  70                 	db	112	;'p'
   273  0010A2  20                 	db	32
   274  0010A3  0A                 	db	10
   275  0010A4  20                 	db	32
   276  0010A5  0D                 	db	13
   277  0010A6  00                 	db	0
   278  0010A7                     STR_3:
   279  0010A7  54                 	db	84	;'T'
   280  0010A8  68                 	db	104	;'h'
   281  0010A9  72                 	db	114	;'r'
   282  0010AA  65                 	db	101	;'e'
   283  0010AB  73                 	db	115	;'s'
   284  0010AC  68                 	db	104	;'h'
   285  0010AD  6F                 	db	111	;'o'
   286  0010AE  6C                 	db	108	;'l'
   287  0010AF  64                 	db	100	;'d'
   288  0010B0  20                 	db	32
   289  0010B1  3D                 	db	61	;'='
   290  0010B2  20                 	db	32
   291  0010B3  25                 	db	37
   292  0010B4  30                 	db	48	;'0'
   293  0010B5  2E                 	db	46
   294  0010B6  32                 	db	50	;'2'
   295  0010B7  66                 	db	102	;'f'
   296  0010B8  00                 	db	0
   297  0010B9                     STR_1:
   298  0010B9  54                 	db	84	;'T'
   299  0010BA  6D                 	db	109	;'m'
   300  0010BB  70                 	db	112	;'p'
   301  0010BC  20                 	db	32
   302  0010BD  69                 	db	105	;'i'
   303  0010BE  6E                 	db	110	;'n'
   304  0010BF  20                 	db	32
   305  0010C0  43                 	db	67	;'C'
   306  0010C1  20                 	db	32
   307  0010C2  3D                 	db	61	;'='
   308  0010C3  20                 	db	32
   309  0010C4  25                 	db	37
   310  0010C5  30                 	db	48	;'0'
   311  0010C6  2E                 	db	46
   312  0010C7  31                 	db	49	;'1'
   313  0010C8  66                 	db	102	;'f'
   314  0010C9  00                 	db	0
   315  0010CA                     STR_2:
   316  0010CA  54                 	db	84	;'T'
   317  0010CB  6D                 	db	109	;'m'
   318  0010CC  70                 	db	112	;'p'
   319  0010CD  20                 	db	32
   320  0010CE  69                 	db	105	;'i'
   321  0010CF  6E                 	db	110	;'n'
   322  0010D0  20                 	db	32
   323  0010D1  46                 	db	70	;'F'
   324  0010D2  20                 	db	32
   325  0010D3  3D                 	db	61	;'='
   326  0010D4  20                 	db	32
   327  0010D5  25                 	db	37
   328  0010D6  30                 	db	48	;'0'
   329  0010D7  2E                 	db	46
   330  0010D8  31                 	db	49	;'1'
   331  0010D9  66                 	db	102	;'f'
   332  0010DA  00                 	db	0
   333  0010DB                     STR_5:
   334  0010DB  54                 	db	84	;'T'
   335  0010DC  68                 	db	104	;'h'
   336  0010DD  20                 	db	32
   337  0010DE  54                 	db	84	;'T'
   338  0010DF  65                 	db	101	;'e'
   339  0010E0  6D                 	db	109	;'m'
   340  0010E1  70                 	db	112	;'p'
   341  0010E2  20                 	db	32
   342  0010E3  3D                 	db	61	;'='
   343  0010E4  20                 	db	32
   344  0010E5  25                 	db	37
   345  0010E6  30                 	db	48	;'0'
   346  0010E7  2E                 	db	46
   347  0010E8  31                 	db	49	;'1'
   348  0010E9  66                 	db	102	;'f'
   349  0010EA  00                 	db	0
   350  0010EB                     STR_6:
   351  0010EB  54                 	db	84	;'T'
   352  0010EC  68                 	db	104	;'h'
   353  0010ED  20                 	db	32
   354  0010EE  73                 	db	115	;'s'
   355  0010EF  70                 	db	112	;'p'
   356  0010F0  64                 	db	100	;'d'
   357  0010F1  20                 	db	32
   358  0010F2  3D                 	db	61	;'='
   359  0010F3  20                 	db	32
   360  0010F4  25                 	db	37
   361  0010F5  30                 	db	48	;'0'
   362  0010F6  2E                 	db	46
   363  0010F7  31                 	db	49	;'1'
   364  0010F8  66                 	db	102	;'f'
   365  0010F9  00                 	db	0
   366  0010FA                     STR_8:
   367  0010FA  0C                 	db	12
   368  0010FB  00                 	db	0
   369  0000                     
   370                           ; #config settings
   371  0010FC  00                 	db	0	; dummy byte at the end
   372  0000                     
   373                           	psect	cinit
   374  003DFE                     __pcinit:
   375                           	opt stack 0
   376  003DFE                     start_initialization:
   377                           	opt stack 0
   378  003DFE                     __initialization:
   379                           	opt stack 0
   380                           
   381                           ; Initialize objects allocated to BANK1 (2 bytes)
   382                           ; load TBLPTR registers with __pidataBANK1
   383  003DFE  0E58               	movlw	low __pidataBANK1
   384  003E00  6EF6               	movwf	tblptrl,c
   385  003E02  0E42               	movlw	high __pidataBANK1
   386  003E04  6EF7               	movwf	tblptrh,c
   387  003E06  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   388  003E08  6EF8               	movwf	tblptru,c
   389  003E0A  0009               	tblrd		*+	;fetch initializer
   390  003E0C  CFF5 F15E          	movff	tablat,__pdataBANK1
   391  003E10  0009               	tblrd		*+	;fetch initializer
   392  003E12  CFF5 F15F          	movff	tablat,__pdataBANK1+1
   393                           
   394                           ; Initialize objects allocated to BANK0 (4 bytes)
   395                           ; load TBLPTR registers with __pidataBANK0
   396  003E16  0E54               	movlw	low __pidataBANK0
   397  003E18  6EF6               	movwf	tblptrl,c
   398  003E1A  0E42               	movlw	high __pidataBANK0
   399  003E1C  6EF7               	movwf	tblptrh,c
   400  003E1E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   401  003E20  6EF8               	movwf	tblptru,c
   402  003E22  EE00  F0DB         	lfsr	0,__pdataBANK0
   403  003E26  EE10 F004          	lfsr	1,4
   404  003E2A                     copy_data0:
   405  003E2A  0009               	tblrd		*+
   406  003E2C  CFF5 FFEE          	movff	tablat,postinc0
   407  003E30  50E5               	movf	postdec1,w,c
   408  003E32  50E1               	movf	fsr1l,w,c
   409  003E34  E1FA               	bnz	copy_data0
   410                           
   411                           ; Clear objects allocated to BANK1 (10 bytes)
   412  003E36  EE01  F054         	lfsr	0,__pbssBANK1
   413  003E3A  0E0A               	movlw	10
   414  003E3C                     clear_0:
   415  003E3C  6AEE               	clrf	postinc0,c
   416  003E3E  06E8               	decf	wreg,f,c
   417  003E40  E1FD               	bnz	clear_0
   418                           
   419                           ; Clear objects allocated to COMRAM (19 bytes)
   420  003E42  EE00  F056         	lfsr	0,__pbssCOMRAM
   421  003E46  0E13               	movlw	19
   422  003E48                     clear_1:
   423  003E48  6AEE               	clrf	postinc0,c
   424  003E4A  06E8               	decf	wreg,f,c
   425  003E4C  E1FD               	bnz	clear_1
   426  003E4E                     end_of_initialization:
   427                           	opt stack 0
   428  003E4E                     __end_of__initialization:
   429                           	opt stack 0
   430  003E4E  9069               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   431  003E50  9269               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   432  003E52  0E00               	movlw	low (__Lmediumconst shr (0+16))
   433  003E54  6EF8               	movwf	tblptru,c
   434  003E56  0100               	movlb	0
   435  003E58  EF53  F00D         	goto	_main	;jump to C main() function
   436                           tblptru	equ	0xFF8
   437                           tblptrh	equ	0xFF7
   438                           tblptrl	equ	0xFF6
   439                           tablat	equ	0xFF5
   440                           postinc0	equ	0xFEE
   441                           wreg	equ	0xFE8
   442                           postdec1	equ	0xFE5
   443                           fsr1l	equ	0xFE1
   444                           
   445                           	psect	bssCOMRAM
   446  000056                     __pbssCOMRAM:
   447                           	opt stack 0
   448  000056                     _O:
   449                           	opt stack 0
   450  000056                     	ds	2
   451  000058                     _H:
   452                           	opt stack 0
   453  000058                     	ds	2
   454  00005A                     _F:
   455                           	opt stack 0
   456  00005A                     	ds	2
   457  00005C                     _timer_10_counter:
   458                           	opt stack 0
   459  00005C                     	ds	2
   460  00005E                     _timer_6_counter:
   461                           	opt stack 0
   462  00005E                     	ds	2
   463  000060                     _timer_3_counter:
   464                           	opt stack 0
   465  000060                     	ds	2
   466  000062                     _view_mode:
   467                           	opt stack 0
   468  000062                     	ds	2
   469  000064                     _RPS_count:
   470                           	opt stack 0
   471  000064                     	ds	2
   472  000066                     _count_t1:
   473                           	opt stack 0
   474  000066                     	ds	2
   475  000068                     _RecvedChar:
   476                           	opt stack 0
   477  000068                     	ds	1
   478                           tblptru	equ	0xFF8
   479                           tblptrh	equ	0xFF7
   480                           tblptrl	equ	0xFF6
   481                           tablat	equ	0xFF5
   482                           postinc0	equ	0xFEE
   483                           wreg	equ	0xFE8
   484                           postdec1	equ	0xFE5
   485                           fsr1l	equ	0xFE1
   486                           
   487                           	psect	dataBANK0
   488  0000DB                     __pdataBANK0:
   489                           	opt stack 0
   490  0000DB                     _LCD_INIT_STRING:
   491                           	opt stack 0
   492  0000DB                     	ds	4
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           postdec1	equ	0xFE5
   500                           fsr1l	equ	0xFE1
   501                           
   502                           	psect	bssBANK1
   503  000154                     __pbssBANK1:
   504                           	opt stack 0
   505  000154                     _off_flag:
   506                           	opt stack 0
   507  000154                     	ds	2
   508  000156                     _on_flag:
   509                           	opt stack 0
   510  000156                     	ds	2
   511  000158                     _timer_10_flag:
   512                           	opt stack 0
   513  000158                     	ds	2
   514  00015A                     _timer_6_flag:
   515                           	opt stack 0
   516  00015A                     	ds	2
   517  00015C                     _timer_3_flag:
   518                           	opt stack 0
   519  00015C                     	ds	2
   520                           tblptru	equ	0xFF8
   521                           tblptrh	equ	0xFF7
   522                           tblptrl	equ	0xFF6
   523                           tablat	equ	0xFF5
   524                           postinc0	equ	0xFEE
   525                           wreg	equ	0xFE8
   526                           postdec1	equ	0xFE5
   527                           fsr1l	equ	0xFE1
   528                           
   529                           	psect	dataBANK1
   530  00015E                     __pdataBANK1:
   531                           	opt stack 0
   532  00015E                     _start_t1:
   533                           	opt stack 0
   534  00015E                     	ds	2
   535                           tblptru	equ	0xFF8
   536                           tblptrh	equ	0xFF7
   537                           tblptrl	equ	0xFF6
   538                           tablat	equ	0xFF5
   539                           postinc0	equ	0xFEE
   540                           wreg	equ	0xFE8
   541                           postdec1	equ	0xFE5
   542                           fsr1l	equ	0xFE1
   543                           
   544                           	psect	cstackBANK1
   545  000100                     __pcstackBANK1:
   546                           	opt stack 0
   547  000100                     main@Buffer:
   548                           	opt stack 0
   549                           
   550                           ; 32 bytes @ 0x0
   551  000100                     	ds	32
   552  000120                     main@voltage:
   553                           	opt stack 0
   554                           
   555                           ; 4 bytes @ 0x20
   556  000120                     	ds	4
   557  000124                     main@n1:
   558                           	opt stack 0
   559                           
   560                           ; 2 bytes @ 0x24
   561  000124                     	ds	2
   562  000126                     main@n2:
   563                           	opt stack 0
   564                           
   565                           ; 2 bytes @ 0x26
   566  000126                     	ds	2
   567  000128                     main@ii:
   568                           	opt stack 0
   569                           
   570                           ; 2 bytes @ 0x28
   571  000128                     	ds	2
   572  00012A                     main@TempF:
   573                           	opt stack 0
   574                           
   575                           ; 4 bytes @ 0x2A
   576  00012A                     	ds	4
   577  00012E                     main@analogs:
   578                           	opt stack 0
   579                           
   580                           ; 12 bytes @ 0x2E
   581  00012E                     	ds	12
   582  00013A                     main@flag2:
   583                           	opt stack 0
   584                           
   585                           ; 2 bytes @ 0x3A
   586  00013A                     	ds	2
   587  00013C                     main@iii:
   588                           	opt stack 0
   589                           
   590                           ; 2 bytes @ 0x3C
   591  00013C                     	ds	2
   592  00013E                     main@x:
   593                           	opt stack 0
   594                           
   595                           ; 2 bytes @ 0x3E
   596  00013E                     	ds	2
   597  000140                     main@Buffer44:
   598                           	opt stack 0
   599                           
   600                           ; 3 bytes @ 0x40
   601  000140                     	ds	3
   602  000143                     main@thresholded_Temp:
   603                           	opt stack 0
   604                           
   605                           ; 4 bytes @ 0x43
   606  000143                     	ds	4
   607  000147                     main@TempC:
   608                           	opt stack 0
   609                           
   610                           ; 4 bytes @ 0x47
   611  000147                     	ds	4
   612  00014B                     main@channel_692:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x4B
   616  00014B                     	ds	1
   617  00014C                     main@threshold:
   618                           	opt stack 0
   619                           
   620                           ; 4 bytes @ 0x4C
   621  00014C                     	ds	4
   622  000150                     main@led_speed:
   623                           	opt stack 0
   624                           
   625                           ; 4 bytes @ 0x50
   626  000150                     	ds	4
   627                           tblptru	equ	0xFF8
   628                           tblptrh	equ	0xFF7
   629                           tblptrl	equ	0xFF6
   630                           tablat	equ	0xFF5
   631                           postinc0	equ	0xFEE
   632                           wreg	equ	0xFE8
   633                           postdec1	equ	0xFE5
   634                           fsr1l	equ	0xFE1
   635                           
   636                           	psect	cstackBANK0
   637  000080                     __pcstackBANK0:
   638                           	opt stack 0
   639  000080                     ___flmul@sign:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0x0
   643  000080                     	ds	1
   644  000081                     ___flmul@aexp:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x1
   648  000081                     	ds	1
   649  000082                     ___flmul@grs:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x2
   653  000082                     	ds	4
   654  000086                     ___flmul@bexp:
   655                           	opt stack 0
   656                           
   657                           ; 1 bytes @ 0x6
   658  000086                     	ds	1
   659  000087                     ___flmul@prod:
   660                           	opt stack 0
   661                           
   662                           ; 4 bytes @ 0x7
   663  000087                     	ds	4
   664  00008B                     ___flmul@temp:
   665                           	opt stack 0
   666                           
   667                           ; 2 bytes @ 0xB
   668  00008B                     	ds	2
   669  00008D                     _fround$1930:
   670                           	opt stack 0
   671  00008D                     _scale$1931:
   672                           	opt stack 0
   673                           
   674                           ; 4 bytes @ 0xD
   675  00008D                     	ds	4
   676  000091                     scale@scl:
   677                           	opt stack 0
   678  000091                     _fround$1929:
   679                           	opt stack 0
   680                           
   681                           ; 4 bytes @ 0x11
   682  000091                     	ds	1
   683  000092                     ?___fltol:
   684                           	opt stack 0
   685  000092                     ___fltol@f1:
   686                           	opt stack 0
   687                           
   688                           ; 4 bytes @ 0x12
   689  000092                     	ds	3
   690  000095                     fround@prec:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x15
   694  000095                     	ds	1
   695  000096                     ??___fltol:
   696  000096                     ?___fladd:
   697                           	opt stack 0
   698  000096                     ___fladd@b:
   699                           	opt stack 0
   700                           
   701                           ; 4 bytes @ 0x16
   702  000096                     	ds	4
   703  00009A                     ___fladd@a:
   704                           	opt stack 0
   705                           
   706                           ; 4 bytes @ 0x1A
   707  00009A                     	ds	4
   708  00009E                     ??___fladd:
   709                           
   710                           ; 1 bytes @ 0x1E
   711  00009E                     	ds	8
   712  0000A6                     ___fladd@signs:
   713                           	opt stack 0
   714                           
   715                           ; 1 bytes @ 0x26
   716  0000A6                     	ds	1
   717  0000A7                     ___fladd@aexp:
   718                           	opt stack 0
   719                           
   720                           ; 1 bytes @ 0x27
   721  0000A7                     	ds	1
   722  0000A8                     ___fladd@bexp:
   723                           	opt stack 0
   724                           
   725                           ; 1 bytes @ 0x28
   726  0000A8                     	ds	1
   727  0000A9                     ___fladd@grs:
   728                           	opt stack 0
   729                           
   730                           ; 1 bytes @ 0x29
   731  0000A9                     	ds	1
   732  0000AA                     ?___flsub:
   733                           	opt stack 0
   734  0000AA                     ___flsub@b:
   735                           	opt stack 0
   736                           
   737                           ; 4 bytes @ 0x2A
   738  0000AA                     	ds	4
   739  0000AE                     ___flsub@a:
   740                           	opt stack 0
   741                           
   742                           ; 4 bytes @ 0x2E
   743  0000AE                     	ds	4
   744  0000B2                     ?_sprintf:
   745                           	opt stack 0
   746  0000B2                     sprintf@sp:
   747                           	opt stack 0
   748                           
   749                           ; 2 bytes @ 0x32
   750  0000B2                     	ds	2
   751  0000B4                     sprintf@f:
   752                           	opt stack 0
   753                           
   754                           ; 2 bytes @ 0x34
   755  0000B4                     	ds	6
   756  0000BA                     ??_sprintf:
   757                           
   758                           ; 1 bytes @ 0x3A
   759  0000BA                     	ds	4
   760  0000BE                     _sprintf$1932:
   761                           	opt stack 0
   762                           
   763                           ; 4 bytes @ 0x3E
   764  0000BE                     	ds	4
   765  0000C2                     sprintf@ap:
   766                           	opt stack 0
   767                           
   768                           ; 2 bytes @ 0x42
   769  0000C2                     	ds	2
   770  0000C4                     sprintf@val:
   771                           	opt stack 0
   772                           
   773                           ; 4 bytes @ 0x44
   774  0000C4                     	ds	4
   775  0000C8                     sprintf@tmpval:
   776                           	opt stack 0
   777                           
   778                           ; 4 bytes @ 0x48
   779  0000C8                     	ds	4
   780  0000CC                     sprintf@exp:
   781                           	opt stack 0
   782                           
   783                           ; 2 bytes @ 0x4C
   784  0000CC                     	ds	2
   785  0000CE                     sprintf@flag:
   786                           	opt stack 0
   787                           
   788                           ; 2 bytes @ 0x4E
   789  0000CE                     	ds	2
   790  0000D0                     sprintf@width:
   791                           	opt stack 0
   792                           
   793                           ; 2 bytes @ 0x50
   794  0000D0                     	ds	2
   795  0000D2                     sprintf@fval:
   796                           	opt stack 0
   797                           
   798                           ; 4 bytes @ 0x52
   799  0000D2                     	ds	4
   800  0000D6                     sprintf@prec:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x56
   804  0000D6                     	ds	2
   805  0000D8                     sprintf@c:
   806                           	opt stack 0
   807                           
   808                           ; 1 bytes @ 0x58
   809  0000D8                     	ds	1
   810  0000D9                     ??_main:
   811                           
   812                           ; 1 bytes @ 0x59
   813  0000D9                     	ds	2
   814                           tblptru	equ	0xFF8
   815                           tblptrh	equ	0xFF7
   816                           tblptrl	equ	0xFF6
   817                           tablat	equ	0xFF5
   818                           postinc0	equ	0xFEE
   819                           wreg	equ	0xFE8
   820                           postdec1	equ	0xFE5
   821                           fsr1l	equ	0xFE1
   822                           
   823                           	psect	cstackCOMRAM
   824  000001                     __pcstackCOMRAM:
   825                           	opt stack 0
   826  000001                     ??_Timer1_isr:
   827  000001                     ??_Timer0_isr:
   828  000001                     ??_RX_isr:
   829  000001                     i2delay_ms@n:
   830                           	opt stack 0
   831                           
   832                           ; 2 bytes @ 0x0
   833  000001                     	ds	2
   834  000003                     i2delay_ms@x:
   835                           	opt stack 0
   836                           
   837                           ; 2 bytes @ 0x2
   838  000003                     	ds	2
   839  000005                     ??_highIsr:
   840                           
   841                           ; 1 bytes @ 0x4
   842  000005                     	ds	18
   843  000017                     ??_isdigit:
   844  000017                     ??_delay_cycles:
   845  000017                     ?_read_adc_raw_no_lib:
   846                           	opt stack 0
   847  000017                     ?___wmul:
   848                           	opt stack 0
   849  000017                     ?___awmod:
   850                           	opt stack 0
   851  000017                     ?__tdiv_to_l_:
   852                           	opt stack 0
   853  000017                     ?__div_to_l_:
   854                           	opt stack 0
   855  000017                     ?___flneg:
   856                           	opt stack 0
   857  000017                     ?___lldiv:
   858                           	opt stack 0
   859  000017                     ?___llmod:
   860                           	opt stack 0
   861  000017                     setupSerial@dummy:
   862                           	opt stack 0
   863  000017                     send_byte_no_lib@c:
   864                           	opt stack 0
   865  000017                     atraso_ms@n:
   866                           	opt stack 0
   867  000017                     delay_ms@n:
   868                           	opt stack 0
   869  000017                     display7s@x:
   870                           	opt stack 0
   871  000017                     ___wmul@multiplier:
   872                           	opt stack 0
   873  000017                     ___awmod@dividend:
   874                           	opt stack 0
   875  000017                     __div_to_l_@f1:
   876                           	opt stack 0
   877  000017                     ___flge@ff1:
   878                           	opt stack 0
   879  000017                     ___flneg@f1:
   880                           	opt stack 0
   881  000017                     __tdiv_to_l_@f1:
   882                           	opt stack 0
   883  000017                     ___lldiv@dividend:
   884                           	opt stack 0
   885  000017                     ___llmod@dividend:
   886                           	opt stack 0
   887                           
   888                           ; 4 bytes @ 0x16
   889  000017                     	ds	1
   890  000018                     _isdigit$1542:
   891                           	opt stack 0
   892  000018                     send_string_no_lib@p:
   893                           	opt stack 0
   894                           
   895                           ; 2 bytes @ 0x17
   896  000018                     	ds	1
   897  000019                     ??_read_adc_raw_no_lib:
   898  000019                     display7s@v:
   899                           	opt stack 0
   900  000019                     isdigit@c:
   901                           	opt stack 0
   902  000019                     atraso_ms@x:
   903                           	opt stack 0
   904  000019                     delay_ms@x:
   905                           	opt stack 0
   906  000019                     ___wmul@multiplicand:
   907                           	opt stack 0
   908  000019                     ___awmod@divisor:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x18
   912  000019                     	ds	1
   913  00001A                     delay_cycles@n:
   914                           	opt stack 0
   915                           
   916                           ; 1 bytes @ 0x19
   917  00001A                     	ds	1
   918  00001B                     ___awmod@counter:
   919                           	opt stack 0
   920  00001B                     delay_cycles@x:
   921                           	opt stack 0
   922  00001B                     read_adc_raw_no_lib@raw_value:
   923                           	opt stack 0
   924  00001B                     ___wmul@product:
   925                           	opt stack 0
   926  00001B                     __div_to_l_@f2:
   927                           	opt stack 0
   928  00001B                     ___flge@ff2:
   929                           	opt stack 0
   930  00001B                     __tdiv_to_l_@f2:
   931                           	opt stack 0
   932  00001B                     ___lldiv@divisor:
   933                           	opt stack 0
   934  00001B                     ___llmod@divisor:
   935                           	opt stack 0
   936                           
   937                           ; 4 bytes @ 0x1A
   938  00001B                     	ds	1
   939  00001C                     ___awmod@sign:
   940                           	opt stack 0
   941                           
   942                           ; 1 bytes @ 0x1B
   943  00001C                     	ds	1
   944  00001D                     ??_lcd_send_nibble:
   945  00001D                     ?___awdiv:
   946                           	opt stack 0
   947  00001D                     ?___xxtofl:
   948                           	opt stack 0
   949  00001D                     read_adc_raw_no_lib@channel:
   950                           	opt stack 0
   951  00001D                     ___awdiv@dividend:
   952                           	opt stack 0
   953  00001D                     ___xxtofl@val:
   954                           	opt stack 0
   955                           
   956                           ; 4 bytes @ 0x1C
   957  00001D                     	ds	1
   958  00001E                     lcd_send_nibble@n:
   959                           	opt stack 0
   960                           
   961                           ; 1 bytes @ 0x1D
   962  00001E                     	ds	1
   963  00001F                     ??__tdiv_to_l_:
   964  00001F                     ??___flge:
   965  00001F                     lcd_send_byte@n:
   966                           	opt stack 0
   967  00001F                     ___llmod@counter:
   968                           	opt stack 0
   969  00001F                     ___awdiv@divisor:
   970                           	opt stack 0
   971  00001F                     __div_to_l_@quot:
   972                           	opt stack 0
   973  00001F                     ___lldiv@quotient:
   974                           	opt stack 0
   975                           
   976                           ; 4 bytes @ 0x1E
   977  00001F                     	ds	1
   978  000020                     lcd_send_byte@cm_data:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x1F
   982  000020                     	ds	1
   983  000021                     ??___xxtofl:
   984  000021                     lcd_init@i:
   985                           	opt stack 0
   986  000021                     lcd_gotoxy@y:
   987                           	opt stack 0
   988  000021                     ___awdiv@counter:
   989                           	opt stack 0
   990                           
   991                           ; 1 bytes @ 0x20
   992  000021                     	ds	1
   993  000022                     lcd_gotoxy@x:
   994                           	opt stack 0
   995  000022                     ___awdiv@sign:
   996                           	opt stack 0
   997  000022                     __tdiv_to_l_@quot:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x21
  1001  000022                     	ds	1
  1002  000023                     lcd_gotoxy@address:
  1003                           	opt stack 0
  1004  000023                     __div_to_l_@cntr:
  1005                           	opt stack 0
  1006  000023                     ___lldiv@counter:
  1007                           	opt stack 0
  1008  000023                     ___awdiv@quotient:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x22
  1012  000023                     	ds	1
  1013  000024                     lcd_putc@c:
  1014                           	opt stack 0
  1015  000024                     __div_to_l_@exp1:
  1016                           	opt stack 0
  1017                           
  1018                           ; 1 bytes @ 0x23
  1019  000024                     	ds	1
  1020  000025                     ___xxtofl@sign:
  1021                           	opt stack 0
  1022  000025                     lcd_puts@s:
  1023                           	opt stack 0
  1024                           
  1025                           ; 2 bytes @ 0x24
  1026  000025                     	ds	1
  1027  000026                     __tdiv_to_l_@cntr:
  1028                           	opt stack 0
  1029  000026                     ___xxtofl@exp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x25
  1033  000026                     	ds	1
  1034  000027                     __tdiv_to_l_@exp1:
  1035                           	opt stack 0
  1036  000027                     ___xxtofl@arg:
  1037                           	opt stack 0
  1038                           
  1039                           ; 4 bytes @ 0x26
  1040  000027                     	ds	4
  1041  00002B                     ?___fldiv:
  1042                           	opt stack 0
  1043  00002B                     ___fldiv@b:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x2A
  1047  00002B                     	ds	4
  1048  00002F                     ___fldiv@a:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x2E
  1052  00002F                     	ds	4
  1053  000033                     ??___fldiv:
  1054                           
  1055                           ; 1 bytes @ 0x32
  1056  000033                     	ds	4
  1057  000037                     ___fldiv@sign:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x36
  1061  000037                     	ds	1
  1062  000038                     ___fldiv@rem:
  1063                           	opt stack 0
  1064                           
  1065                           ; 4 bytes @ 0x37
  1066  000038                     	ds	4
  1067  00003C                     ___fldiv@new_exp:
  1068                           	opt stack 0
  1069                           
  1070                           ; 2 bytes @ 0x3B
  1071  00003C                     	ds	2
  1072  00003E                     ___fldiv@grs:
  1073                           	opt stack 0
  1074                           
  1075                           ; 4 bytes @ 0x3D
  1076  00003E                     	ds	4
  1077  000042                     ___fldiv@bexp:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x41
  1081  000042                     	ds	1
  1082  000043                     ___fldiv@aexp:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x42
  1086  000043                     	ds	1
  1087  000044                     ?_read_adc_voltage:
  1088                           	opt stack 0
  1089  000044                     ?___flmul:
  1090                           	opt stack 0
  1091  000044                     ___flmul@b:
  1092                           	opt stack 0
  1093                           
  1094                           ; 4 bytes @ 0x43
  1095  000044                     	ds	4
  1096  000048                     read_adc_voltage@voltage:
  1097                           	opt stack 0
  1098  000048                     ___flmul@a:
  1099                           	opt stack 0
  1100                           
  1101                           ; 4 bytes @ 0x47
  1102  000048                     	ds	4
  1103  00004C                     ??___flmul:
  1104  00004C                     read_adc_voltage@raw_value:
  1105                           	opt stack 0
  1106                           
  1107                           ; 2 bytes @ 0x4B
  1108  00004C                     	ds	2
  1109  00004E                     read_adc_voltage@channel:
  1110                           	opt stack 0
  1111                           
  1112                           ; 1 bytes @ 0x4D
  1113  00004E                     	ds	2
  1114  000050                     ?_fround:
  1115                           	opt stack 0
  1116  000050                     ?_scale:
  1117                           	opt stack 0
  1118                           
  1119                           ; 4 bytes @ 0x4F
  1120  000050                     	ds	4
  1121  000054                     ___fltol@sign1:
  1122                           	opt stack 0
  1123                           
  1124                           ; 1 bytes @ 0x53
  1125  000054                     	ds	1
  1126  000055                     ___fltol@exp1:
  1127                           	opt stack 0
  1128                           
  1129                           ; 1 bytes @ 0x54
  1130  000055                     	ds	1
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           
  1140 ;;
  1141 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1142 ;;
  1143 ;; *************** function _main *****************
  1144 ;; Defined at:
  1145 ;;		line 352 in file "pwm_asl.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  str             6    0        unsigned char [6]
  1150 ;;  x               2   62[BANK1 ] int 
  1151 ;;  tmpi            2    0        unsigned int 
  1152 ;;  tmp             1    0        unsigned char 
  1153 ;;  i               1    0        unsigned char 
  1154 ;;  channel         1   75[BANK1 ] unsigned char 
  1155 ;;  Buffer         32    0[BANK1 ] unsigned char [32]
  1156 ;;  analogs        12   46[BANK1 ] float [3]
  1157 ;;  AN             12    0        float [3]
  1158 ;;  led_speed       4   80[BANK1 ] float 
  1159 ;;  threshold       4   76[BANK1 ] float 
  1160 ;;  TempC           4   71[BANK1 ] float 
  1161 ;;  thresholded_    4   67[BANK1 ] float 
  1162 ;;  TempF           4   42[BANK1 ] float 
  1163 ;;  voltage         4   32[BANK1 ] float 
  1164 ;;  arr             4    0        int [2]
  1165 ;;  Buffer44        3   64[BANK1 ] unsigned char [3]
  1166 ;;  iii             2   60[BANK1 ] int 
  1167 ;;  flag2           2   58[BANK1 ] int 
  1168 ;;  ii              2   40[BANK1 ] int 
  1169 ;;  n2              2   38[BANK1 ] int 
  1170 ;;  n1              2   36[BANK1 ] int 
  1171 ;;  RPS             2    0        int 
  1172 ;;  raw_val         2    0        int 
  1173 ;;  hello           2    0        int 
  1174 ;;  channel         1    0        unsigned char 
  1175 ;; Return value:  Size  Location     Type
  1176 ;;                  1    wreg      void 
  1177 ;; Registers used:
  1178 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1179 ;; Tracked objects:
  1180 ;;		On entry : 0/0
  1181 ;;		On exit  : 0/0
  1182 ;;		Unchanged: 0/0
  1183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1185 ;;      Locals:         0       0      84       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Totals:         0       2      84       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;Total ram usage:       86 bytes
  1189 ;; Hardware stack levels required when called:    9
  1190 ;; This function calls:
  1191 ;;		___awmod
  1192 ;;		___fladd
  1193 ;;		___fldiv
  1194 ;;		___flge
  1195 ;;		___flmul
  1196 ;;		___fltol
  1197 ;;		_atraso_ms
  1198 ;;		_display7s
  1199 ;;		_initTimers00
  1200 ;;		_initTimers01
  1201 ;;		_init_adc_no_lib
  1202 ;;		_lcd_gotoxy
  1203 ;;		_lcd_init
  1204 ;;		_lcd_putc
  1205 ;;		_lcd_puts
  1206 ;;		_read_adc_voltage
  1207 ;;		_send_string_no_lib
  1208 ;;		_setupPorts
  1209 ;;		_setupSerial
  1210 ;;		_sprintf
  1211 ;; This function is called by:
  1212 ;;		Startup code after reset
  1213 ;; This function uses a non-reentrant model
  1214 ;;
  1215                           
  1216                           	psect	text0
  1217  001AA6                     __ptext0:
  1218                           	opt stack 0
  1219  001AA6                     _main:
  1220                           	opt stack 22
  1221                           
  1222                           ;pwm_asl.c: 354: char Buffer[32];
  1223                           ;pwm_asl.c: 355: char Buffer44[3];
  1224                           ;pwm_asl.c: 356: int hello ;
  1225                           ;pwm_asl.c: 357: int arr[2] ;
  1226                           ;pwm_asl.c: 358: int n1 ;
  1227                           ;pwm_asl.c: 359: int n2 ;
  1228                           ;pwm_asl.c: 360: int ii ;
  1229                           ;pwm_asl.c: 361: int iii ;
  1230                           ;pwm_asl.c: 365: float AN[3];
  1231                           ;pwm_asl.c: 366: int raw_val;
  1232                           ;pwm_asl.c: 367: unsigned char channel;
  1233                           ;pwm_asl.c: 368: float voltage;
  1234                           ;pwm_asl.c: 369: setupPorts();
  1235                           
  1236                           ;incstack = 0
  1237  001AA6  ECEF  F020         	call	_setupPorts	;wreg free
  1238                           
  1239                           ;pwm_asl.c: 370: setupSerial();
  1240  001AAA  ECAC  F020         	call	_setupSerial	;wreg free
  1241                           
  1242                           ;pwm_asl.c: 371: lcd_init();
  1243  001AAE  ECCE  F01E         	call	_lcd_init	;wreg free
  1244                           
  1245                           ;pwm_asl.c: 372: initTimers01();
  1246  001AB2  ECFE  F020         	call	_initTimers01	;wreg free
  1247                           
  1248                           ;pwm_asl.c: 373: init_adc_no_lib();
  1249  001AB6  EC13  F021         	call	_init_adc_no_lib	;wreg free
  1250                           
  1251                           ;pwm_asl.c: 376: PORTCbits.RC5 = 1;
  1252  001ABA  8A82               	bsf	3970,5,c	;volatile
  1253                           
  1254                           ;pwm_asl.c: 378: lcd_putc('\f');
  1255  001ABC  0E0C               	movlw	12
  1256  001ABE  EC59  F01F         	call	_lcd_putc
  1257                           
  1258                           ;pwm_asl.c: 380: float analogs[3];
  1259                           ;pwm_asl.c: 381: float TempC=0;
  1260  001AC2  0E00               	movlw	0
  1261  001AC4  0101               	movlb	1	; () banked
  1262  001AC6  6F47               	movwf	main@TempC& (0+255),b
  1263  001AC8  0E00               	movlw	0
  1264  001ACA  6F48               	movwf	(main@TempC+1)& (0+255),b
  1265  001ACC  0E00               	movlw	0
  1266  001ACE  6F49               	movwf	(main@TempC+2)& (0+255),b
  1267  001AD0  0E00               	movlw	0
  1268  001AD2  6F4A               	movwf	(main@TempC+3)& (0+255),b
  1269                           
  1270                           ; BSR set to: 1
  1271                           ;pwm_asl.c: 382: float TempF=0;
  1272  001AD4  0E00               	movlw	0
  1273  001AD6  6F2A               	movwf	main@TempF& (0+255),b
  1274  001AD8  0E00               	movlw	0
  1275  001ADA  6F2B               	movwf	(main@TempF+1)& (0+255),b
  1276  001ADC  0E00               	movlw	0
  1277  001ADE  6F2C               	movwf	(main@TempF+2)& (0+255),b
  1278  001AE0  0E00               	movlw	0
  1279  001AE2  6F2D               	movwf	(main@TempF+3)& (0+255),b
  1280                           
  1281                           ; BSR set to: 1
  1282                           ;pwm_asl.c: 383: float threshold =0;
  1283  001AE4  0E00               	movlw	0
  1284  001AE6  6F4C               	movwf	main@threshold& (0+255),b
  1285  001AE8  0E00               	movlw	0
  1286  001AEA  6F4D               	movwf	(main@threshold+1)& (0+255),b
  1287  001AEC  0E00               	movlw	0
  1288  001AEE  6F4E               	movwf	(main@threshold+2)& (0+255),b
  1289  001AF0  0E00               	movlw	0
  1290  001AF2  6F4F               	movwf	(main@threshold+3)& (0+255),b
  1291                           
  1292                           ; BSR set to: 1
  1293                           ;pwm_asl.c: 384: float thresholded_Temp=0;
  1294  001AF4  0E00               	movlw	0
  1295  001AF6  6F43               	movwf	main@thresholded_Temp& (0+255),b
  1296  001AF8  0E00               	movlw	0
  1297  001AFA  6F44               	movwf	(main@thresholded_Temp+1)& (0+255),b
  1298  001AFC  0E00               	movlw	0
  1299  001AFE  6F45               	movwf	(main@thresholded_Temp+2)& (0+255),b
  1300  001B00  0E00               	movlw	0
  1301  001B02  6F46               	movwf	(main@thresholded_Temp+3)& (0+255),b
  1302                           
  1303                           ; BSR set to: 1
  1304                           ;pwm_asl.c: 385: int RPS;
  1305                           ;pwm_asl.c: 386: int flag2=0;
  1306  001B04  0E00               	movlw	0
  1307  001B06  6F3B               	movwf	(main@flag2+1)& (0+255),b
  1308  001B08  0E00               	movlw	0
  1309  001B0A  6F3A               	movwf	main@flag2& (0+255),b
  1310                           
  1311                           ; BSR set to: 1
  1312                           ;pwm_asl.c: 387: float led_speed ;
  1313                           ;pwm_asl.c: 391: initTimers00();
  1314  001B0C  ECCF  F020         	call	_initTimers00	;wreg free
  1315                           
  1316                           ;pwm_asl.c: 392: TRISCbits.RC0 = 1;
  1317  001B10  8094               	bsf	3988,0,c	;volatile
  1318  001B12                     
  1319                           ;pwm_asl.c: 395: TRISA=0x07;
  1320  001B12  0E07               	movlw	7
  1321  001B14  6E92               	movwf	3986,c	;volatile
  1322                           
  1323                           ;pwm_asl.c: 396: _delay((unsigned long)((200)*(4000000UL/4000.0)));
  1324  001B16  0E02               	movlw	2
  1325  001B18  0100               	movlb	0	; () banked
  1326  001B1A  6FDA               	movwf	(??_main+1)& (0+255),b
  1327  001B1C  0E04               	movlw	4
  1328  001B1E  6FD9               	movwf	??_main& (0+255),b
  1329  001B20  0EBA               	movlw	186
  1330  001B22                     u6937:
  1331  001B22  2EE8               	decfsz	wreg,f,c
  1332  001B24  D7FE               	bra	u6937
  1333  001B26  2FD9               	decfsz	??_main& (0+255),f,b
  1334  001B28  D7FC               	bra	u6937
  1335  001B2A  2FDA               	decfsz	(??_main+1)& (0+255),f,b
  1336  001B2C  D7FA               	bra	u6937
  1337  001B2E  F000               	nop	
  1338  001B30  0004               	clrwdt		;# 
  1339                           
  1340                           ;pwm_asl.c: 424: for (unsigned char channel = 0; channel < 3; channel++) {
  1341  001B32  0E00               	movlw	0
  1342  001B34  0101               	movlb	1	; () banked
  1343  001B36  6F4B               	movwf	main@channel_692& (0+255),b
  1344  001B38                     l5823:
  1345                           
  1346                           ; BSR set to: 1
  1347  001B38  0E02               	movlw	2
  1348  001B3A  654B               	cpfsgt	main@channel_692& (0+255),b
  1349  001B3C  D001               	goto	l175
  1350  001B3E  D030               	goto	u6730
  1351  001B40                     l175:
  1352                           
  1353                           ; BSR set to: 1
  1354                           ;pwm_asl.c: 425: voltage = read_adc_voltage((unsigned char) channel);
  1355                           
  1356                           ; BSR set to: 1
  1357  001B40  514B               	movf	main@channel_692& (0+255),w,b
  1358  001B42  EC22  F01E         	call	_read_adc_voltage
  1359  001B46  C044  F120         	movff	?_read_adc_voltage,main@voltage
  1360  001B4A  C045  F121         	movff	?_read_adc_voltage+1,main@voltage+1
  1361  001B4E  C046  F122         	movff	?_read_adc_voltage+2,main@voltage+2
  1362  001B52  C047  F123         	movff	?_read_adc_voltage+3,main@voltage+3
  1363                           
  1364                           ;pwm_asl.c: 426: analogs[channel] = voltage * 100;
  1365  001B56  C120  F044         	movff	main@voltage,___flmul@b
  1366  001B5A  C121  F045         	movff	main@voltage+1,___flmul@b+1
  1367  001B5E  C122  F046         	movff	main@voltage+2,___flmul@b+2
  1368  001B62  C123  F047         	movff	main@voltage+3,___flmul@b+3
  1369  001B66  0E00               	movlw	0
  1370  001B68  6E48               	movwf	___flmul@a,c
  1371  001B6A  0E00               	movlw	0
  1372  001B6C  6E49               	movwf	___flmul@a+1,c
  1373  001B6E  0EC8               	movlw	200
  1374  001B70  6E4A               	movwf	___flmul@a+2,c
  1375  001B72  0E42               	movlw	66
  1376  001B74  6E4B               	movwf	___flmul@a+3,c
  1377  001B76  ECE2  F012         	call	___flmul	;wreg free
  1378  001B7A  0101               	movlb	1	; () banked
  1379  001B7C  514B               	movf	main@channel_692& (0+255),w,b
  1380  001B7E  0D04               	mullw	4
  1381  001B80  0E2E               	movlw	low main@analogs
  1382  001B82  24F3               	addwf	prodl,w,c
  1383  001B84  6ED9               	movwf	fsr2l,c
  1384  001B86  0E01               	movlw	high main@analogs
  1385  001B88  20F4               	addwfc	prodh,w,c
  1386  001B8A  6EDA               	movwf	fsr2h,c
  1387  001B8C  C044  FFDE         	movff	?___flmul,postinc2
  1388  001B90  C045  FFDE         	movff	?___flmul+1,postinc2
  1389  001B94  C046  FFDE         	movff	?___flmul+2,postinc2
  1390  001B98  C047  FFDE         	movff	?___flmul+3,postinc2
  1391                           
  1392                           ; BSR set to: 1
  1393  001B9C  2B4B               	incf	main@channel_692& (0+255),f,b
  1394  001B9E  D7CC               	goto	l5823
  1395  001BA0                     u6730:
  1396                           
  1397                           ; BSR set to: 1
  1398                           ;pwm_asl.c: 428: }
  1399                           ;pwm_asl.c: 429: TempC = analogs[2];
  1400  001BA0  C136  F147         	movff	main@analogs+8,main@TempC
  1401  001BA4  C137  F148         	movff	main@analogs+9,main@TempC+1
  1402  001BA8  C138  F149         	movff	main@analogs+10,main@TempC+2
  1403  001BAC  C139  F14A         	movff	main@analogs+11,main@TempC+3
  1404                           
  1405                           ; BSR set to: 1
  1406                           ;pwm_asl.c: 430: threshold = analogs[0]/100;
  1407  001BB0  C12E  F02B         	movff	main@analogs,___fldiv@b
  1408  001BB4  C12F  F02C         	movff	main@analogs+1,___fldiv@b+1
  1409  001BB8  C130  F02D         	movff	main@analogs+2,___fldiv@b+2
  1410  001BBC  C131  F02E         	movff	main@analogs+3,___fldiv@b+3
  1411  001BC0  0E00               	movlw	0
  1412  001BC2  6E2F               	movwf	___fldiv@a,c
  1413  001BC4  0E00               	movlw	0
  1414  001BC6  6E30               	movwf	___fldiv@a+1,c
  1415  001BC8  0EC8               	movlw	200
  1416  001BCA  6E31               	movwf	___fldiv@a+2,c
  1417  001BCC  0E42               	movlw	66
  1418  001BCE  6E32               	movwf	___fldiv@a+3,c
  1419  001BD0  EC2A  F016         	call	___fldiv	;wreg free
  1420  001BD4  C02B  F14C         	movff	?___fldiv,main@threshold
  1421  001BD8  C02C  F14D         	movff	?___fldiv+1,main@threshold+1
  1422  001BDC  C02D  F14E         	movff	?___fldiv+2,main@threshold+2
  1423  001BE0  C02E  F14F         	movff	?___fldiv+3,main@threshold+3
  1424                           
  1425                           ;pwm_asl.c: 432: TempF= (1.8 * TempC)+32;
  1426  001BE4  0E66               	movlw	102
  1427  001BE6  6E48               	movwf	___flmul@a,c
  1428  001BE8  0E66               	movlw	102
  1429  001BEA  6E49               	movwf	___flmul@a+1,c
  1430  001BEC  0EE6               	movlw	230
  1431  001BEE  6E4A               	movwf	___flmul@a+2,c
  1432  001BF0  0E3F               	movlw	63
  1433  001BF2  6E4B               	movwf	___flmul@a+3,c
  1434  001BF4  C147  F044         	movff	main@TempC,___flmul@b
  1435  001BF8  C148  F045         	movff	main@TempC+1,___flmul@b+1
  1436  001BFC  C149  F046         	movff	main@TempC+2,___flmul@b+2
  1437  001C00  C14A  F047         	movff	main@TempC+3,___flmul@b+3
  1438  001C04  ECE2  F012         	call	___flmul	;wreg free
  1439  001C08  C044  F096         	movff	?___flmul,___fladd@b
  1440  001C0C  C045  F097         	movff	?___flmul+1,___fladd@b+1
  1441  001C10  C046  F098         	movff	?___flmul+2,___fladd@b+2
  1442  001C14  C047  F099         	movff	?___flmul+3,___fladd@b+3
  1443  001C18  0E00               	movlw	0
  1444  001C1A  0100               	movlb	0	; () banked
  1445  001C1C  6F9A               	movwf	___fladd@a& (0+255),b
  1446  001C1E  0E00               	movlw	0
  1447  001C20  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  1448  001C22  0E00               	movlw	0
  1449  001C24  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  1450  001C26  0E42               	movlw	66
  1451  001C28  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  1452  001C2A  EC8B  F014         	call	___fladd	;wreg free
  1453  001C2E  C096  F12A         	movff	?___fladd,main@TempF
  1454  001C32  C097  F12B         	movff	?___fladd+1,main@TempF+1
  1455  001C36  C098  F12C         	movff	?___fladd+2,main@TempF+2
  1456  001C3A  C099  F12D         	movff	?___fladd+3,main@TempF+3
  1457                           
  1458                           ;pwm_asl.c: 434: led_speed = analogs[1]/100;
  1459  001C3E  C132  F02B         	movff	main@analogs+4,___fldiv@b
  1460  001C42  C133  F02C         	movff	main@analogs+5,___fldiv@b+1
  1461  001C46  C134  F02D         	movff	main@analogs+6,___fldiv@b+2
  1462  001C4A  C135  F02E         	movff	main@analogs+7,___fldiv@b+3
  1463  001C4E  0E00               	movlw	0
  1464  001C50  6E2F               	movwf	___fldiv@a,c
  1465  001C52  0E00               	movlw	0
  1466  001C54  6E30               	movwf	___fldiv@a+1,c
  1467  001C56  0EC8               	movlw	200
  1468  001C58  6E31               	movwf	___fldiv@a+2,c
  1469  001C5A  0E42               	movlw	66
  1470  001C5C  6E32               	movwf	___fldiv@a+3,c
  1471  001C5E  EC2A  F016         	call	___fldiv	;wreg free
  1472  001C62  C02B  F150         	movff	?___fldiv,main@led_speed
  1473  001C66  C02C  F151         	movff	?___fldiv+1,main@led_speed+1
  1474  001C6A  C02D  F152         	movff	?___fldiv+2,main@led_speed+2
  1475  001C6E  C02E  F153         	movff	?___fldiv+3,main@led_speed+3
  1476                           
  1477                           ;pwm_asl.c: 436: ii = threshold ;
  1478  001C72  C14C  F092         	movff	main@threshold,___fltol@f1
  1479  001C76  C14D  F093         	movff	main@threshold+1,___fltol@f1+1
  1480  001C7A  C14E  F094         	movff	main@threshold+2,___fltol@f1+2
  1481  001C7E  C14F  F095         	movff	main@threshold+3,___fltol@f1+3
  1482  001C82  EC6A  F01C         	call	___fltol	;wreg free
  1483  001C86  C092  F128         	movff	?___fltol,main@ii
  1484  001C8A  C093  F129         	movff	?___fltol+1,main@ii+1
  1485                           
  1486                           ;pwm_asl.c: 437: iii = threshold * 10 ;
  1487  001C8E  0E00               	movlw	0
  1488  001C90  6E48               	movwf	___flmul@a,c
  1489  001C92  0E00               	movlw	0
  1490  001C94  6E49               	movwf	___flmul@a+1,c
  1491  001C96  0E20               	movlw	32
  1492  001C98  6E4A               	movwf	___flmul@a+2,c
  1493  001C9A  0E41               	movlw	65
  1494  001C9C  6E4B               	movwf	___flmul@a+3,c
  1495  001C9E  C14C  F044         	movff	main@threshold,___flmul@b
  1496  001CA2  C14D  F045         	movff	main@threshold+1,___flmul@b+1
  1497  001CA6  C14E  F046         	movff	main@threshold+2,___flmul@b+2
  1498  001CAA  C14F  F047         	movff	main@threshold+3,___flmul@b+3
  1499  001CAE  ECE2  F012         	call	___flmul	;wreg free
  1500  001CB2  C044  F092         	movff	?___flmul,___fltol@f1
  1501  001CB6  C045  F093         	movff	?___flmul+1,___fltol@f1+1
  1502  001CBA  C046  F094         	movff	?___flmul+2,___fltol@f1+2
  1503  001CBE  C047  F095         	movff	?___flmul+3,___fltol@f1+3
  1504  001CC2  EC6A  F01C         	call	___fltol	;wreg free
  1505  001CC6  C092  F13C         	movff	?___fltol,main@iii
  1506  001CCA  C093  F13D         	movff	?___fltol+1,main@iii+1
  1507                           
  1508                           ;pwm_asl.c: 438: iii = iii%10 ;
  1509  001CCE  C13C  F017         	movff	main@iii,___awmod@dividend
  1510  001CD2  C13D  F018         	movff	main@iii+1,___awmod@dividend+1
  1511  001CD6  0E00               	movlw	0
  1512  001CD8  6E1A               	movwf	___awmod@divisor+1,c
  1513  001CDA  0E0A               	movlw	10
  1514  001CDC  6E19               	movwf	___awmod@divisor,c
  1515  001CDE  EC63  F01E         	call	___awmod	;wreg free
  1516  001CE2  C017  F13C         	movff	?___awmod,main@iii
  1517  001CE6  C018  F13D         	movff	?___awmod+1,main@iii+1
  1518                           
  1519                           ;pwm_asl.c: 444: if(on_flag)
  1520  001CEA  0101               	movlb	1	; () banked
  1521  001CEC  5156               	movf	_on_flag& (0+255),w,b
  1522  001CEE  1157               	iorwf	(_on_flag+1)& (0+255),w,b
  1523  001CF0  B4D8               	btfsc	status,2,c
  1524  001CF2  D229               	goto	l177
  1525                           
  1526                           ; BSR set to: 1
  1527                           ;pwm_asl.c: 445: {
  1528                           ;pwm_asl.c: 446: T1CONbits.TMR1ON = 1;
  1529  001CF4  80CD               	bsf	4045,0,c	;volatile
  1530                           
  1531                           ; BSR set to: 1
  1532                           ;pwm_asl.c: 448: off_flag = 0 ;
  1533  001CF6  0E00               	movlw	0
  1534  001CF8  6F55               	movwf	(_off_flag+1)& (0+255),b
  1535  001CFA  0E00               	movlw	0
  1536  001CFC  6F54               	movwf	_off_flag& (0+255),b
  1537                           
  1538                           ; BSR set to: 1
  1539                           ;pwm_asl.c: 450: lcd_gotoxy(1,1);
  1540  001CFE  0E01               	movlw	1
  1541  001D00  6E21               	movwf	lcd_gotoxy@y,c
  1542  001D02  0E01               	movlw	1
  1543  001D04  ECCC  F01F         	call	_lcd_gotoxy
  1544                           
  1545                           ;pwm_asl.c: 451: if(view_mode)sprintf(Buffer, "Tmp in C = %0.1f",TempC);
  1546  001D08  5062               	movf	_view_mode,w,c
  1547  001D0A  1063               	iorwf	_view_mode+1,w,c
  1548  001D0C  B4D8               	btfsc	status,2,c
  1549  001D0E  D014               	goto	l178
  1550  001D10  0E00               	movlw	low main@Buffer
  1551  001D12  0100               	movlb	0	; () banked
  1552  001D14  6FB2               	movwf	sprintf@sp& (0+255),b
  1553  001D16  0E01               	movlw	high main@Buffer
  1554  001D18  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1555  001D1A  0EB9               	movlw	low STR_1
  1556  001D1C  6FB4               	movwf	sprintf@f& (0+255),b
  1557  001D1E  0E10               	movlw	high STR_1
  1558  001D20  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1559  001D22  C147  F0B6         	movff	main@TempC,?_sprintf+4
  1560  001D26  C148  F0B7         	movff	main@TempC+1,?_sprintf+5
  1561  001D2A  C149  F0B8         	movff	main@TempC+2,?_sprintf+6
  1562  001D2E  C14A  F0B9         	movff	main@TempC+3,?_sprintf+7
  1563  001D32  EC7F  F008         	call	_sprintf	;wreg free
  1564  001D36  D013               	goto	l179
  1565  001D38                     l178:
  1566                           
  1567                           ;pwm_asl.c: 452: else {sprintf(Buffer, "Tmp in F = %0.1f",TempF);
  1568  001D38  0E00               	movlw	low main@Buffer
  1569  001D3A  0100               	movlb	0	; () banked
  1570  001D3C  6FB2               	movwf	sprintf@sp& (0+255),b
  1571  001D3E  0E01               	movlw	high main@Buffer
  1572  001D40  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1573  001D42  0ECA               	movlw	low STR_2
  1574  001D44  6FB4               	movwf	sprintf@f& (0+255),b
  1575  001D46  0E10               	movlw	high STR_2
  1576  001D48  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1577  001D4A  C12A  F0B6         	movff	main@TempF,?_sprintf+4
  1578  001D4E  C12B  F0B7         	movff	main@TempF+1,?_sprintf+5
  1579  001D52  C12C  F0B8         	movff	main@TempF+2,?_sprintf+6
  1580  001D56  C12D  F0B9         	movff	main@TempF+3,?_sprintf+7
  1581  001D5A  EC7F  F008         	call	_sprintf	;wreg free
  1582  001D5E                     l179:
  1583                           
  1584                           ;pwm_asl.c: 454: }
  1585                           ;pwm_asl.c: 457: lcd_puts(Buffer);
  1586  001D5E  0E00               	movlw	low main@Buffer
  1587  001D60  6E25               	movwf	lcd_puts@s,c
  1588  001D62  0E01               	movlw	high main@Buffer
  1589  001D64  6E26               	movwf	lcd_puts@s+1,c
  1590  001D66  EC2E  F01F         	call	_lcd_puts	;wreg free
  1591                           
  1592                           ;pwm_asl.c: 458: lcd_gotoxy(1,2);
  1593  001D6A  0E02               	movlw	2
  1594  001D6C  6E21               	movwf	lcd_gotoxy@y,c
  1595  001D6E  0E01               	movlw	1
  1596  001D70  ECCC  F01F         	call	_lcd_gotoxy
  1597                           
  1598                           ;pwm_asl.c: 459: sprintf(Buffer, "Threshold = %0.2f",threshold);
  1599  001D74  0E00               	movlw	low main@Buffer
  1600  001D76  0100               	movlb	0	; () banked
  1601  001D78  6FB2               	movwf	sprintf@sp& (0+255),b
  1602  001D7A  0E01               	movlw	high main@Buffer
  1603  001D7C  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1604  001D7E  0EA7               	movlw	low STR_3
  1605  001D80  6FB4               	movwf	sprintf@f& (0+255),b
  1606  001D82  0E10               	movlw	high STR_3
  1607  001D84  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1608  001D86  C14C  F0B6         	movff	main@threshold,?_sprintf+4
  1609  001D8A  C14D  F0B7         	movff	main@threshold+1,?_sprintf+5
  1610  001D8E  C14E  F0B8         	movff	main@threshold+2,?_sprintf+6
  1611  001D92  C14F  F0B9         	movff	main@threshold+3,?_sprintf+7
  1612  001D96  EC7F  F008         	call	_sprintf	;wreg free
  1613                           
  1614                           ;pwm_asl.c: 460: sprintf(Buffer44, "%0.1f",threshold);
  1615  001D9A  0E40               	movlw	low main@Buffer44
  1616  001D9C  0100               	movlb	0	; () banked
  1617  001D9E  6FB2               	movwf	sprintf@sp& (0+255),b
  1618  001DA0  0E01               	movlw	high main@Buffer44
  1619  001DA2  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1620  001DA4  0EC4               	movlw	low (STR_1+11)
  1621  001DA6  6FB4               	movwf	sprintf@f& (0+255),b
  1622  001DA8  0E10               	movlw	high (STR_1+11)
  1623  001DAA  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1624  001DAC  C14C  F0B6         	movff	main@threshold,?_sprintf+4
  1625  001DB0  C14D  F0B7         	movff	main@threshold+1,?_sprintf+5
  1626  001DB4  C14E  F0B8         	movff	main@threshold+2,?_sprintf+6
  1627  001DB8  C14F  F0B9         	movff	main@threshold+3,?_sprintf+7
  1628  001DBC  EC7F  F008         	call	_sprintf	;wreg free
  1629                           
  1630                           ;pwm_asl.c: 463: lcd_puts(Buffer);
  1631  001DC0  0E00               	movlw	low main@Buffer
  1632  001DC2  6E25               	movwf	lcd_puts@s,c
  1633  001DC4  0E01               	movlw	high main@Buffer
  1634  001DC6  6E26               	movwf	lcd_puts@s+1,c
  1635  001DC8  EC2E  F01F         	call	_lcd_puts	;wreg free
  1636                           
  1637                           ;pwm_asl.c: 466: thresholded_Temp=80*(threshold/5);
  1638  001DCC  0E00               	movlw	0
  1639  001DCE  6E2F               	movwf	___fldiv@a,c
  1640  001DD0  0E00               	movlw	0
  1641  001DD2  6E30               	movwf	___fldiv@a+1,c
  1642  001DD4  0EA0               	movlw	160
  1643  001DD6  6E31               	movwf	___fldiv@a+2,c
  1644  001DD8  0E40               	movlw	64
  1645  001DDA  6E32               	movwf	___fldiv@a+3,c
  1646  001DDC  C14C  F02B         	movff	main@threshold,___fldiv@b
  1647  001DE0  C14D  F02C         	movff	main@threshold+1,___fldiv@b+1
  1648  001DE4  C14E  F02D         	movff	main@threshold+2,___fldiv@b+2
  1649  001DE8  C14F  F02E         	movff	main@threshold+3,___fldiv@b+3
  1650  001DEC  EC2A  F016         	call	___fldiv	;wreg free
  1651  001DF0  C02B  F044         	movff	?___fldiv,___flmul@b
  1652  001DF4  C02C  F045         	movff	?___fldiv+1,___flmul@b+1
  1653  001DF8  C02D  F046         	movff	?___fldiv+2,___flmul@b+2
  1654  001DFC  C02E  F047         	movff	?___fldiv+3,___flmul@b+3
  1655  001E00  0E00               	movlw	0
  1656  001E02  6E48               	movwf	___flmul@a,c
  1657  001E04  0E00               	movlw	0
  1658  001E06  6E49               	movwf	___flmul@a+1,c
  1659  001E08  0EA0               	movlw	160
  1660  001E0A  6E4A               	movwf	___flmul@a+2,c
  1661  001E0C  0E42               	movlw	66
  1662  001E0E  6E4B               	movwf	___flmul@a+3,c
  1663  001E10  ECE2  F012         	call	___flmul	;wreg free
  1664  001E14  C044  F143         	movff	?___flmul,main@thresholded_Temp
  1665  001E18  C045  F144         	movff	?___flmul+1,main@thresholded_Temp+1
  1666  001E1C  C046  F145         	movff	?___flmul+2,main@thresholded_Temp+2
  1667  001E20  C047  F146         	movff	?___flmul+3,main@thresholded_Temp+3
  1668                           
  1669                           ;pwm_asl.c: 467: lcd_gotoxy(1,3);
  1670  001E24  0E03               	movlw	3
  1671  001E26  6E21               	movwf	lcd_gotoxy@y,c
  1672  001E28  0E01               	movlw	1
  1673  001E2A  ECCC  F01F         	call	_lcd_gotoxy
  1674                           
  1675                           ;pwm_asl.c: 468: sprintf(Buffer, "Th Temp = %0.1f",thresholded_Temp);
  1676  001E2E  0E00               	movlw	low main@Buffer
  1677  001E30  0100               	movlb	0	; () banked
  1678  001E32  6FB2               	movwf	sprintf@sp& (0+255),b
  1679  001E34  0E01               	movlw	high main@Buffer
  1680  001E36  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1681  001E38  0EDB               	movlw	low STR_5
  1682  001E3A  6FB4               	movwf	sprintf@f& (0+255),b
  1683  001E3C  0E10               	movlw	high STR_5
  1684  001E3E  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1685  001E40  C143  F0B6         	movff	main@thresholded_Temp,?_sprintf+4
  1686  001E44  C144  F0B7         	movff	main@thresholded_Temp+1,?_sprintf+5
  1687  001E48  C145  F0B8         	movff	main@thresholded_Temp+2,?_sprintf+6
  1688  001E4C  C146  F0B9         	movff	main@thresholded_Temp+3,?_sprintf+7
  1689  001E50  EC7F  F008         	call	_sprintf	;wreg free
  1690                           
  1691                           ;pwm_asl.c: 470: lcd_puts(Buffer);
  1692  001E54  0E00               	movlw	low main@Buffer
  1693  001E56  6E25               	movwf	lcd_puts@s,c
  1694  001E58  0E01               	movlw	high main@Buffer
  1695  001E5A  6E26               	movwf	lcd_puts@s+1,c
  1696  001E5C  EC2E  F01F         	call	_lcd_puts	;wreg free
  1697                           
  1698                           ;pwm_asl.c: 472: lcd_gotoxy(1,4);
  1699  001E60  0E04               	movlw	4
  1700  001E62  6E21               	movwf	lcd_gotoxy@y,c
  1701  001E64  0E01               	movlw	1
  1702  001E66  ECCC  F01F         	call	_lcd_gotoxy
  1703                           
  1704                           ;pwm_asl.c: 473: sprintf(Buffer, "Th spd = %0.1f",led_speed);
  1705  001E6A  0E00               	movlw	low main@Buffer
  1706  001E6C  0100               	movlb	0	; () banked
  1707  001E6E  6FB2               	movwf	sprintf@sp& (0+255),b
  1708  001E70  0E01               	movlw	high main@Buffer
  1709  001E72  6FB3               	movwf	(sprintf@sp+1)& (0+255),b
  1710  001E74  0EEB               	movlw	low STR_6
  1711  001E76  6FB4               	movwf	sprintf@f& (0+255),b
  1712  001E78  0E10               	movlw	high STR_6
  1713  001E7A  6FB5               	movwf	(sprintf@f+1)& (0+255),b
  1714  001E7C  C150  F0B6         	movff	main@led_speed,?_sprintf+4
  1715  001E80  C151  F0B7         	movff	main@led_speed+1,?_sprintf+5
  1716  001E84  C152  F0B8         	movff	main@led_speed+2,?_sprintf+6
  1717  001E88  C153  F0B9         	movff	main@led_speed+3,?_sprintf+7
  1718  001E8C  EC7F  F008         	call	_sprintf	;wreg free
  1719                           
  1720                           ;pwm_asl.c: 475: lcd_puts(Buffer);
  1721  001E90  0E00               	movlw	low main@Buffer
  1722  001E92  6E25               	movwf	lcd_puts@s,c
  1723  001E94  0E01               	movlw	high main@Buffer
  1724  001E96  6E26               	movwf	lcd_puts@s+1,c
  1725  001E98  EC2E  F01F         	call	_lcd_puts	;wreg free
  1726                           
  1727                           ;pwm_asl.c: 477: if(TempC>thresholded_Temp&&!flag2)
  1728  001E9C  C143  F017         	movff	main@thresholded_Temp,___flge@ff1
  1729  001EA0  C144  F018         	movff	main@thresholded_Temp+1,___flge@ff1+1
  1730  001EA4  C145  F019         	movff	main@thresholded_Temp+2,___flge@ff1+2
  1731  001EA8  C146  F01A         	movff	main@thresholded_Temp+3,___flge@ff1+3
  1732  001EAC  C147  F01B         	movff	main@TempC,___flge@ff2
  1733  001EB0  C148  F01C         	movff	main@TempC+1,___flge@ff2+1
  1734  001EB4  C149  F01D         	movff	main@TempC+2,___flge@ff2+2
  1735  001EB8  C14A  F01E         	movff	main@TempC+3,___flge@ff2+3
  1736  001EBC  EC50  F01B         	call	___flge	;wreg free
  1737  001EC0  B0D8               	btfsc	status,0,c
  1738  001EC2  D010               	goto	l180
  1739  001EC4  0101               	movlb	1	; () banked
  1740  001EC6  513A               	movf	main@flag2& (0+255),w,b
  1741  001EC8  113B               	iorwf	(main@flag2+1)& (0+255),w,b
  1742  001ECA  A4D8               	btfss	status,2,c
  1743  001ECC  D00B               	goto	l180
  1744                           
  1745                           ; BSR set to: 1
  1746                           ;pwm_asl.c: 478: {
  1747                           ;pwm_asl.c: 480: send_string_no_lib("Warning High Temp \n \r");
  1748  001ECE  0E91               	movlw	low STR_7
  1749  001ED0  6E18               	movwf	send_string_no_lib@p,c
  1750  001ED2  0E10               	movlw	high STR_7
  1751  001ED4  6E19               	movwf	send_string_no_lib@p+1,c
  1752  001ED6  EC38  F020         	call	_send_string_no_lib	;wreg free
  1753                           
  1754                           ;pwm_asl.c: 481: flag2=1;
  1755  001EDA  0E00               	movlw	0
  1756  001EDC  0101               	movlb	1	; () banked
  1757  001EDE  6F3B               	movwf	(main@flag2+1)& (0+255),b
  1758  001EE0  0E01               	movlw	1
  1759  001EE2  D018               	goto	L1
  1760  001EE4                     l180:
  1761                           
  1762                           ;pwm_asl.c: 483: else if (TempC<=thresholded_Temp)
  1763                           
  1764                           ; BSR set to: 1
  1765  001EE4  C143  F017         	movff	main@thresholded_Temp,___flge@ff1
  1766  001EE8  C144  F018         	movff	main@thresholded_Temp+1,___flge@ff1+1
  1767  001EEC  C145  F019         	movff	main@thresholded_Temp+2,___flge@ff1+2
  1768  001EF0  C146  F01A         	movff	main@thresholded_Temp+3,___flge@ff1+3
  1769  001EF4  C147  F01B         	movff	main@TempC,___flge@ff2
  1770  001EF8  C148  F01C         	movff	main@TempC+1,___flge@ff2+1
  1771  001EFC  C149  F01D         	movff	main@TempC+2,___flge@ff2+2
  1772  001F00  C14A  F01E         	movff	main@TempC+3,___flge@ff2+3
  1773  001F04  EC50  F01B         	call	___flge	;wreg free
  1774  001F08  A0D8               	btfss	status,0,c
  1775  001F0A  D005               	goto	l182
  1776                           
  1777                           ;pwm_asl.c: 484: {
  1778                           ;pwm_asl.c: 485: flag2=0;
  1779  001F0C  0E00               	movlw	0
  1780  001F0E  0101               	movlb	1	; () banked
  1781  001F10  6F3B               	movwf	(main@flag2+1)& (0+255),b
  1782  001F12  0E00               	movlw	0
  1783  001F14                     L1:
  1784  001F14  6F3A               	movwf	main@flag2& (0+255),b
  1785  001F16                     l182:
  1786                           
  1787                           ;pwm_asl.c: 486: }
  1788                           ;pwm_asl.c: 489: if (led_speed>=0&&led_speed<=1){
  1789                           
  1790                           ; BSR set to: 1
  1791                           
  1792                           ; BSR set to: 1
  1793  001F16  0101               	movlb	1	; () banked
  1794  001F18  BF53               	btfsc	(main@led_speed+3)& (0+255),7,b
  1795  001F1A  D01B               	goto	l183
  1796                           
  1797                           ; BSR set to: 1
  1798  001F1C  0E00               	movlw	0
  1799  001F1E  6E17               	movwf	___flge@ff1,c
  1800  001F20  0E00               	movlw	0
  1801  001F22  6E18               	movwf	___flge@ff1+1,c
  1802  001F24  0E80               	movlw	128
  1803  001F26  6E19               	movwf	___flge@ff1+2,c
  1804  001F28  0E3F               	movlw	63
  1805  001F2A  6E1A               	movwf	___flge@ff1+3,c
  1806  001F2C  C150  F01B         	movff	main@led_speed,___flge@ff2
  1807  001F30  C151  F01C         	movff	main@led_speed+1,___flge@ff2+1
  1808  001F34  C152  F01D         	movff	main@led_speed+2,___flge@ff2+2
  1809  001F38  C153  F01E         	movff	main@led_speed+3,___flge@ff2+3
  1810  001F3C  EC50  F01B         	call	___flge	;wreg free
  1811  001F40  A0D8               	btfss	status,0,c
  1812  001F42  D007               	goto	l183
  1813                           
  1814                           ;pwm_asl.c: 490: start_t1 = 40536 ;
  1815  001F44  0E9E               	movlw	158
  1816  001F46  0101               	movlb	1	; () banked
  1817  001F48  6F5F               	movwf	(_start_t1+1)& (0+255),b
  1818  001F4A  0E58               	movlw	88
  1819  001F4C  D02E               	goto	L2
  1820  001F4E                     l5899:
  1821                           
  1822                           ; BSR set to: 1
  1823                           ;pwm_asl.c: 491: T1CONbits.T1CKPS1=1;
  1824  001F4E  8ACD               	bsf	4045,5,c	;volatile
  1825  001F50  D02E               	goto	l5911
  1826  001F52                     l183:
  1827                           
  1828                           ;pwm_asl.c: 496: else if (led_speed>=1.01&&led_speed<=2){
  1829                           
  1830                           ; BSR set to: 1
  1831  001F52  C150  F017         	movff	main@led_speed,___flge@ff1
  1832  001F56  C151  F018         	movff	main@led_speed+1,___flge@ff1+1
  1833  001F5A  C152  F019         	movff	main@led_speed+2,___flge@ff1+2
  1834  001F5E  C153  F01A         	movff	main@led_speed+3,___flge@ff1+3
  1835  001F62  0EAE               	movlw	174
  1836  001F64  6E1B               	movwf	___flge@ff2,c
  1837  001F66  0E47               	movlw	71
  1838  001F68  6E1C               	movwf	___flge@ff2+1,c
  1839  001F6A  0E81               	movlw	129
  1840  001F6C  6E1D               	movwf	___flge@ff2+2,c
  1841  001F6E  0E3F               	movlw	63
  1842  001F70  6E1E               	movwf	___flge@ff2+3,c
  1843  001F72  EC50  F01B         	call	___flge	;wreg free
  1844  001F76  A0D8               	btfss	status,0,c
  1845  001F78  D01C               	goto	l185
  1846  001F7A  0E00               	movlw	0
  1847  001F7C  6E17               	movwf	___flge@ff1,c
  1848  001F7E  0E00               	movlw	0
  1849  001F80  6E18               	movwf	___flge@ff1+1,c
  1850  001F82  0E00               	movlw	0
  1851  001F84  6E19               	movwf	___flge@ff1+2,c
  1852  001F86  0E40               	movlw	64
  1853  001F88  6E1A               	movwf	___flge@ff1+3,c
  1854  001F8A  C150  F01B         	movff	main@led_speed,___flge@ff2
  1855  001F8E  C151  F01C         	movff	main@led_speed+1,___flge@ff2+1
  1856  001F92  C152  F01D         	movff	main@led_speed+2,___flge@ff2+2
  1857  001F96  C153  F01E         	movff	main@led_speed+3,___flge@ff2+3
  1858  001F9A  EC50  F01B         	call	___flge	;wreg free
  1859  001F9E  A0D8               	btfss	status,0,c
  1860  001FA0  D008               	goto	l185
  1861                           
  1862                           ;pwm_asl.c: 497: start_t1 = 3036 ;
  1863  001FA2  0E0B               	movlw	11
  1864  001FA4  0101               	movlb	1	; () banked
  1865  001FA6  6F5F               	movwf	(_start_t1+1)& (0+255),b
  1866  001FA8  0EDC               	movlw	220
  1867  001FAA                     L2:
  1868  001FAA  6F5E               	movwf	_start_t1& (0+255),b
  1869  001FAC  D7D0               	goto	l5899
  1870  001FAE                     l5911:
  1871                           
  1872                           ; BSR set to: 1
  1873                           ;pwm_asl.c: 499: T1CONbits.T1CKPS0=1;
  1874  001FAE  88CD               	bsf	4045,4,c	;volatile
  1875                           
  1876                           ;pwm_asl.c: 501: }
  1877  001FB0  D09B               	goto	l191
  1878  001FB2                     l185:
  1879                           
  1880                           ;pwm_asl.c: 502: else if (led_speed>=2.01&&led_speed<=3){
  1881                           
  1882                           ; BSR set to: 1
  1883  001FB2  C150  F017         	movff	main@led_speed,___flge@ff1
  1884  001FB6  C151  F018         	movff	main@led_speed+1,___flge@ff1+1
  1885  001FBA  C152  F019         	movff	main@led_speed+2,___flge@ff1+2
  1886  001FBE  C153  F01A         	movff	main@led_speed+3,___flge@ff1+3
  1887  001FC2  0ED7               	movlw	215
  1888  001FC4  6E1B               	movwf	___flge@ff2,c
  1889  001FC6  0EA3               	movlw	163
  1890  001FC8  6E1C               	movwf	___flge@ff2+1,c
  1891  001FCA  0E00               	movlw	0
  1892  001FCC  6E1D               	movwf	___flge@ff2+2,c
  1893  001FCE  0E40               	movlw	64
  1894  001FD0  6E1E               	movwf	___flge@ff2+3,c
  1895  001FD2  EC50  F01B         	call	___flge	;wreg free
  1896  001FD6  A0D8               	btfss	status,0,c
  1897  001FD8  D020               	goto	l187
  1898  001FDA  0E00               	movlw	0
  1899  001FDC  6E17               	movwf	___flge@ff1,c
  1900  001FDE  0E00               	movlw	0
  1901  001FE0  6E18               	movwf	___flge@ff1+1,c
  1902  001FE2  0E40               	movlw	64
  1903  001FE4  6E19               	movwf	___flge@ff1+2,c
  1904  001FE6  0E40               	movlw	64
  1905  001FE8  6E1A               	movwf	___flge@ff1+3,c
  1906  001FEA  C150  F01B         	movff	main@led_speed,___flge@ff2
  1907  001FEE  C151  F01C         	movff	main@led_speed+1,___flge@ff2+1
  1908  001FF2  C152  F01D         	movff	main@led_speed+2,___flge@ff2+2
  1909  001FF6  C153  F01E         	movff	main@led_speed+3,___flge@ff2+3
  1910  001FFA  EC50  F01B         	call	___flge	;wreg free
  1911  001FFE  A0D8               	btfss	status,0,c
  1912  002000  D00C               	goto	l187
  1913                           
  1914                           ;pwm_asl.c: 503: start_t1 = 3036 ;
  1915  002002  0E0B               	movlw	11
  1916  002004  0101               	movlb	1	; () banked
  1917  002006  6F5F               	movwf	(_start_t1+1)& (0+255),b
  1918  002008  0EDC               	movlw	220
  1919  00200A  6F5E               	movwf	_start_t1& (0+255),b
  1920                           
  1921                           ; BSR set to: 1
  1922                           ;pwm_asl.c: 504: T1CONbits.T1CKPS1=1;
  1923  00200C  8ACD               	bsf	4045,5,c	;volatile
  1924                           
  1925                           ; BSR set to: 1
  1926                           ;pwm_asl.c: 505: T1CONbits.T1CKPS0=1;
  1927  00200E  88CD               	bsf	4045,4,c	;volatile
  1928                           
  1929                           ;pwm_asl.c: 507: timer_3_flag = 1 ;
  1930  002010  0E00               	movlw	0
  1931  002012  6F5D               	movwf	(_timer_3_flag+1)& (0+255),b
  1932  002014  0E01               	movlw	1
  1933  002016  6F5C               	movwf	_timer_3_flag& (0+255),b
  1934                           
  1935                           ;pwm_asl.c: 508: }
  1936  002018  D067               	goto	l191
  1937  00201A                     l187:
  1938                           
  1939                           ;pwm_asl.c: 510: else if (led_speed>=3.01&&led_speed<=4){
  1940                           
  1941                           ; BSR set to: 1
  1942  00201A  C150  F017         	movff	main@led_speed,___flge@ff1
  1943  00201E  C151  F018         	movff	main@led_speed+1,___flge@ff1+1
  1944  002022  C152  F019         	movff	main@led_speed+2,___flge@ff1+2
  1945  002026  C153  F01A         	movff	main@led_speed+3,___flge@ff1+3
  1946  00202A  0ED7               	movlw	215
  1947  00202C  6E1B               	movwf	___flge@ff2,c
  1948  00202E  0EA3               	movlw	163
  1949  002030  6E1C               	movwf	___flge@ff2+1,c
  1950  002032  0E40               	movlw	64
  1951  002034  6E1D               	movwf	___flge@ff2+2,c
  1952  002036  0E40               	movlw	64
  1953  002038  6E1E               	movwf	___flge@ff2+3,c
  1954  00203A  EC50  F01B         	call	___flge	;wreg free
  1955  00203E  A0D8               	btfss	status,0,c
  1956  002040  D020               	goto	l189
  1957  002042  0E00               	movlw	0
  1958  002044  6E17               	movwf	___flge@ff1,c
  1959  002046  0E00               	movlw	0
  1960  002048  6E18               	movwf	___flge@ff1+1,c
  1961  00204A  0E80               	movlw	128
  1962  00204C  6E19               	movwf	___flge@ff1+2,c
  1963  00204E  0E40               	movlw	64
  1964  002050  6E1A               	movwf	___flge@ff1+3,c
  1965  002052  C150  F01B         	movff	main@led_speed,___flge@ff2
  1966  002056  C151  F01C         	movff	main@led_speed+1,___flge@ff2+1
  1967  00205A  C152  F01D         	movff	main@led_speed+2,___flge@ff2+2
  1968  00205E  C153  F01E         	movff	main@led_speed+3,___flge@ff2+3
  1969  002062  EC50  F01B         	call	___flge	;wreg free
  1970  002066  A0D8               	btfss	status,0,c
  1971  002068  D00C               	goto	l189
  1972                           
  1973                           ;pwm_asl.c: 511: start_t1 = 3036 ;
  1974  00206A  0E0B               	movlw	11
  1975  00206C  0101               	movlb	1	; () banked
  1976  00206E  6F5F               	movwf	(_start_t1+1)& (0+255),b
  1977  002070  0EDC               	movlw	220
  1978  002072  6F5E               	movwf	_start_t1& (0+255),b
  1979                           
  1980                           ; BSR set to: 1
  1981                           ;pwm_asl.c: 512: T1CONbits.T1CKPS1=1;
  1982  002074  8ACD               	bsf	4045,5,c	;volatile
  1983                           
  1984                           ; BSR set to: 1
  1985                           ;pwm_asl.c: 513: T1CONbits.T1CKPS0=1;
  1986  002076  88CD               	bsf	4045,4,c	;volatile
  1987                           
  1988                           ;pwm_asl.c: 514: timer_6_flag = 1 ;
  1989  002078  0E00               	movlw	0
  1990  00207A  6F5B               	movwf	(_timer_6_flag+1)& (0+255),b
  1991  00207C  0E01               	movlw	1
  1992  00207E  6F5A               	movwf	_timer_6_flag& (0+255),b
  1993                           
  1994                           ;pwm_asl.c: 516: }
  1995  002080  D033               	goto	l191
  1996  002082                     l189:
  1997                           
  1998                           ;pwm_asl.c: 517: else if (led_speed>=4.01&&led_speed<=5){
  1999                           
  2000                           ; BSR set to: 1
  2001  002082  C150  F017         	movff	main@led_speed,___flge@ff1
  2002  002086  C151  F018         	movff	main@led_speed+1,___flge@ff1+1
  2003  00208A  C152  F019         	movff	main@led_speed+2,___flge@ff1+2
  2004  00208E  C153  F01A         	movff	main@led_speed+3,___flge@ff1+3
  2005  002092  0EEC               	movlw	236
  2006  002094  6E1B               	movwf	___flge@ff2,c
  2007  002096  0E51               	movlw	81
  2008  002098  6E1C               	movwf	___flge@ff2+1,c
  2009  00209A  0E80               	movlw	128
  2010  00209C  6E1D               	movwf	___flge@ff2+2,c
  2011  00209E  0E40               	movlw	64
  2012  0020A0  6E1E               	movwf	___flge@ff2+3,c
  2013  0020A2  EC50  F01B         	call	___flge	;wreg free
  2014  0020A6  A0D8               	btfss	status,0,c
  2015  0020A8  D01F               	goto	l191
  2016  0020AA  0E00               	movlw	0
  2017  0020AC  6E17               	movwf	___flge@ff1,c
  2018  0020AE  0E00               	movlw	0
  2019  0020B0  6E18               	movwf	___flge@ff1+1,c
  2020  0020B2  0EA0               	movlw	160
  2021  0020B4  6E19               	movwf	___flge@ff1+2,c
  2022  0020B6  0E40               	movlw	64
  2023  0020B8  6E1A               	movwf	___flge@ff1+3,c
  2024  0020BA  C150  F01B         	movff	main@led_speed,___flge@ff2
  2025  0020BE  C151  F01C         	movff	main@led_speed+1,___flge@ff2+1
  2026  0020C2  C152  F01D         	movff	main@led_speed+2,___flge@ff2+2
  2027  0020C6  C153  F01E         	movff	main@led_speed+3,___flge@ff2+3
  2028  0020CA  EC50  F01B         	call	___flge	;wreg free
  2029  0020CE  A0D8               	btfss	status,0,c
  2030  0020D0  D00B               	goto	l191
  2031                           
  2032                           ;pwm_asl.c: 518: start_t1 = 3036 ;
  2033  0020D2  0E0B               	movlw	11
  2034  0020D4  0101               	movlb	1	; () banked
  2035  0020D6  6F5F               	movwf	(_start_t1+1)& (0+255),b
  2036  0020D8  0EDC               	movlw	220
  2037  0020DA  6F5E               	movwf	_start_t1& (0+255),b
  2038                           
  2039                           ; BSR set to: 1
  2040                           ;pwm_asl.c: 519: T1CONbits.T1CKPS1=1;
  2041  0020DC  8ACD               	bsf	4045,5,c	;volatile
  2042                           
  2043                           ; BSR set to: 1
  2044                           ;pwm_asl.c: 520: T1CONbits.T1CKPS0=1;
  2045  0020DE  88CD               	bsf	4045,4,c	;volatile
  2046                           
  2047                           ;pwm_asl.c: 522: timer_10_flag = 1 ;
  2048  0020E0  0E00               	movlw	0
  2049  0020E2  6F59               	movwf	(_timer_10_flag+1)& (0+255),b
  2050  0020E4  0E01               	movlw	1
  2051  0020E6  6F58               	movwf	_timer_10_flag& (0+255),b
  2052  0020E8                     l191:
  2053                           
  2054                           ;pwm_asl.c: 523: }
  2055                           ;pwm_asl.c: 529: unsigned char i;
  2056                           ;pwm_asl.c: 530: unsigned char tmp;
  2057                           ;pwm_asl.c: 531: unsigned int tmpi;
  2058                           ;pwm_asl.c: 533: char str[6];
  2059                           ;pwm_asl.c: 564: TRISA=0xC3;
  2060                           
  2061                           ; BSR set to: 1
  2062                           
  2063                           ; BSR set to: 1
  2064                           
  2065                           ; BSR set to: 1
  2066                           
  2067                           ; BSR set to: 1
  2068  0020E8  0EC3               	movlw	195
  2069  0020EA  6E92               	movwf	3986,c	;volatile
  2070                           
  2071                           ;pwm_asl.c: 565: n2 =ii ;
  2072  0020EC  C128  F126         	movff	main@ii,main@n2
  2073  0020F0  C129  F127         	movff	main@ii+1,main@n2+1
  2074                           
  2075                           ;pwm_asl.c: 566: n1 = iii ;
  2076  0020F4  C13C  F124         	movff	main@iii,main@n1
  2077  0020F8  C13D  F125         	movff	main@iii+1,main@n1+1
  2078                           
  2079                           ;pwm_asl.c: 567: PORTA=0x04;
  2080  0020FC  0E04               	movlw	4
  2081  0020FE  6E80               	movwf	3968,c	;volatile
  2082                           
  2083                           ;pwm_asl.c: 568: int x=1;
  2084  002100  0E00               	movlw	0
  2085  002102  0101               	movlb	1	; () banked
  2086  002104  6F3F               	movwf	(main@x+1)& (0+255),b
  2087  002106  0E01               	movlw	1
  2088  002108  6F3E               	movwf	main@x& (0+255),b
  2089                           
  2090                           ; BSR set to: 1
  2091                           ;pwm_asl.c: 569: PORTD=display7s(n2,x);
  2092  00210A  C13E  F017         	movff	main@x,display7s@x
  2093  00210E  C13F  F018         	movff	main@x+1,display7s@x+1
  2094  002112  5126               	movf	main@n2& (0+255),w,b
  2095  002114  ECCD  F018         	call	_display7s
  2096  002118  6E83               	movwf	3971,c	;volatile
  2097                           
  2098                           ;pwm_asl.c: 570: atraso_ms(190);
  2099  00211A  0E00               	movlw	0
  2100  00211C  6E18               	movwf	atraso_ms@n+1,c
  2101  00211E  0EBE               	movlw	190
  2102  002120  6E17               	movwf	atraso_ms@n,c
  2103  002122  EC73  F020         	call	_atraso_ms	;wreg free
  2104                           
  2105                           ;pwm_asl.c: 571: PORTA=0x08;
  2106  002126  0E08               	movlw	8
  2107  002128  6E80               	movwf	3968,c	;volatile
  2108                           
  2109                           ;pwm_asl.c: 572: x=0;
  2110  00212A  0E00               	movlw	0
  2111  00212C  0101               	movlb	1	; () banked
  2112  00212E  6F3F               	movwf	(main@x+1)& (0+255),b
  2113  002130  0E00               	movlw	0
  2114  002132  6F3E               	movwf	main@x& (0+255),b
  2115                           
  2116                           ; BSR set to: 1
  2117                           ;pwm_asl.c: 573: PORTD=display7s(n1,x);
  2118  002134  C13E  F017         	movff	main@x,display7s@x
  2119  002138  C13F  F018         	movff	main@x+1,display7s@x+1
  2120  00213C  5124               	movf	main@n1& (0+255),w,b
  2121  00213E  ECCD  F018         	call	_display7s
  2122  002142  6E83               	movwf	3971,c	;volatile
  2123                           
  2124                           ;pwm_asl.c: 575: }
  2125  002144  D4E6               	goto	l174
  2126  002146                     l177:
  2127                           
  2128                           ;pwm_asl.c: 576: else if(off_flag)
  2129  002146  0101               	movlb	1	; () banked
  2130  002148  5154               	movf	_off_flag& (0+255),w,b
  2131  00214A  1155               	iorwf	(_off_flag+1)& (0+255),w,b
  2132  00214C  B4D8               	btfsc	status,2,c
  2133  00214E  D4E1               	goto	l174
  2134                           
  2135                           ; BSR set to: 1
  2136                           ;pwm_asl.c: 577: {
  2137                           ;pwm_asl.c: 578: on_flag = 0 ;
  2138  002150  0E00               	movlw	0
  2139  002152  6F57               	movwf	(_on_flag+1)& (0+255),b
  2140  002154  0E00               	movlw	0
  2141  002156  6F56               	movwf	_on_flag& (0+255),b
  2142                           
  2143                           ;pwm_asl.c: 579: PORTD=0;
  2144  002158  0E00               	movlw	0
  2145  00215A  6E83               	movwf	3971,c	;volatile
  2146                           
  2147                           ;pwm_asl.c: 580: PORTB=0;
  2148  00215C  0E00               	movlw	0
  2149  00215E  6E81               	movwf	3969,c	;volatile
  2150                           
  2151                           ; BSR set to: 1
  2152                           ;pwm_asl.c: 581: PORTBbits.RB2=0;
  2153  002160  9481               	bcf	3969,2,c	;volatile
  2154                           
  2155                           ; BSR set to: 1
  2156                           ;pwm_asl.c: 582: PORTBbits.RB3=0;
  2157  002162  9681               	bcf	3969,3,c	;volatile
  2158                           
  2159                           ; BSR set to: 1
  2160                           ;pwm_asl.c: 583: T1CONbits.TMR1ON = 0;
  2161  002164  90CD               	bcf	4045,0,c	;volatile
  2162                           
  2163                           ; BSR set to: 1
  2164                           ;pwm_asl.c: 589: lcd_puts("\f");
  2165  002166  0EFA               	movlw	low STR_8
  2166  002168  6E25               	movwf	lcd_puts@s,c
  2167  00216A  0E10               	movlw	high STR_8
  2168  00216C  6E26               	movwf	lcd_puts@s+1,c
  2169  00216E  EC2E  F01F         	call	_lcd_puts	;wreg free
  2170  002172  D4CF               	goto	l174
  2171  002174                     __end_of_main:
  2172                           	opt stack 0
  2173                           tblptru	equ	0xFF8
  2174                           tblptrh	equ	0xFF7
  2175                           tblptrl	equ	0xFF6
  2176                           tablat	equ	0xFF5
  2177                           prodh	equ	0xFF4
  2178                           prodl	equ	0xFF3
  2179                           postinc0	equ	0xFEE
  2180                           wreg	equ	0xFE8
  2181                           postdec1	equ	0xFE5
  2182                           fsr1l	equ	0xFE1
  2183                           postinc2	equ	0xFDE
  2184                           fsr2h	equ	0xFDA
  2185                           fsr2l	equ	0xFD9
  2186                           status	equ	0xFD8
  2187                           
  2188 ;; *************** function _sprintf *****************
  2189 ;; Defined at:
  2190 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;  sp              2   50[BANK0 ] PTR unsigned char 
  2193 ;;		 -> main@Buffer44(3), main@Buffer(32), 
  2194 ;;  f               2   52[BANK0 ] PTR const unsigned char 
  2195 ;;		 -> STR_6(15), STR_5(16), STR_4(6), STR_3(18), 
  2196 ;;		 -> STR_2(17), STR_1(17), 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  fval            4   82[BANK0 ] PTR const unsigned char 
  2199 ;;  tmpval          4   72[BANK0 ] struct .
  2200 ;;  val             4   68[BANK0 ] unsigned long 
  2201 ;;  cp              3    0        PTR const unsigned char 
  2202 ;;  prec            2   86[BANK0 ] int 
  2203 ;;  width           2   80[BANK0 ] int 
  2204 ;;  flag            2   78[BANK0 ] unsigned short 
  2205 ;;  exp             2   76[BANK0 ] int 
  2206 ;;  ap              2   66[BANK0 ] PTR void [1]
  2207 ;;		 -> ?_sprintf(2), 
  2208 ;;  len             2    0        unsigned int 
  2209 ;;  c               1   88[BANK0 ] char 
  2210 ;;  d               1    0        unsigned char 
  2211 ;; Return value:  Size  Location     Type
  2212 ;;                  2   50[BANK0 ] int 
  2213 ;; Registers used:
  2214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2215 ;; Tracked objects:
  2216 ;;		On entry : 0/0
  2217 ;;		On exit  : 0/0
  2218 ;;		Unchanged: 0/0
  2219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2220 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Locals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2223 ;;      Totals:         0      39       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;Total ram usage:       39 bytes
  2225 ;; Hardware stack levels used:    1
  2226 ;; Hardware stack levels required when called:    5
  2227 ;; This function calls:
  2228 ;;		___awdiv
  2229 ;;		___fladd
  2230 ;;		___flge
  2231 ;;		___flmul
  2232 ;;		___flneg
  2233 ;;		___flsub
  2234 ;;		___fltol
  2235 ;;		___lldiv
  2236 ;;		___llmod
  2237 ;;		___wmul
  2238 ;;		___xxtofl
  2239 ;;		__div_to_l_
  2240 ;;		__tdiv_to_l_
  2241 ;;		_fround
  2242 ;;		_isdigit
  2243 ;;		_scale
  2244 ;; This function is called by:
  2245 ;;		_main
  2246 ;; This function uses a non-reentrant model
  2247 ;;
  2248                           
  2249                           	psect	text1
  2250  0010FE                     __ptext1:
  2251                           	opt stack 0
  2252  0010FE                     _sprintf:
  2253                           	opt stack 25
  2254                           
  2255                           ;doprnt.c: 494: va_list ap;
  2256                           ;doprnt.c: 499: signed char c;
  2257                           ;doprnt.c: 501: int width;
  2258                           ;doprnt.c: 504: int prec;
  2259                           ;doprnt.c: 508: unsigned short flag;
  2260                           ;doprnt.c: 515: char d;
  2261                           ;doprnt.c: 516: double fval;
  2262                           ;doprnt.c: 517: int exp;
  2263                           ;doprnt.c: 523: union {
  2264                           ;doprnt.c: 524: unsigned long vd;
  2265                           ;doprnt.c: 525: double integ;
  2266                           ;doprnt.c: 526: } tmpval;
  2267                           ;doprnt.c: 528: unsigned long val;
  2268                           ;doprnt.c: 529: unsigned len;
  2269                           ;doprnt.c: 530: const char * cp;
  2270                           ;doprnt.c: 533: *ap = __va_start();
  2271                           
  2272                           ;incstack = 0
  2273  0010FE  0EB6               	movlw	low (?_sprintf+4)
  2274  001100  0100               	movlb	0	; () banked
  2275  001102  6FC2               	movwf	sprintf@ap& (0+255),b
  2276  001104  0E00               	movlw	high (?_sprintf+4)
  2277  001106  6FC3               	movwf	(sprintf@ap+1)& (0+255),b
  2278                           
  2279                           ;doprnt.c: 536: while(c = *f++) {
  2280  001108  EF3F  F00D         	goto	l538
  2281  00110C                     
  2282                           ; BSR set to: 0
  2283                           ;doprnt.c: 538: if(c != '%')
  2284                           
  2285                           ; BSR set to: 0
  2286  00110C  0E25               	movlw	37
  2287  00110E  19D8               	xorwf	sprintf@c& (0+255),w,b
  2288  001110  B4D8               	btfsc	status,2,c
  2289  001112  D008               	goto	l449
  2290                           
  2291                           ; BSR set to: 0
  2292                           ;doprnt.c: 540: {
  2293                           ;doprnt.c: 541: ((*sp++ = (c)));
  2294  001114  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  2295  001118  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  2296  00111C  C0D8  FFDF         	movff	sprintf@c,indf2
  2297  001120  EF3D  F00D         	goto	l5783
  2298  001124                     l449:
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;doprnt.c: 543: }
  2302                           ;doprnt.c: 546: width = 0;
  2303                           
  2304                           ; BSR set to: 0
  2305  001124  0E00               	movlw	0
  2306  001126  6FD1               	movwf	(sprintf@width+1)& (0+255),b
  2307  001128  0E00               	movlw	0
  2308  00112A  6FD0               	movwf	sprintf@width& (0+255),b
  2309                           
  2310                           ;doprnt.c: 548: flag = 0;
  2311  00112C  0E00               	movlw	0
  2312  00112E  6FCF               	movwf	(sprintf@flag+1)& (0+255),b
  2313  001130  0E00               	movlw	0
  2314  001132  6FCE               	movwf	sprintf@flag& (0+255),b
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;doprnt.c: 551: switch(*f) {
  2318                           
  2319                           ;doprnt.c: 550: for(;;) {
  2320  001134  D004               	goto	l451
  2321  001136                     
  2322                           ;doprnt.c: 580: flag |= 0x04;
  2323                           
  2324                           ; BSR set to: 0
  2325  001136  0100               	movlb	0	; () banked
  2326  001138  85CE               	bsf	sprintf@flag& (0+255),2,b
  2327                           
  2328                           ;doprnt.c: 581: f++;
  2329  00113A  4BB4               	infsnz	sprintf@f& (0+255),f,b
  2330  00113C  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  2331  00113E                     l451:
  2332                           
  2333                           ; BSR set to: 0
  2334  00113E  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2335  001142  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2336  001146                     	if	0	;tblptru may be non-zero
  2337  001146                     	endif
  2338  001146                     	if	0	;tblptru may be non-zero
  2339  001146                     	endif
  2340  001146  0008               	tblrd		*
  2341  001148  50F5               	movf	tablat,w,c
  2342                           
  2343                           ; Switch size 1, requested type "space"
  2344                           ; Number of cases is 1, Range of values is 48 to 48
  2345                           ; switch strategies available:
  2346                           ; Name         Instructions Cycles
  2347                           ; simple_byte            4     3 (average)
  2348                           ;	Chosen strategy is simple_byte
  2349  00114A  0A30               	xorlw	48	; case 48
  2350  00114C  B4D8               	btfsc	status,2,c
  2351  00114E  D7F3               	goto	l452
  2352                           
  2353                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  2354                           
  2355                           ;doprnt.c: 586: }
  2356                           
  2357                           ;doprnt.c: 585: break;
  2358  001150  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2359  001154  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2360  001158                     	if	0	;tblptru may be non-zero
  2361  001158                     	endif
  2362  001158                     	if	0	;tblptru may be non-zero
  2363  001158                     	endif
  2364  001158  0008               	tblrd		*
  2365  00115A  50F5               	movf	tablat,w,c
  2366  00115C  ECE0  F020         	call	_isdigit
  2367  001160  A0D8               	btfss	status,0,c
  2368  001162  D034               	goto	u6230
  2369                           
  2370                           ;doprnt.c: 598: width = 0;
  2371  001164  0E00               	movlw	0
  2372  001166  0100               	movlb	0	; () banked
  2373  001168  6FD1               	movwf	(sprintf@width+1)& (0+255),b
  2374  00116A  0E00               	movlw	0
  2375  00116C  6FD0               	movwf	sprintf@width& (0+255),b
  2376  00116E                     
  2377                           ;doprnt.c: 600: width *= 10;
  2378                           
  2379                           ; BSR set to: 0
  2380  00116E  C0D0  F017         	movff	sprintf@width,___wmul@multiplier
  2381  001172  C0D1  F018         	movff	sprintf@width+1,___wmul@multiplier+1
  2382  001176  0E00               	movlw	0
  2383  001178  6E1A               	movwf	___wmul@multiplicand+1,c
  2384  00117A  0E0A               	movlw	10
  2385  00117C  6E19               	movwf	___wmul@multiplicand,c
  2386  00117E  EC4D  F020         	call	___wmul	;wreg free
  2387  001182  C017  F0D0         	movff	?___wmul,sprintf@width
  2388  001186  C018  F0D1         	movff	?___wmul+1,sprintf@width+1
  2389                           
  2390                           ;doprnt.c: 601: width += *f++ - '0';
  2391  00118A  0ED0               	movlw	208
  2392  00118C  0100               	movlb	0	; () banked
  2393  00118E  6FBA               	movwf	??_sprintf& (0+255),b
  2394  001190  0EFF               	movlw	255
  2395  001192  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  2396  001194  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2397  001198  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2398  00119C                     	if	0	;tblptru may be non-zero
  2399  00119C                     	endif
  2400  00119C                     	if	0	;tblptru may be non-zero
  2401  00119C                     	endif
  2402  00119C  0008               	tblrd		*
  2403  00119E  50F5               	movf	tablat,w,c
  2404  0011A0  6FBC               	movwf	(??_sprintf+2)& (0+255),b
  2405  0011A2  6BBD               	clrf	(??_sprintf+3)& (0+255),b
  2406  0011A4  51BA               	movf	??_sprintf& (0+255),w,b
  2407  0011A6  27BC               	addwf	(??_sprintf+2)& (0+255),f,b
  2408  0011A8  51BB               	movf	(??_sprintf+1)& (0+255),w,b
  2409  0011AA  23BD               	addwfc	(??_sprintf+3)& (0+255),f,b
  2410  0011AC  51BC               	movf	(??_sprintf+2)& (0+255),w,b
  2411  0011AE  27D0               	addwf	sprintf@width& (0+255),f,b
  2412  0011B0  51BD               	movf	(??_sprintf+3)& (0+255),w,b
  2413  0011B2  23D1               	addwfc	(sprintf@width+1)& (0+255),f,b
  2414                           
  2415                           ; BSR set to: 0
  2416  0011B4  4BB4               	infsnz	sprintf@f& (0+255),f,b
  2417  0011B6  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  2418                           
  2419                           ; BSR set to: 0
  2420                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  2421  0011B8  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2422  0011BC  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2423  0011C0                     	if	0	;tblptru may be non-zero
  2424  0011C0                     	endif
  2425  0011C0                     	if	0	;tblptru may be non-zero
  2426  0011C0                     	endif
  2427  0011C0  0008               	tblrd		*
  2428  0011C2  50F5               	movf	tablat,w,c
  2429  0011C4  ECE0  F020         	call	_isdigit
  2430  0011C8  B0D8               	btfsc	status,0,c
  2431  0011CA  D7D1               	goto	l457
  2432  0011CC                     u6230:
  2433                           
  2434                           ;doprnt.c: 608: }
  2435                           ;doprnt.c: 611: if(*f == '.') {
  2436  0011CC  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2437  0011D0  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2438  0011D4                     	if	0	;tblptru may be non-zero
  2439  0011D4                     	endif
  2440  0011D4                     	if	0	;tblptru may be non-zero
  2441  0011D4                     	endif
  2442  0011D4  0008               	tblrd		*
  2443  0011D6  50F5               	movf	tablat,w,c
  2444  0011D8  0A2E               	xorlw	46
  2445  0011DA  A4D8               	btfss	status,2,c
  2446  0011DC  D030               	goto	l459
  2447                           
  2448                           ;doprnt.c: 612: flag |= 0x4000;
  2449  0011DE  0100               	movlb	0	; () banked
  2450  0011E0  8DCF               	bsf	(sprintf@flag+1)& (0+255),6,b
  2451                           
  2452                           ;doprnt.c: 613: f++;
  2453  0011E2  4BB4               	infsnz	sprintf@f& (0+255),f,b
  2454  0011E4  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;doprnt.c: 620: {
  2458                           ;doprnt.c: 621: prec = 0;
  2459  0011E6  0E00               	movlw	0
  2460  0011E8  6FD7               	movwf	(sprintf@prec+1)& (0+255),b
  2461  0011EA  0E00               	movlw	0
  2462  0011EC  6FD6               	movwf	sprintf@prec& (0+255),b
  2463                           
  2464                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  2465  0011EE  D01C               	goto	l460
  2466  0011F0                     
  2467                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  2468                           
  2469                           ; BSR set to: 0
  2470  0011F0  C0D6  F017         	movff	sprintf@prec,___wmul@multiplier
  2471  0011F4  C0D7  F018         	movff	sprintf@prec+1,___wmul@multiplier+1
  2472  0011F8  0E00               	movlw	0
  2473  0011FA  6E1A               	movwf	___wmul@multiplicand+1,c
  2474  0011FC  0E0A               	movlw	10
  2475  0011FE  6E19               	movwf	___wmul@multiplicand,c
  2476  001200  EC4D  F020         	call	___wmul	;wreg free
  2477  001204  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2478  001208  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2479  00120C                     	if	0	;tblptru may be non-zero
  2480  00120C                     	endif
  2481  00120C                     	if	0	;tblptru may be non-zero
  2482  00120C                     	endif
  2483  00120C  0008               	tblrd		*
  2484  00120E  50F5               	movf	tablat,w,c
  2485  001210  2617               	addwf	?___wmul,f,c
  2486  001212  0E00               	movlw	0
  2487  001214  2218               	addwfc	?___wmul+1,f,c
  2488  001216  0ED0               	movlw	208
  2489  001218  2417               	addwf	?___wmul,w,c
  2490  00121A  0100               	movlb	0	; () banked
  2491  00121C  6FD6               	movwf	sprintf@prec& (0+255),b
  2492  00121E  0EFF               	movlw	255
  2493  001220  2018               	addwfc	?___wmul+1,w,c
  2494  001222  6FD7               	movwf	(sprintf@prec+1)& (0+255),b
  2495                           
  2496                           ; BSR set to: 0
  2497  001224  4BB4               	infsnz	sprintf@f& (0+255),f,b
  2498  001226  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  2499  001228                     l460:
  2500                           
  2501                           ; BSR set to: 0
  2502                           
  2503                           ; BSR set to: 0
  2504  001228  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2505  00122C  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2506  001230                     	if	0	;tblptru may be non-zero
  2507  001230                     	endif
  2508  001230                     	if	0	;tblptru may be non-zero
  2509  001230                     	endif
  2510  001230  0008               	tblrd		*
  2511  001232  50F5               	movf	tablat,w,c
  2512  001234  ECE0  F020         	call	_isdigit
  2513  001238  A0D8               	btfss	status,0,c
  2514  00123A  D00A               	goto	l464
  2515  00123C  D7D9               	goto	l461
  2516  00123E                     l459:
  2517                           
  2518                           ;doprnt.c: 626: prec = 0;
  2519  00123E  0E00               	movlw	0
  2520  001240  0100               	movlb	0	; () banked
  2521  001242  6FD7               	movwf	(sprintf@prec+1)& (0+255),b
  2522  001244  0E00               	movlw	0
  2523  001246  6FD6               	movwf	sprintf@prec& (0+255),b
  2524                           
  2525                           ; BSR set to: 0
  2526                           ;doprnt.c: 628: flag |= 0x1000;
  2527  001248  89CF               	bsf	(sprintf@flag+1)& (0+255),4,b
  2528                           
  2529                           ; BSR set to: 0
  2530                           ;doprnt.c: 630: }
  2531                           ;doprnt.c: 635: switch(c = *f++) {
  2532  00124A  D002               	goto	l464
  2533  00124C                     
  2534                           ; BSR set to: 0
  2535                           ;doprnt.c: 663: flag |= 0x400;
  2536                           
  2537                           ; BSR set to: 0
  2538  00124C  85CF               	bsf	(sprintf@flag+1)& (0+255),2,b
  2539                           
  2540                           ;doprnt.c: 664: break;
  2541  00124E  D014               	goto	l468
  2542  001250                     l464:
  2543                           
  2544                           ; BSR set to: 0
  2545  001250  C0B4  FFF6         	movff	sprintf@f,tblptrl
  2546  001254  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  2547  001258  0100               	movlb	0	; () banked
  2548  00125A  4BB4               	infsnz	sprintf@f& (0+255),f,b
  2549  00125C  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  2550  00125E                     	if	0	;tblptru may be non-zero
  2551  00125E                     	endif
  2552  00125E                     	if	0	;tblptru may be non-zero
  2553  00125E                     	endif
  2554  00125E  0008               	tblrd		*
  2555  001260  CFF5 F0D8          	movff	tablat,sprintf@c
  2556  001264  51D8               	movf	sprintf@c& (0+255),w,b
  2557                           
  2558                           ; Switch size 1, requested type "space"
  2559                           ; Number of cases is 2, Range of values is 0 to 102
  2560                           ; switch strategies available:
  2561                           ; Name         Instructions Cycles
  2562                           ; simple_byte            7     4 (average)
  2563                           ;	Chosen strategy is simple_byte
  2564  001266  0A00               	xorlw	0	; case 0
  2565  001268  B4D8               	btfsc	status,2,c
  2566  00126A  EF4C  F00D         	goto	u6710
  2567  00126E  0A66               	xorlw	102	; case 102
  2568  001270  B4D8               	btfsc	status,2,c
  2569  001272  D7EC               	goto	l467
  2570  001274  EF3F  F00D         	goto	l538
  2571  001278                     l468:
  2572                           
  2573                           ; BSR set to: 0
  2574                           ;doprnt.c: 825: if(flag & (0x700)) {
  2575                           
  2576                           ; BSR set to: 0
  2577  001278  0E07               	movlw	7
  2578  00127A  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  2579  00127C  B4D8               	btfsc	status,2,c
  2580  00127E  D350               	goto	l470
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;doprnt.c: 827: if(flag & 0x1000)
  2584  001280  A9CF               	btfss	(sprintf@flag+1)& (0+255),4,b
  2585  001282  D004               	goto	l471
  2586                           
  2587                           ; BSR set to: 0
  2588                           ;doprnt.c: 829: prec = 6;
  2589  001284  0E00               	movlw	0
  2590  001286  6FD7               	movwf	(sprintf@prec+1)& (0+255),b
  2591  001288  0E06               	movlw	6
  2592  00128A  6FD6               	movwf	sprintf@prec& (0+255),b
  2593  00128C                     l471:
  2594                           
  2595                           ; BSR set to: 0
  2596                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  2597                           
  2598                           ; BSR set to: 0
  2599  00128C  C0C2  FFD9         	movff	sprintf@ap,fsr2l
  2600  001290  C0C3  FFDA         	movff	sprintf@ap+1,fsr2h
  2601  001294  CFDE F0D2          	movff	postinc2,sprintf@fval
  2602  001298  CFDE F0D3          	movff	postinc2,sprintf@fval+1
  2603  00129C  CFDE F0D4          	movff	postinc2,sprintf@fval+2
  2604  0012A0  CFDE F0D5          	movff	postinc2,sprintf@fval+3
  2605                           
  2606                           ; BSR set to: 0
  2607  0012A4  0E04               	movlw	4
  2608  0012A6  27C2               	addwf	sprintf@ap& (0+255),f,b
  2609  0012A8  0E00               	movlw	0
  2610  0012AA  23C3               	addwfc	(sprintf@ap+1)& (0+255),f,b
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;doprnt.c: 831: if(fval < 0.0) {
  2614  0012AC  AFD5               	btfss	(sprintf@fval+3)& (0+255),7,b
  2615  0012AE  D015               	goto	l472
  2616                           
  2617                           ; BSR set to: 0
  2618                           ;doprnt.c: 832: fval = -fval;
  2619  0012B0  C0D2  F017         	movff	sprintf@fval,___flneg@f1
  2620  0012B4  C0D3  F018         	movff	sprintf@fval+1,___flneg@f1+1
  2621  0012B8  C0D4  F019         	movff	sprintf@fval+2,___flneg@f1+2
  2622  0012BC  C0D5  F01A         	movff	sprintf@fval+3,___flneg@f1+3
  2623  0012C0  EC0A  F020         	call	___flneg	;wreg free
  2624  0012C4  C017  F0D2         	movff	?___flneg,sprintf@fval
  2625  0012C8  C018  F0D3         	movff	?___flneg+1,sprintf@fval+1
  2626  0012CC  C019  F0D4         	movff	?___flneg+2,sprintf@fval+2
  2627  0012D0  C01A  F0D5         	movff	?___flneg+3,sprintf@fval+3
  2628                           
  2629                           ;doprnt.c: 833: flag |= 0x03;
  2630  0012D4  0E03               	movlw	3
  2631  0012D6  0100               	movlb	0	; () banked
  2632  0012D8  13CE               	iorwf	sprintf@flag& (0+255),f,b
  2633  0012DA                     l472:
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;doprnt.c: 834: }
  2637                           ;doprnt.c: 835: exp = 0;
  2638                           
  2639                           ; BSR set to: 0
  2640  0012DA  0E00               	movlw	0
  2641  0012DC  6FCD               	movwf	(sprintf@exp+1)& (0+255),b
  2642  0012DE  0E00               	movlw	0
  2643  0012E0  6FCC               	movwf	sprintf@exp& (0+255),b
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;doprnt.c: 836: if( fval!=0) {
  2647  0012E2  51D2               	movf	sprintf@fval& (0+255),w,b
  2648  0012E4  11D3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2649  0012E6  11D4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2650  0012E8  11D5               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2651  0012EA  B4D8               	btfsc	status,2,c
  2652  0012EC  D082               	goto	l477
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
  2656  0012EE  35D4               	rlcf	(sprintf@fval+2)& (0+255),w,b
  2657  0012F0  35D5               	rlcf	(sprintf@fval+3)& (0+255),w,b
  2658  0012F2  0F82               	addlw	130
  2659  0012F4  6FCC               	movwf	sprintf@exp& (0+255),b
  2660  0012F6  6BCD               	clrf	(sprintf@exp+1)& (0+255),b
  2661  0012F8  0EFF               	movlw	255
  2662  0012FA  23CD               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2663                           
  2664                           ; BSR set to: 0
  2665                           ;doprnt.c: 838: exp--;
  2666  0012FC  07CC               	decf	sprintf@exp& (0+255),f,b
  2667  0012FE  A0D8               	btfss	status,0,c
  2668  001300  07CD               	decf	(sprintf@exp+1)& (0+255),f,b
  2669                           
  2670                           ; BSR set to: 0
  2671                           ;doprnt.c: 839: exp *= 3;
  2672  001302  C0CC  F017         	movff	sprintf@exp,___wmul@multiplier
  2673  001306  C0CD  F018         	movff	sprintf@exp+1,___wmul@multiplier+1
  2674  00130A  0E00               	movlw	0
  2675  00130C  6E1A               	movwf	___wmul@multiplicand+1,c
  2676  00130E  0E03               	movlw	3
  2677  001310  6E19               	movwf	___wmul@multiplicand,c
  2678  001312  EC4D  F020         	call	___wmul	;wreg free
  2679  001316  C017  F0CC         	movff	?___wmul,sprintf@exp
  2680  00131A  C018  F0CD         	movff	?___wmul+1,sprintf@exp+1
  2681                           
  2682                           ;doprnt.c: 840: exp /= 10;
  2683  00131E  C0CC  F01D         	movff	sprintf@exp,___awdiv@dividend
  2684  001322  C0CD  F01E         	movff	sprintf@exp+1,___awdiv@dividend+1
  2685  001326  0E00               	movlw	0
  2686  001328  6E20               	movwf	___awdiv@divisor+1,c
  2687  00132A  0E0A               	movlw	10
  2688  00132C  6E1F               	movwf	___awdiv@divisor,c
  2689  00132E  EC9F  F01D         	call	___awdiv	;wreg free
  2690  001332  C01D  F0CC         	movff	?___awdiv,sprintf@exp
  2691  001336  C01E  F0CD         	movff	?___awdiv+1,sprintf@exp+1
  2692                           
  2693                           ;doprnt.c: 841: if(exp < 0)
  2694  00133A  0100               	movlb	0	; () banked
  2695  00133C  AFCD               	btfss	(sprintf@exp+1)& (0+255),7,b
  2696  00133E  D003               	goto	l474
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;doprnt.c: 842: exp--;
  2700  001340  07CC               	decf	sprintf@exp& (0+255),f,b
  2701  001342  A0D8               	btfss	status,0,c
  2702  001344  07CD               	decf	(sprintf@exp+1)& (0+255),f,b
  2703  001346                     l474:
  2704                           
  2705                           ; BSR set to: 0
  2706                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  2707                           
  2708                           ; BSR set to: 0
  2709  001346  51CC               	movf	sprintf@exp& (0+255),w,b
  2710  001348  0800               	sublw	0
  2711  00134A  ECBA  F010         	call	_scale
  2712  00134E  C050  F0C8         	movff	?_scale,sprintf@tmpval
  2713  001352  C051  F0C9         	movff	?_scale+1,sprintf@tmpval+1
  2714  001356  C052  F0CA         	movff	?_scale+2,sprintf@tmpval+2
  2715  00135A  C053  F0CB         	movff	?_scale+3,sprintf@tmpval+3
  2716                           
  2717                           ;doprnt.c: 847: tmpval.integ *= fval;
  2718  00135E  C0C8  F044         	movff	sprintf@tmpval,___flmul@b
  2719  001362  C0C9  F045         	movff	sprintf@tmpval+1,___flmul@b+1
  2720  001366  C0CA  F046         	movff	sprintf@tmpval+2,___flmul@b+2
  2721  00136A  C0CB  F047         	movff	sprintf@tmpval+3,___flmul@b+3
  2722  00136E  C0D2  F048         	movff	sprintf@fval,___flmul@a
  2723  001372  C0D3  F049         	movff	sprintf@fval+1,___flmul@a+1
  2724  001376  C0D4  F04A         	movff	sprintf@fval+2,___flmul@a+2
  2725  00137A  C0D5  F04B         	movff	sprintf@fval+3,___flmul@a+3
  2726  00137E  ECE2  F012         	call	___flmul	;wreg free
  2727  001382  C044  F0C8         	movff	?___flmul,sprintf@tmpval
  2728  001386  C045  F0C9         	movff	?___flmul+1,sprintf@tmpval+1
  2729  00138A  C046  F0CA         	movff	?___flmul+2,sprintf@tmpval+2
  2730  00138E  C047  F0CB         	movff	?___flmul+3,sprintf@tmpval+3
  2731                           
  2732                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  2733  001392  C0C8  F017         	movff	sprintf@tmpval,___flge@ff1
  2734  001396  C0C9  F018         	movff	sprintf@tmpval+1,___flge@ff1+1
  2735  00139A  C0CA  F019         	movff	sprintf@tmpval+2,___flge@ff1+2
  2736  00139E  C0CB  F01A         	movff	sprintf@tmpval+3,___flge@ff1+3
  2737  0013A2  0E00               	movlw	0
  2738  0013A4  6E1B               	movwf	___flge@ff2,c
  2739  0013A6  0E00               	movlw	0
  2740  0013A8  6E1C               	movwf	___flge@ff2+1,c
  2741  0013AA  0E80               	movlw	128
  2742  0013AC  6E1D               	movwf	___flge@ff2+2,c
  2743  0013AE  0E3F               	movlw	63
  2744  0013B0  6E1E               	movwf	___flge@ff2+3,c
  2745  0013B2  EC50  F01B         	call	___flge	;wreg free
  2746  0013B6  B0D8               	btfsc	status,0,c
  2747  0013B8  D005               	goto	l475
  2748                           
  2749                           ;doprnt.c: 849: exp--;
  2750  0013BA  0100               	movlb	0	; () banked
  2751  0013BC  07CC               	decf	sprintf@exp& (0+255),f,b
  2752  0013BE  A0D8               	btfss	status,0,c
  2753  0013C0  07CD               	decf	(sprintf@exp+1)& (0+255),f,b
  2754  0013C2  D017               	goto	l477
  2755  0013C4                     l475:
  2756                           
  2757                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  2758                           
  2759                           ; BSR set to: 0
  2760  0013C4  C0C8  F017         	movff	sprintf@tmpval,___flge@ff1
  2761  0013C8  C0C9  F018         	movff	sprintf@tmpval+1,___flge@ff1+1
  2762  0013CC  C0CA  F019         	movff	sprintf@tmpval+2,___flge@ff1+2
  2763  0013D0  C0CB  F01A         	movff	sprintf@tmpval+3,___flge@ff1+3
  2764  0013D4  0E00               	movlw	0
  2765  0013D6  6E1B               	movwf	___flge@ff2,c
  2766  0013D8  0E00               	movlw	0
  2767  0013DA  6E1C               	movwf	___flge@ff2+1,c
  2768  0013DC  0E20               	movlw	32
  2769  0013DE  6E1D               	movwf	___flge@ff2+2,c
  2770  0013E0  0E41               	movlw	65
  2771  0013E2  6E1E               	movwf	___flge@ff2+3,c
  2772  0013E4  EC50  F01B         	call	___flge	;wreg free
  2773  0013E8  A0D8               	btfss	status,0,c
  2774  0013EA  D003               	goto	l477
  2775                           
  2776                           ;doprnt.c: 851: exp++;
  2777  0013EC  0100               	movlb	0	; () banked
  2778  0013EE  4BCC               	infsnz	sprintf@exp& (0+255),f,b
  2779  0013F0  2BCD               	incf	(sprintf@exp+1)& (0+255),f,b
  2780  0013F2                     l477:
  2781                           
  2782                           ;doprnt.c: 852: }
  2783                           ;doprnt.c: 1112: if(prec <= 12)
  2784                           
  2785                           ; BSR set to: 0
  2786                           
  2787                           ; BSR set to: 0
  2788                           
  2789                           ; BSR set to: 0
  2790  0013F2  0100               	movlb	0	; () banked
  2791  0013F4  BFD7               	btfsc	(sprintf@prec+1)& (0+255),7,b
  2792  0013F6  D006               	goto	u6330
  2793  0013F8  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  2794  0013FA  E121               	bnz	l5589
  2795  0013FC  0E0D               	movlw	13
  2796  0013FE  5DD6               	subwf	sprintf@prec& (0+255),w,b
  2797  001400  B0D8               	btfsc	status,0,c
  2798  001402  D01D               	goto	l478
  2799  001404                     u6330:
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;doprnt.c: 1113: fval += fround(prec);
  2803  001404  C0D2  F096         	movff	sprintf@fval,___fladd@b
  2804  001408  C0D3  F097         	movff	sprintf@fval+1,___fladd@b+1
  2805  00140C  C0D4  F098         	movff	sprintf@fval+2,___fladd@b+2
  2806  001410  C0D5  F099         	movff	sprintf@fval+3,___fladd@b+3
  2807  001414  51D6               	movf	sprintf@prec& (0+255),w,b
  2808  001416  EC84  F017         	call	_fround
  2809  00141A  C050  F09A         	movff	?_fround,___fladd@a
  2810  00141E  C051  F09B         	movff	?_fround+1,___fladd@a+1
  2811  001422  C052  F09C         	movff	?_fround+2,___fladd@a+2
  2812  001426  C053  F09D         	movff	?_fround+3,___fladd@a+3
  2813  00142A  EC8B  F014         	call	___fladd	;wreg free
  2814  00142E  C096  F0D2         	movff	?___fladd,sprintf@fval
  2815  001432  C097  F0D3         	movff	?___fladd+1,sprintf@fval+1
  2816  001436  C098  F0D4         	movff	?___fladd+2,sprintf@fval+2
  2817  00143A  C099  F0D5         	movff	?___fladd+3,sprintf@fval+3
  2818  00143E                     l478:
  2819  00143E                     l5589:
  2820                           
  2821                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  2822  00143E  0100               	movlb	0	; () banked
  2823  001440  BFCD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2824  001442  D006               	goto	u6340
  2825  001444  51CD               	movf	(sprintf@exp+1)& (0+255),w,b
  2826  001446  E122               	bnz	l5597
  2827  001448  0E0A               	movlw	10
  2828  00144A  5DCC               	subwf	sprintf@exp& (0+255),w,b
  2829  00144C  B0D8               	btfsc	status,0,c
  2830  00144E  D01E               	goto	u6370
  2831  001450                     u6340:
  2832                           
  2833                           ; BSR set to: 0
  2834  001450  51D2               	movf	sprintf@fval& (0+255),w,b
  2835  001452  11D3               	iorwf	(sprintf@fval+1)& (0+255),w,b
  2836  001454  11D4               	iorwf	(sprintf@fval+2)& (0+255),w,b
  2837  001456  11D5               	iorwf	(sprintf@fval+3)& (0+255),w,b
  2838  001458  B4D8               	btfsc	status,2,c
  2839  00145A  D063               	goto	l479
  2840                           
  2841                           ; BSR set to: 0
  2842  00145C  C0D2  F092         	movff	sprintf@fval,___fltol@f1
  2843  001460  C0D3  F093         	movff	sprintf@fval+1,___fltol@f1+1
  2844  001464  C0D4  F094         	movff	sprintf@fval+2,___fltol@f1+2
  2845  001468  C0D5  F095         	movff	sprintf@fval+3,___fltol@f1+3
  2846  00146C  EC6A  F01C         	call	___fltol	;wreg free
  2847  001470  0100               	movlb	0	; () banked
  2848  001472  5192               	movf	?___fltol& (0+255),w,b
  2849  001474  1193               	iorwf	(?___fltol+1)& (0+255),w,b
  2850  001476  1194               	iorwf	(?___fltol+2)& (0+255),w,b
  2851  001478  1195               	iorwf	(?___fltol+3)& (0+255),w,b
  2852  00147A  B4D8               	btfsc	status,2,c
  2853                           
  2854                           ; BSR set to: 0
  2855  00147C  BFCD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  2856  00147E  D051               	goto	l479
  2857  001480  51CD               	movf	(sprintf@exp+1)& (0+255),w,b
  2858  001482  E104               	bnz	l5597
  2859  001484  0E02               	movlw	2
  2860  001486  5DCC               	subwf	sprintf@exp& (0+255),w,b
  2861  001488  A0D8               	btfss	status,0,c
  2862  00148A  D04B               	goto	l479
  2863  00148C                     u6370:
  2864  00148C                     l5597:
  2865                           
  2866                           ; BSR set to: 0
  2867                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2868  00148C  C0C8  F017         	movff	sprintf@tmpval,___flge@ff1
  2869  001490  C0C9  F018         	movff	sprintf@tmpval+1,___flge@ff1+1
  2870  001494  C0CA  F019         	movff	sprintf@tmpval+2,___flge@ff1+2
  2871  001498  C0CB  F01A         	movff	sprintf@tmpval+3,___flge@ff1+3
  2872  00149C  0E5F               	movlw	95
  2873  00149E  6E1B               	movwf	___flge@ff2,c
  2874  0014A0  0E70               	movlw	112
  2875  0014A2  6E1C               	movwf	___flge@ff2+1,c
  2876  0014A4  0E89               	movlw	137
  2877  0014A6  6E1D               	movwf	___flge@ff2+2,c
  2878  0014A8  0E40               	movlw	64
  2879  0014AA  6E1E               	movwf	___flge@ff2+3,c
  2880  0014AC  EC50  F01B         	call	___flge	;wreg free
  2881  0014B0  B0D8               	btfsc	status,0,c
  2882  0014B2  D003               	goto	l482
  2883                           
  2884                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2885  0014B4  0100               	movlb	0	; () banked
  2886  0014B6  0EF7               	movlw	247
  2887  0014B8  D002               	goto	L3
  2888  0014BA                     l482:
  2889                           
  2890                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2891                           
  2892                           ; BSR set to: 0
  2893  0014BA  0100               	movlb	0	; () banked
  2894  0014BC  0EF8               	movlw	248
  2895  0014BE                     L3:
  2896  0014BE  27CC               	addwf	sprintf@exp& (0+255),f,b
  2897  0014C0  0EFF               	movlw	255
  2898  0014C2  23CD               	addwfc	(sprintf@exp+1)& (0+255),f,b
  2899                           
  2900                           ; BSR set to: 0
  2901                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2902                           
  2903                           ; BSR set to: 0
  2904  0014C4  51CC               	movf	sprintf@exp& (0+255),w,b
  2905  0014C6  ECBA  F010         	call	_scale
  2906  0014CA  C050  F0C8         	movff	?_scale,sprintf@tmpval
  2907  0014CE  C051  F0C9         	movff	?_scale+1,sprintf@tmpval+1
  2908  0014D2  C052  F0CA         	movff	?_scale+2,sprintf@tmpval+2
  2909  0014D6  C053  F0CB         	movff	?_scale+3,sprintf@tmpval+3
  2910  0014DA  C0D2  F017         	movff	sprintf@fval,__div_to_l_@f1
  2911  0014DE  C0D3  F018         	movff	sprintf@fval+1,__div_to_l_@f1+1
  2912  0014E2  C0D4  F019         	movff	sprintf@fval+2,__div_to_l_@f1+2
  2913  0014E6  C0D5  F01A         	movff	sprintf@fval+3,__div_to_l_@f1+3
  2914  0014EA  C0C8  F01B         	movff	sprintf@tmpval,__div_to_l_@f2
  2915  0014EE  C0C9  F01C         	movff	sprintf@tmpval+1,__div_to_l_@f2+1
  2916  0014F2  C0CA  F01D         	movff	sprintf@tmpval+2,__div_to_l_@f2+2
  2917  0014F6  C0CB  F01E         	movff	sprintf@tmpval+3,__div_to_l_@f2+3
  2918  0014FA  ECBC  F01A         	call	__div_to_l_	;wreg free
  2919  0014FE  C017  F0C4         	movff	?__div_to_l_,sprintf@val
  2920  001502  C018  F0C5         	movff	?__div_to_l_+1,sprintf@val+1
  2921  001506  C019  F0C6         	movff	?__div_to_l_+2,sprintf@val+2
  2922  00150A  C01A  F0C7         	movff	?__div_to_l_+3,sprintf@val+3
  2923                           
  2924                           ;doprnt.c: 1129: fval = 0.0;
  2925  00150E  0E00               	movlw	0
  2926  001510  0100               	movlb	0	; () banked
  2927  001512  6FD2               	movwf	sprintf@fval& (0+255),b
  2928  001514  0E00               	movlw	0
  2929  001516  6FD3               	movwf	(sprintf@fval+1)& (0+255),b
  2930  001518  0E00               	movlw	0
  2931  00151A  6FD4               	movwf	(sprintf@fval+2)& (0+255),b
  2932  00151C  0E00               	movlw	0
  2933  00151E  6FD5               	movwf	(sprintf@fval+3)& (0+255),b
  2934                           
  2935                           ;doprnt.c: 1130: } else {
  2936  001520  D03C               	goto	l488
  2937  001522                     l479:
  2938                           
  2939                           ; BSR set to: 0
  2940                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2941                           
  2942                           ; BSR set to: 0
  2943  001522  C0D2  F092         	movff	sprintf@fval,___fltol@f1
  2944  001526  C0D3  F093         	movff	sprintf@fval+1,___fltol@f1+1
  2945  00152A  C0D4  F094         	movff	sprintf@fval+2,___fltol@f1+2
  2946  00152E  C0D5  F095         	movff	sprintf@fval+3,___fltol@f1+3
  2947  001532  EC6A  F01C         	call	___fltol	;wreg free
  2948  001536  C092  F0C4         	movff	?___fltol,sprintf@val
  2949  00153A  C093  F0C5         	movff	?___fltol+1,sprintf@val+1
  2950  00153E  C094  F0C6         	movff	?___fltol+2,sprintf@val+2
  2951  001542  C095  F0C7         	movff	?___fltol+3,sprintf@val+3
  2952                           
  2953                           ;doprnt.c: 1132: fval -= (double)val;
  2954  001546  C0D2  F0AA         	movff	sprintf@fval,___flsub@b
  2955  00154A  C0D3  F0AB         	movff	sprintf@fval+1,___flsub@b+1
  2956  00154E  C0D4  F0AC         	movff	sprintf@fval+2,___flsub@b+2
  2957  001552  C0D5  F0AD         	movff	sprintf@fval+3,___flsub@b+3
  2958  001556  C0C4  F01D         	movff	sprintf@val,___xxtofl@val
  2959  00155A  C0C5  F01E         	movff	sprintf@val+1,___xxtofl@val+1
  2960  00155E  C0C6  F01F         	movff	sprintf@val+2,___xxtofl@val+2
  2961  001562  C0C7  F020         	movff	sprintf@val+3,___xxtofl@val+3
  2962  001566  0E00               	movlw	0
  2963  001568  EC7B  F019         	call	___xxtofl
  2964  00156C  C01D  F0AE         	movff	?___xxtofl,___flsub@a
  2965  001570  C01E  F0AF         	movff	?___xxtofl+1,___flsub@a+1
  2966  001574  C01F  F0B0         	movff	?___xxtofl+2,___flsub@a+2
  2967  001578  C020  F0B1         	movff	?___xxtofl+3,___flsub@a+3
  2968  00157C  EC84  F01F         	call	___flsub	;wreg free
  2969  001580  C0AA  F0D2         	movff	?___flsub,sprintf@fval
  2970  001584  C0AB  F0D3         	movff	?___flsub+1,sprintf@fval+1
  2971  001588  C0AC  F0D4         	movff	?___flsub+2,sprintf@fval+2
  2972  00158C  C0AD  F0D5         	movff	?___flsub+3,sprintf@fval+3
  2973                           
  2974                           ;doprnt.c: 1133: exp = 0;
  2975  001590  0E00               	movlw	0
  2976  001592  0100               	movlb	0	; () banked
  2977  001594  6FCD               	movwf	(sprintf@exp+1)& (0+255),b
  2978  001596  0E00               	movlw	0
  2979  001598  6FCC               	movwf	sprintf@exp& (0+255),b
  2980  00159A                     l488:
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;doprnt.c: 1134: }
  2984                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2985                           
  2986                           ; BSR set to: 0
  2987  00159A  0E01               	movlw	1
  2988  00159C  6FD8               	movwf	sprintf@c& (0+255),b
  2989  00159E                     l5617:
  2990                           
  2991                           ; BSR set to: 0
  2992  00159E  0E0A               	movlw	10
  2993  0015A0  19D8               	xorwf	sprintf@c& (0+255),w,b
  2994  0015A2  B4D8               	btfsc	status,2,c
  2995  0015A4  D018               	goto	u6410
  2996                           
  2997                           ; BSR set to: 0
  2998                           ;doprnt.c: 1137: if(val < dpowers[c])
  2999                           
  3000                           ; BSR set to: 0
  3001                           
  3002                           ; BSR set to: 0
  3003  0015A6  51D8               	movf	sprintf@c& (0+255),w,b
  3004  0015A8  0D04               	mullw	4
  3005  0015AA  0E69               	movlw	low _dpowers
  3006  0015AC  24F3               	addwf	prodl,w,c
  3007  0015AE  6EF6               	movwf	tblptrl,c
  3008  0015B0  0E10               	movlw	high _dpowers
  3009  0015B2  20F4               	addwfc	prodh,w,c
  3010  0015B4  6EF7               	movwf	tblptrh,c
  3011  0015B6                     	if	0	;There are less than 3 active tblptr bytes
  3012  0015B6                     	endif
  3013  0015B6  0009               	tblrd		*+
  3014  0015B8  50F5               	movf	tablat,w,c
  3015  0015BA  5DC4               	subwf	sprintf@val& (0+255),w,b
  3016  0015BC  0009               	tblrd		*+
  3017  0015BE  50F5               	movf	tablat,w,c
  3018  0015C0  59C5               	subwfb	(sprintf@val+1)& (0+255),w,b
  3019  0015C2  0009               	tblrd		*+
  3020  0015C4  50F5               	movf	tablat,w,c
  3021  0015C6  59C6               	subwfb	(sprintf@val+2)& (0+255),w,b
  3022  0015C8  0009               	tblrd		*+
  3023  0015CA  50F5               	movf	tablat,w,c
  3024  0015CC  59C7               	subwfb	(sprintf@val+3)& (0+255),w,b
  3025  0015CE  A0D8               	btfss	status,0,c
  3026  0015D0  D002               	goto	u6410
  3027                           
  3028                           ; BSR set to: 0
  3029                           
  3030                           ; BSR set to: 0
  3031                           
  3032                           ; BSR set to: 0
  3033                           ;doprnt.c: 1138: break;
  3034  0015D2  2BD8               	incf	sprintf@c& (0+255),f,b
  3035  0015D4  D7E4               	goto	l5617
  3036  0015D6                     u6410:
  3037                           
  3038                           ; BSR set to: 0
  3039                           ;doprnt.c: 1142: width -= prec + c + exp;
  3040                           
  3041                           ; BSR set to: 0
  3042  0015D6  C0D8  F0BA         	movff	sprintf@c,??_sprintf
  3043  0015DA  6BBB               	clrf	(??_sprintf+1)& (0+255),b
  3044  0015DC  BFBA               	btfsc	??_sprintf& (0+255),7,b
  3045  0015DE  07BB               	decf	(??_sprintf+1)& (0+255),f,b
  3046  0015E0  51D6               	movf	sprintf@prec& (0+255),w,b
  3047  0015E2  27BA               	addwf	??_sprintf& (0+255),f,b
  3048  0015E4  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3049  0015E6  23BB               	addwfc	(??_sprintf+1)& (0+255),f,b
  3050  0015E8  51CC               	movf	sprintf@exp& (0+255),w,b
  3051  0015EA  27BA               	addwf	??_sprintf& (0+255),f,b
  3052  0015EC  51CD               	movf	(sprintf@exp+1)& (0+255),w,b
  3053  0015EE  23BB               	addwfc	(??_sprintf+1)& (0+255),f,b
  3054  0015F0  51BA               	movf	??_sprintf& (0+255),w,b
  3055  0015F2  5FD0               	subwf	sprintf@width& (0+255),f,b
  3056  0015F4  51BB               	movf	(??_sprintf+1)& (0+255),w,b
  3057  0015F6  5BD1               	subwfb	(sprintf@width+1)& (0+255),f,b
  3058                           
  3059                           ;doprnt.c: 1143: if(
  3060                           ;doprnt.c: 1147: prec)
  3061  0015F8  51D6               	movf	sprintf@prec& (0+255),w,b
  3062  0015FA  11D7               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3063  0015FC  B4D8               	btfsc	status,2,c
  3064  0015FE  D003               	goto	l492
  3065                           
  3066                           ; BSR set to: 0
  3067                           ;doprnt.c: 1148: width--;
  3068  001600  07D0               	decf	sprintf@width& (0+255),f,b
  3069  001602  A0D8               	btfss	status,0,c
  3070  001604  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3071  001606                     l492:
  3072                           
  3073                           ; BSR set to: 0
  3074                           ;doprnt.c: 1149: if(flag & 0x03)
  3075                           
  3076                           ; BSR set to: 0
  3077  001606  0E03               	movlw	3
  3078  001608  15CE               	andwf	sprintf@flag& (0+255),w,b
  3079  00160A  6FBA               	movwf	??_sprintf& (0+255),b
  3080  00160C  0E00               	movlw	0
  3081  00160E  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3082  001610  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3083  001612  51BA               	movf	??_sprintf& (0+255),w,b
  3084  001614  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3085  001616  B4D8               	btfsc	status,2,c
  3086  001618  D003               	goto	l493
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;doprnt.c: 1150: width--;
  3090  00161A  07D0               	decf	sprintf@width& (0+255),f,b
  3091  00161C  A0D8               	btfss	status,0,c
  3092  00161E  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3093  001620                     l493:
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;doprnt.c: 1153: if(flag & 0x04) {
  3097                           
  3098                           ; BSR set to: 0
  3099  001620  A5CE               	btfss	sprintf@flag& (0+255),2,b
  3100  001622  D031               	goto	l500
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;doprnt.c: 1157: if(flag & 0x03)
  3104  001624  0E03               	movlw	3
  3105  001626  15CE               	andwf	sprintf@flag& (0+255),w,b
  3106  001628  6FBA               	movwf	??_sprintf& (0+255),b
  3107  00162A  0E00               	movlw	0
  3108  00162C  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3109  00162E  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3110  001630  51BA               	movf	??_sprintf& (0+255),w,b
  3111  001632  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3112  001634  B4D8               	btfsc	status,2,c
  3113  001636  D014               	goto	l496
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;doprnt.c: 1159: ((*sp++ = ('-')));
  3117  001638  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3118  00163C  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3119  001640  0E2D               	movlw	45
  3120  001642  6EDF               	movwf	indf2,c
  3121                           
  3122                           ; BSR set to: 0
  3123  001644  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3124  001646  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3125                           
  3126                           ; BSR set to: 0
  3127                           ;doprnt.c: 1168: while(width > 0) {
  3128  001648  D00B               	goto	l496
  3129  00164A                     l5645:
  3130                           
  3131                           ; BSR set to: 0
  3132                           ;doprnt.c: 1169: ((*sp++ = ('0')));
  3133  00164A  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3134  00164E  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3135  001652  0E30               	movlw	48
  3136  001654  6EDF               	movwf	indf2,c
  3137                           
  3138                           ; BSR set to: 0
  3139  001656  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3140  001658  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3141                           
  3142                           ; BSR set to: 0
  3143                           ;doprnt.c: 1170: width--;
  3144  00165A  07D0               	decf	sprintf@width& (0+255),f,b
  3145  00165C  A0D8               	btfss	status,0,c
  3146  00165E  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3147  001660                     l496:
  3148                           
  3149                           ; BSR set to: 0
  3150                           
  3151                           ; BSR set to: 0
  3152  001660  BFD1               	btfsc	(sprintf@width+1)& (0+255),7,b
  3153  001662  D072               	goto	l504
  3154  001664  51D1               	movf	(sprintf@width+1)& (0+255),w,b
  3155  001666  E1F1               	bnz	l5645
  3156  001668  05D0               	decf	sprintf@width& (0+255),w,b
  3157  00166A  A0D8               	btfss	status,0,c
  3158  00166C  D06D               	goto	l504
  3159  00166E  D7ED               	goto	l497
  3160  001670                     l5653:
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  3164  001670  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3165  001674  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3166  001678  0E20               	movlw	32
  3167  00167A  6EDF               	movwf	indf2,c
  3168                           
  3169                           ; BSR set to: 0
  3170  00167C  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3171  00167E  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3172                           
  3173                           ; BSR set to: 0
  3174                           ;doprnt.c: 1182: width--;
  3175  001680  07D0               	decf	sprintf@width& (0+255),f,b
  3176  001682  A0D8               	btfss	status,0,c
  3177  001684  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3178  001686                     l500:
  3179                           
  3180                           ; BSR set to: 0
  3181                           
  3182                           ; BSR set to: 0
  3183  001686  BFD1               	btfsc	(sprintf@width+1)& (0+255),7,b
  3184  001688  D005               	goto	u6470
  3185  00168A  51D1               	movf	(sprintf@width+1)& (0+255),w,b
  3186  00168C  E1F1               	bnz	l5653
  3187  00168E  05D0               	decf	sprintf@width& (0+255),w,b
  3188  001690  B0D8               	btfsc	status,0,c
  3189  001692  D7EE               	goto	l501
  3190  001694                     u6470:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;doprnt.c: 1183: }
  3194                           ;doprnt.c: 1188: if(flag & 0x03)
  3195                           
  3196                           ; BSR set to: 0
  3197  001694  0E03               	movlw	3
  3198  001696  15CE               	andwf	sprintf@flag& (0+255),w,b
  3199  001698  6FBA               	movwf	??_sprintf& (0+255),b
  3200  00169A  0E00               	movlw	0
  3201  00169C  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3202  00169E  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3203  0016A0  51BA               	movf	??_sprintf& (0+255),w,b
  3204  0016A2  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3205  0016A4  B4D8               	btfsc	status,2,c
  3206  0016A6  D050               	goto	l504
  3207                           
  3208                           ; BSR set to: 0
  3209                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  3210  0016A8  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3211  0016AC  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3212  0016B0  0E2D               	movlw	45
  3213  0016B2  D047               	goto	L4
  3214  0016B4                     
  3215                           ; BSR set to: 0
  3216                           ;doprnt.c: 1200: {
  3217                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  3218                           
  3219                           ; BSR set to: 0
  3220  0016B4  C0C4  F017         	movff	sprintf@val,___lldiv@dividend
  3221  0016B8  C0C5  F018         	movff	sprintf@val+1,___lldiv@dividend+1
  3222  0016BC  C0C6  F019         	movff	sprintf@val+2,___lldiv@dividend+2
  3223  0016C0  C0C7  F01A         	movff	sprintf@val+3,___lldiv@dividend+3
  3224  0016C4  51D8               	movf	sprintf@c& (0+255),w,b
  3225  0016C6  0D04               	mullw	4
  3226  0016C8  0E69               	movlw	low _dpowers
  3227  0016CA  24F3               	addwf	prodl,w,c
  3228  0016CC  6EF6               	movwf	tblptrl,c
  3229  0016CE  0E10               	movlw	high _dpowers
  3230  0016D0  20F4               	addwfc	prodh,w,c
  3231  0016D2  6EF7               	movwf	tblptrh,c
  3232  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  3233  0016D4                     	endif
  3234  0016D4  0009               	tblrd		*+
  3235  0016D6  CFF5 F01B          	movff	tablat,___lldiv@divisor
  3236  0016DA  0009               	tblrd		*+
  3237  0016DC  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  3238  0016E0  0009               	tblrd		*+
  3239  0016E2  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  3240  0016E6  000A               	tblrd		*-
  3241  0016E8  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  3242  0016EC  ECE1  F01D         	call	___lldiv	;wreg free
  3243  0016F0  C017  F0C8         	movff	?___lldiv,sprintf@tmpval
  3244  0016F4  C018  F0C9         	movff	?___lldiv+1,sprintf@tmpval+1
  3245  0016F8  C019  F0CA         	movff	?___lldiv+2,sprintf@tmpval+2
  3246  0016FC  C01A  F0CB         	movff	?___lldiv+3,sprintf@tmpval+3
  3247                           
  3248                           ;doprnt.c: 1202: tmpval.vd %= 10;
  3249  001700  C0C8  F017         	movff	sprintf@tmpval,___llmod@dividend
  3250  001704  C0C9  F018         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3251  001708  C0CA  F019         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3252  00170C  C0CB  F01A         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3253  001710  0E0A               	movlw	10
  3254  001712  6E1B               	movwf	___llmod@divisor,c
  3255  001714  0E00               	movlw	0
  3256  001716  6E1C               	movwf	___llmod@divisor+1,c
  3257  001718  0E00               	movlw	0
  3258  00171A  6E1D               	movwf	___llmod@divisor+2,c
  3259  00171C  0E00               	movlw	0
  3260  00171E  6E1E               	movwf	___llmod@divisor+3,c
  3261  001720  EC9B  F01E         	call	___llmod	;wreg free
  3262  001724  C017  F0C8         	movff	?___llmod,sprintf@tmpval
  3263  001728  C018  F0C9         	movff	?___llmod+1,sprintf@tmpval+1
  3264  00172C  C019  F0CA         	movff	?___llmod+2,sprintf@tmpval+2
  3265  001730  C01A  F0CB         	movff	?___llmod+3,sprintf@tmpval+3
  3266                           
  3267                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  3268  001734  0100               	movlb	0	; () banked
  3269  001736  51C8               	movf	sprintf@tmpval& (0+255),w,b
  3270  001738  0F30               	addlw	48
  3271  00173A  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3272  00173E  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3273  001742                     L4:
  3274  001742  6EDF               	movwf	indf2,c
  3275                           
  3276                           ; BSR set to: 0
  3277  001744  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3278  001746  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3279  001748                     l504:
  3280                           
  3281                           ; BSR set to: 0
  3282                           
  3283                           ; BSR set to: 0
  3284  001748  07D8               	decf	sprintf@c& (0+255),f,b
  3285  00174A  29D8               	incf	sprintf@c& (0+255),w,b
  3286  00174C  B4D8               	btfsc	status,2,c
  3287  00174E  D00C               	goto	l507
  3288  001750  D7B1               	goto	l505
  3289  001752                     l5677:
  3290                           
  3291                           ; BSR set to: 0
  3292                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  3293  001752  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3294  001756  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3295  00175A  0E30               	movlw	48
  3296  00175C  6EDF               	movwf	indf2,c
  3297                           
  3298                           ; BSR set to: 0
  3299  00175E  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3300  001760  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3301                           
  3302                           ; BSR set to: 0
  3303                           ;doprnt.c: 1209: exp--;
  3304  001762  07CC               	decf	sprintf@exp& (0+255),f,b
  3305  001764  A0D8               	btfss	status,0,c
  3306  001766  07CD               	decf	(sprintf@exp+1)& (0+255),f,b
  3307  001768                     l507:
  3308                           
  3309                           ; BSR set to: 0
  3310                           
  3311                           ; BSR set to: 0
  3312  001768  BFCD               	btfsc	(sprintf@exp+1)& (0+255),7,b
  3313  00176A  D005               	goto	u6500
  3314  00176C  51CD               	movf	(sprintf@exp+1)& (0+255),w,b
  3315  00176E  E1F1               	bnz	l5677
  3316  001770  05CC               	decf	sprintf@exp& (0+255),w,b
  3317  001772  B0D8               	btfsc	status,0,c
  3318  001774  D7EE               	goto	l508
  3319  001776                     u6500:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;doprnt.c: 1210: }
  3323                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  3324                           
  3325                           ; BSR set to: 0
  3326  001776  BFD7               	btfsc	(sprintf@prec+1)& (0+255),7,b
  3327  001778  D009               	goto	l510
  3328  00177A  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3329  00177C  E104               	bnz	u6510
  3330  00177E  0E09               	movlw	9
  3331  001780  5DD6               	subwf	sprintf@prec& (0+255),w,b
  3332  001782  A0D8               	btfss	status,0,c
  3333  001784  D003               	goto	l510
  3334  001786                     u6510:
  3335                           
  3336                           ; BSR set to: 0
  3337                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  3338  001786  0E08               	movlw	8
  3339  001788  6FD8               	movwf	sprintf@c& (0+255),b
  3340  00178A  D002               	goto	l511
  3341  00178C                     l510:
  3342                           
  3343                           ; BSR set to: 0
  3344                           ;doprnt.c: 1213: else
  3345                           ;doprnt.c: 1214: c = prec;
  3346  00178C  C0D6  F0D8         	movff	sprintf@prec,sprintf@c
  3347  001790                     l511:
  3348                           
  3349                           ; BSR set to: 0
  3350                           ;doprnt.c: 1215: prec -= c;
  3351                           
  3352                           ; BSR set to: 0
  3353  001790  51D8               	movf	sprintf@c& (0+255),w,b
  3354  001792  5FD6               	subwf	sprintf@prec& (0+255),f,b
  3355  001794  0E00               	movlw	0
  3356  001796  BFD8               	btfsc	sprintf@c& (0+255),7,b
  3357  001798  0EFF               	movlw	255
  3358  00179A  5BD7               	subwfb	(sprintf@prec+1)& (0+255),f,b
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;doprnt.c: 1219: if(c)
  3362  00179C  51D8               	movf	sprintf@c& (0+255),w,b
  3363  00179E  B4D8               	btfsc	status,2,c
  3364  0017A0  D008               	goto	l512
  3365                           
  3366                           ; BSR set to: 0
  3367                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  3368  0017A2  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3369  0017A6  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3370  0017AA  0E2E               	movlw	46
  3371  0017AC  6EDF               	movwf	indf2,c
  3372                           
  3373                           ; BSR set to: 0
  3374  0017AE  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3375  0017B0  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3376  0017B2                     l512:
  3377                           
  3378                           ; BSR set to: 0
  3379                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3380                           
  3381                           ; BSR set to: 0
  3382  0017B2  51D8               	movf	sprintf@c& (0+255),w,b
  3383  0017B4  ECBA  F010         	call	_scale
  3384  0017B8  C050  F0BE         	movff	?_scale,_sprintf$1932
  3385  0017BC  C051  F0BF         	movff	?_scale+1,_sprintf$1932+1
  3386  0017C0  C052  F0C0         	movff	?_scale+2,_sprintf$1932+2
  3387  0017C4  C053  F0C1         	movff	?_scale+3,_sprintf$1932+3
  3388                           
  3389                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  3390  0017C8  C0D2  F048         	movff	sprintf@fval,___flmul@a
  3391  0017CC  C0D3  F049         	movff	sprintf@fval+1,___flmul@a+1
  3392  0017D0  C0D4  F04A         	movff	sprintf@fval+2,___flmul@a+2
  3393  0017D4  C0D5  F04B         	movff	sprintf@fval+3,___flmul@a+3
  3394  0017D8  C0BE  F044         	movff	_sprintf$1932,___flmul@b
  3395  0017DC  C0BF  F045         	movff	_sprintf$1932+1,___flmul@b+1
  3396  0017E0  C0C0  F046         	movff	_sprintf$1932+2,___flmul@b+2
  3397  0017E4  C0C1  F047         	movff	_sprintf$1932+3,___flmul@b+3
  3398  0017E8  ECE2  F012         	call	___flmul	;wreg free
  3399  0017EC  C044  F092         	movff	?___flmul,___fltol@f1
  3400  0017F0  C045  F093         	movff	?___flmul+1,___fltol@f1+1
  3401  0017F4  C046  F094         	movff	?___flmul+2,___fltol@f1+2
  3402  0017F8  C047  F095         	movff	?___flmul+3,___fltol@f1+3
  3403  0017FC  EC6A  F01C         	call	___fltol	;wreg free
  3404  001800  C092  F0C4         	movff	?___fltol,sprintf@val
  3405  001804  C093  F0C5         	movff	?___fltol+1,sprintf@val+1
  3406  001808  C094  F0C6         	movff	?___fltol+2,sprintf@val+2
  3407  00180C  C095  F0C7         	movff	?___fltol+3,sprintf@val+3
  3408                           
  3409                           ;doprnt.c: 1228: while(c--) {
  3410  001810  D071               	goto	l513
  3411  001812                     
  3412                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  3413  001812  C0C4  F017         	movff	sprintf@val,___lldiv@dividend
  3414  001816  C0C5  F018         	movff	sprintf@val+1,___lldiv@dividend+1
  3415  00181A  C0C6  F019         	movff	sprintf@val+2,___lldiv@dividend+2
  3416  00181E  C0C7  F01A         	movff	sprintf@val+3,___lldiv@dividend+3
  3417  001822  0100               	movlb	0	; () banked
  3418  001824  51D8               	movf	sprintf@c& (0+255),w,b
  3419  001826  0D04               	mullw	4
  3420  001828  0E69               	movlw	low _dpowers
  3421  00182A  24F3               	addwf	prodl,w,c
  3422  00182C  6EF6               	movwf	tblptrl,c
  3423  00182E  0E10               	movlw	high _dpowers
  3424  001830  20F4               	addwfc	prodh,w,c
  3425  001832  6EF7               	movwf	tblptrh,c
  3426  001834                     	if	0	;There are less than 3 active tblptr bytes
  3427  001834                     	endif
  3428  001834  0009               	tblrd		*+
  3429  001836  CFF5 F01B          	movff	tablat,___lldiv@divisor
  3430  00183A  0009               	tblrd		*+
  3431  00183C  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  3432  001840  0009               	tblrd		*+
  3433  001842  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  3434  001846  000A               	tblrd		*-
  3435  001848  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  3436  00184C  ECE1  F01D         	call	___lldiv	;wreg free
  3437  001850  C017  F0C8         	movff	?___lldiv,sprintf@tmpval
  3438  001854  C018  F0C9         	movff	?___lldiv+1,sprintf@tmpval+1
  3439  001858  C019  F0CA         	movff	?___lldiv+2,sprintf@tmpval+2
  3440  00185C  C01A  F0CB         	movff	?___lldiv+3,sprintf@tmpval+3
  3441                           
  3442                           ;doprnt.c: 1230: tmpval.vd %= 10;
  3443  001860  C0C8  F017         	movff	sprintf@tmpval,___llmod@dividend
  3444  001864  C0C9  F018         	movff	sprintf@tmpval+1,___llmod@dividend+1
  3445  001868  C0CA  F019         	movff	sprintf@tmpval+2,___llmod@dividend+2
  3446  00186C  C0CB  F01A         	movff	sprintf@tmpval+3,___llmod@dividend+3
  3447  001870  0E0A               	movlw	10
  3448  001872  6E1B               	movwf	___llmod@divisor,c
  3449  001874  0E00               	movlw	0
  3450  001876  6E1C               	movwf	___llmod@divisor+1,c
  3451  001878  0E00               	movlw	0
  3452  00187A  6E1D               	movwf	___llmod@divisor+2,c
  3453  00187C  0E00               	movlw	0
  3454  00187E  6E1E               	movwf	___llmod@divisor+3,c
  3455  001880  EC9B  F01E         	call	___llmod	;wreg free
  3456  001884  C017  F0C8         	movff	?___llmod,sprintf@tmpval
  3457  001888  C018  F0C9         	movff	?___llmod+1,sprintf@tmpval+1
  3458  00188C  C019  F0CA         	movff	?___llmod+2,sprintf@tmpval+2
  3459  001890  C01A  F0CB         	movff	?___llmod+3,sprintf@tmpval+3
  3460                           
  3461                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  3462  001894  0100               	movlb	0	; () banked
  3463  001896  51C8               	movf	sprintf@tmpval& (0+255),w,b
  3464  001898  0F30               	addlw	48
  3465  00189A  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3466  00189E  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3467  0018A2  6EDF               	movwf	indf2,c
  3468                           
  3469                           ; BSR set to: 0
  3470  0018A4  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3471  0018A6  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;doprnt.c: 1232: val %= dpowers[c];
  3475  0018A8  C0C4  F017         	movff	sprintf@val,___llmod@dividend
  3476  0018AC  C0C5  F018         	movff	sprintf@val+1,___llmod@dividend+1
  3477  0018B0  C0C6  F019         	movff	sprintf@val+2,___llmod@dividend+2
  3478  0018B4  C0C7  F01A         	movff	sprintf@val+3,___llmod@dividend+3
  3479  0018B8  51D8               	movf	sprintf@c& (0+255),w,b
  3480  0018BA  0D04               	mullw	4
  3481  0018BC  0E69               	movlw	low _dpowers
  3482  0018BE  24F3               	addwf	prodl,w,c
  3483  0018C0  6EF6               	movwf	tblptrl,c
  3484  0018C2  0E10               	movlw	high _dpowers
  3485  0018C4  20F4               	addwfc	prodh,w,c
  3486  0018C6  6EF7               	movwf	tblptrh,c
  3487  0018C8                     	if	0	;There are less than 3 active tblptr bytes
  3488  0018C8                     	endif
  3489  0018C8  0009               	tblrd		*+
  3490  0018CA  CFF5 F01B          	movff	tablat,___llmod@divisor
  3491  0018CE  0009               	tblrd		*+
  3492  0018D0  CFF5 F01C          	movff	tablat,___llmod@divisor+1
  3493  0018D4  0009               	tblrd		*+
  3494  0018D6  CFF5 F01D          	movff	tablat,___llmod@divisor+2
  3495  0018DA  000A               	tblrd		*-
  3496  0018DC  CFF5 F01E          	movff	tablat,___llmod@divisor+3
  3497  0018E0  EC9B  F01E         	call	___llmod	;wreg free
  3498  0018E4  C017  F0C4         	movff	?___llmod,sprintf@val
  3499  0018E8  C018  F0C5         	movff	?___llmod+1,sprintf@val+1
  3500  0018EC  C019  F0C6         	movff	?___llmod+2,sprintf@val+2
  3501  0018F0  C01A  F0C7         	movff	?___llmod+3,sprintf@val+3
  3502  0018F4                     l513:
  3503  0018F4  0100               	movlb	0	; () banked
  3504  0018F6  07D8               	decf	sprintf@c& (0+255),f,b
  3505  0018F8  29D8               	incf	sprintf@c& (0+255),w,b
  3506  0018FA  B4D8               	btfsc	status,2,c
  3507  0018FC  D00C               	goto	l516
  3508  0018FE  D789               	goto	l514
  3509  001900                     
  3510                           ; BSR set to: 0
  3511                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  3512                           
  3513                           ; BSR set to: 0
  3514  001900  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3515  001904  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3516  001908  0E30               	movlw	48
  3517  00190A  6EDF               	movwf	indf2,c
  3518                           
  3519                           ; BSR set to: 0
  3520  00190C  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3521  00190E  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;doprnt.c: 1237: prec--;
  3525  001910  07D6               	decf	sprintf@prec& (0+255),f,b
  3526  001912  A0D8               	btfss	status,0,c
  3527  001914  07D7               	decf	(sprintf@prec+1)& (0+255),f,b
  3528  001916                     l516:
  3529                           
  3530                           ; BSR set to: 0
  3531                           
  3532                           ; BSR set to: 0
  3533  001916  51D6               	movf	sprintf@prec& (0+255),w,b
  3534  001918  11D7               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3535  00191A  B4D8               	btfsc	status,2,c
  3536  00191C  D0B0               	goto	l538
  3537  00191E  D7F0               	goto	l517
  3538  001920                     l470:
  3539                           
  3540                           ; BSR set to: 0
  3541                           ;doprnt.c: 1246: }
  3542                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  3543                           
  3544                           ; BSR set to: 0
  3545  001920  51D6               	movf	sprintf@prec& (0+255),w,b
  3546  001922  11D7               	iorwf	(sprintf@prec+1)& (0+255),w,b
  3547  001924  A4D8               	btfss	status,2,c
  3548  001926  D008               	goto	l519
  3549                           
  3550                           ; BSR set to: 0
  3551  001928  51C4               	movf	sprintf@val& (0+255),w,b
  3552  00192A  11C5               	iorwf	(sprintf@val+1)& (0+255),w,b
  3553  00192C  11C6               	iorwf	(sprintf@val+2)& (0+255),w,b
  3554  00192E  11C7               	iorwf	(sprintf@val+3)& (0+255),w,b
  3555  001930  A4D8               	btfss	status,2,c
  3556  001932  D002               	goto	l519
  3557                           
  3558                           ; BSR set to: 0
  3559                           ;doprnt.c: 1291: prec++;
  3560  001934  4BD6               	infsnz	sprintf@prec& (0+255),f,b
  3561  001936  2BD7               	incf	(sprintf@prec+1)& (0+255),f,b
  3562  001938                     l519:
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;doprnt.c: 1339: if(c < prec)
  3566                           
  3567                           ; BSR set to: 0
  3568  001938  0E80               	movlw	128
  3569  00193A  BFD8               	btfsc	sprintf@c& (0+255),7,b
  3570  00193C  0E7F               	movlw	127
  3571  00193E  6FBA               	movwf	??_sprintf& (0+255),b
  3572  001940  51D6               	movf	sprintf@prec& (0+255),w,b
  3573  001942  5DD8               	subwf	sprintf@c& (0+255),w,b
  3574  001944  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3575  001946  0A80               	xorlw	128
  3576  001948  59BA               	subwfb	??_sprintf& (0+255),w,b
  3577  00194A  B0D8               	btfsc	status,0,c
  3578  00194C  D003               	goto	l520
  3579                           
  3580                           ; BSR set to: 0
  3581                           ;doprnt.c: 1340: c = prec;
  3582  00194E  C0D6  F0D8         	movff	sprintf@prec,sprintf@c
  3583  001952  D010               	goto	l522
  3584  001954                     l520:
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;doprnt.c: 1341: else if(prec < c)
  3588                           
  3589                           ; BSR set to: 0
  3590  001954  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3591  001956  0A80               	xorlw	128
  3592  001958  6FBA               	movwf	??_sprintf& (0+255),b
  3593  00195A  51D8               	movf	sprintf@c& (0+255),w,b
  3594  00195C  5DD6               	subwf	sprintf@prec& (0+255),w,b
  3595  00195E  0E80               	movlw	128
  3596  001960  BFD8               	btfsc	sprintf@c& (0+255),7,b
  3597  001962  0E7F               	movlw	127
  3598  001964  59BA               	subwfb	??_sprintf& (0+255),w,b
  3599  001966  B0D8               	btfsc	status,0,c
  3600  001968  D005               	goto	l522
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;doprnt.c: 1342: prec = c;
  3604  00196A  51D8               	movf	sprintf@c& (0+255),w,b
  3605  00196C  6FD6               	movwf	sprintf@prec& (0+255),b
  3606  00196E  6BD7               	clrf	(sprintf@prec+1)& (0+255),b
  3607  001970  BFD6               	btfsc	sprintf@prec& (0+255),7,b
  3608  001972  07D7               	decf	(sprintf@prec+1)& (0+255),f,b
  3609  001974                     l522:
  3610                           
  3611                           ; BSR set to: 0
  3612                           ;doprnt.c: 1345: if(width && flag & 0x03)
  3613                           
  3614                           ; BSR set to: 0
  3615                           
  3616                           ; BSR set to: 0
  3617  001974  51D0               	movf	sprintf@width& (0+255),w,b
  3618  001976  11D1               	iorwf	(sprintf@width+1)& (0+255),w,b
  3619  001978  B4D8               	btfsc	status,2,c
  3620  00197A  D00D               	goto	l523
  3621                           
  3622                           ; BSR set to: 0
  3623  00197C  0E03               	movlw	3
  3624  00197E  15CE               	andwf	sprintf@flag& (0+255),w,b
  3625  001980  6FBA               	movwf	??_sprintf& (0+255),b
  3626  001982  0E00               	movlw	0
  3627  001984  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3628  001986  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3629  001988  51BA               	movf	??_sprintf& (0+255),w,b
  3630  00198A  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3631  00198C  B4D8               	btfsc	status,2,c
  3632  00198E  D003               	goto	l523
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;doprnt.c: 1346: width--;
  3636  001990  07D0               	decf	sprintf@width& (0+255),f,b
  3637  001992  A0D8               	btfss	status,0,c
  3638  001994  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3639  001996                     l523:
  3640                           
  3641                           ; BSR set to: 0
  3642                           ;doprnt.c: 1348: if(flag & 0x4000) {
  3643                           
  3644                           ; BSR set to: 0
  3645  001996  ADCF               	btfss	(sprintf@flag+1)& (0+255),6,b
  3646  001998  D013               	goto	l526
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;doprnt.c: 1349: if(width > prec)
  3650  00199A  51D0               	movf	sprintf@width& (0+255),w,b
  3651  00199C  5DD6               	subwf	sprintf@prec& (0+255),w,b
  3652  00199E  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3653  0019A0  0A80               	xorlw	128
  3654  0019A2  6FBA               	movwf	??_sprintf& (0+255),b
  3655  0019A4  51D1               	movf	(sprintf@width+1)& (0+255),w,b
  3656  0019A6  0A80               	xorlw	128
  3657  0019A8  59BA               	subwfb	??_sprintf& (0+255),w,b
  3658  0019AA  B0D8               	btfsc	status,0,c
  3659  0019AC  D005               	goto	l525
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;doprnt.c: 1350: width -= prec;
  3663  0019AE  51D6               	movf	sprintf@prec& (0+255),w,b
  3664  0019B0  5FD0               	subwf	sprintf@width& (0+255),f,b
  3665  0019B2  51D7               	movf	(sprintf@prec+1)& (0+255),w,b
  3666  0019B4  5BD1               	subwfb	(sprintf@width+1)& (0+255),f,b
  3667  0019B6  D004               	goto	l526
  3668  0019B8                     l525:
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;doprnt.c: 1351: else
  3672                           ;doprnt.c: 1352: width = 0;
  3673                           
  3674                           ; BSR set to: 0
  3675  0019B8  0E00               	movlw	0
  3676  0019BA  6FD1               	movwf	(sprintf@width+1)& (0+255),b
  3677  0019BC  0E00               	movlw	0
  3678  0019BE  6FD0               	movwf	sprintf@width& (0+255),b
  3679  0019C0                     l526:
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;doprnt.c: 1353: }
  3683                           ;doprnt.c: 1381: if(width > c)
  3684                           
  3685                           ; BSR set to: 0
  3686                           
  3687                           ; BSR set to: 0
  3688  0019C0  0E80               	movlw	128
  3689  0019C2  BFD8               	btfsc	sprintf@c& (0+255),7,b
  3690  0019C4  0E7F               	movlw	127
  3691  0019C6  6FBA               	movwf	??_sprintf& (0+255),b
  3692  0019C8  51D0               	movf	sprintf@width& (0+255),w,b
  3693  0019CA  5DD8               	subwf	sprintf@c& (0+255),w,b
  3694  0019CC  51D1               	movf	(sprintf@width+1)& (0+255),w,b
  3695  0019CE  0A80               	xorlw	128
  3696  0019D0  59BA               	subwfb	??_sprintf& (0+255),w,b
  3697  0019D2  B0D8               	btfsc	status,0,c
  3698  0019D4  D007               	goto	l527
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;doprnt.c: 1382: width -= c;
  3702  0019D6  51D8               	movf	sprintf@c& (0+255),w,b
  3703  0019D8  5FD0               	subwf	sprintf@width& (0+255),f,b
  3704  0019DA  0E00               	movlw	0
  3705  0019DC  BFD8               	btfsc	sprintf@c& (0+255),7,b
  3706  0019DE  0EFF               	movlw	255
  3707  0019E0  5BD1               	subwfb	(sprintf@width+1)& (0+255),f,b
  3708  0019E2  D004               	goto	l528
  3709  0019E4                     l527:
  3710                           
  3711                           ; BSR set to: 0
  3712                           ;doprnt.c: 1383: else
  3713                           ;doprnt.c: 1384: width = 0;
  3714                           
  3715                           ; BSR set to: 0
  3716  0019E4  0E00               	movlw	0
  3717  0019E6  6FD1               	movwf	(sprintf@width+1)& (0+255),b
  3718  0019E8  0E00               	movlw	0
  3719  0019EA  6FD0               	movwf	sprintf@width& (0+255),b
  3720  0019EC                     l528:
  3721                           
  3722                           ; BSR set to: 0
  3723                           ;doprnt.c: 1387: if(flag & 0x04) {
  3724                           
  3725                           ; BSR set to: 0
  3726  0019EC  A5CE               	btfss	sprintf@flag& (0+255),2,b
  3727  0019EE  D022               	goto	l529
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;doprnt.c: 1392: if(flag & 0x03)
  3731  0019F0  0E03               	movlw	3
  3732  0019F2  15CE               	andwf	sprintf@flag& (0+255),w,b
  3733  0019F4  6FBA               	movwf	??_sprintf& (0+255),b
  3734  0019F6  0E00               	movlw	0
  3735  0019F8  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3736  0019FA  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3737  0019FC  51BA               	movf	??_sprintf& (0+255),w,b
  3738  0019FE  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3739  001A00  B4D8               	btfsc	status,2,c
  3740  001A02  D008               	goto	l530
  3741                           
  3742                           ; BSR set to: 0
  3743                           ;doprnt.c: 1393: ((*sp++ = ('-')));
  3744  001A04  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3745  001A08  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3746  001A0C  0E2D               	movlw	45
  3747  001A0E  6EDF               	movwf	indf2,c
  3748                           
  3749                           ; BSR set to: 0
  3750  001A10  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3751  001A12  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3752  001A14                     l530:
  3753                           
  3754                           ; BSR set to: 0
  3755                           ;doprnt.c: 1415: if(width)
  3756                           
  3757                           ; BSR set to: 0
  3758  001A14  51D0               	movf	sprintf@width& (0+255),w,b
  3759  001A16  11D1               	iorwf	(sprintf@width+1)& (0+255),w,b
  3760  001A18  B4D8               	btfsc	status,2,c
  3761  001A1A  D031               	goto	l538
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;doprnt.c: 1417: ((*sp++ = ('0')));
  3765                           
  3766                           ; BSR set to: 0
  3767                           
  3768                           ;doprnt.c: 1416: do
  3769  001A1C  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3770  001A20  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3771  001A24  0E30               	movlw	48
  3772  001A26  6EDF               	movwf	indf2,c
  3773                           
  3774                           ; BSR set to: 0
  3775  001A28  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3776  001A2A  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;doprnt.c: 1418: while(--width);
  3780  001A2C  07D0               	decf	sprintf@width& (0+255),f,b
  3781  001A2E  A0D8               	btfss	status,0,c
  3782  001A30  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3783  001A32  D7F0               	goto	l530
  3784  001A34                     l529:
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;doprnt.c: 1422: {
  3788                           ;doprnt.c: 1424: if(width
  3789                           ;doprnt.c: 1428: )
  3790                           
  3791                           ; BSR set to: 0
  3792  001A34  51D0               	movf	sprintf@width& (0+255),w,b
  3793  001A36  11D1               	iorwf	(sprintf@width+1)& (0+255),w,b
  3794  001A38  B4D8               	btfsc	status,2,c
  3795  001A3A  D00F               	goto	u6690
  3796  001A3C                     u6680:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  3800                           
  3801                           ; BSR set to: 0
  3802                           
  3803                           ;doprnt.c: 1429: do
  3804  001A3C  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3805  001A40  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3806  001A44  0E20               	movlw	32
  3807  001A46  6EDF               	movwf	indf2,c
  3808                           
  3809                           ; BSR set to: 0
  3810  001A48  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3811  001A4A  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3812                           
  3813                           ; BSR set to: 0
  3814                           ;doprnt.c: 1431: while(--width);
  3815  001A4C  07D0               	decf	sprintf@width& (0+255),f,b
  3816  001A4E  A0D8               	btfss	status,0,c
  3817  001A50  07D1               	decf	(sprintf@width+1)& (0+255),f,b
  3818  001A52  51D0               	movf	sprintf@width& (0+255),w,b
  3819  001A54  11D1               	iorwf	(sprintf@width+1)& (0+255),w,b
  3820  001A56  A4D8               	btfss	status,2,c
  3821  001A58  D7F1               	goto	u6680
  3822  001A5A                     u6690:
  3823                           
  3824                           ; BSR set to: 0
  3825                           ;doprnt.c: 1438: if(flag & 0x03)
  3826                           
  3827                           ; BSR set to: 0
  3828                           
  3829                           ; BSR set to: 0
  3830  001A5A  0E03               	movlw	3
  3831  001A5C  15CE               	andwf	sprintf@flag& (0+255),w,b
  3832  001A5E  6FBA               	movwf	??_sprintf& (0+255),b
  3833  001A60  0E00               	movlw	0
  3834  001A62  15CF               	andwf	(sprintf@flag+1)& (0+255),w,b
  3835  001A64  6FBB               	movwf	(??_sprintf+1)& (0+255),b
  3836  001A66  51BA               	movf	??_sprintf& (0+255),w,b
  3837  001A68  11BB               	iorwf	(??_sprintf+1)& (0+255),w,b
  3838  001A6A  B4D8               	btfsc	status,2,c
  3839  001A6C  D008               	goto	l538
  3840                           
  3841                           ; BSR set to: 0
  3842                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  3843  001A6E  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3844  001A72  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3845  001A76  0E2D               	movlw	45
  3846  001A78  6EDF               	movwf	indf2,c
  3847  001A7A                     l5783:
  3848                           
  3849                           ; BSR set to: 0
  3850  001A7A  4BB2               	infsnz	sprintf@sp& (0+255),f,b
  3851  001A7C  2BB3               	incf	(sprintf@sp+1)& (0+255),f,b
  3852  001A7E                     l538:
  3853                           
  3854                           ; BSR set to: 0
  3855                           
  3856                           ; BSR set to: 0
  3857                           
  3858                           ; BSR set to: 0
  3859                           
  3860                           ; BSR set to: 0
  3861  001A7E  C0B4  FFF6         	movff	sprintf@f,tblptrl
  3862  001A82  C0B5  FFF7         	movff	sprintf@f+1,tblptrh
  3863  001A86  4BB4               	infsnz	sprintf@f& (0+255),f,b
  3864  001A88  2BB5               	incf	(sprintf@f+1)& (0+255),f,b
  3865  001A8A                     	if	0	;tblptru may be non-zero
  3866  001A8A                     	endif
  3867  001A8A                     	if	0	;tblptru may be non-zero
  3868  001A8A                     	endif
  3869  001A8A  0008               	tblrd		*
  3870  001A8C  CFF5 F0D8          	movff	tablat,sprintf@c
  3871  001A90  51D8               	movf	sprintf@c& (0+255),w,b
  3872  001A92  A4D8               	btfss	status,2,c
  3873  001A94  EF86  F008         	goto	l448
  3874  001A98                     u6710:
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;doprnt.c: 1538: *sp = 0;
  3878                           
  3879                           ; BSR set to: 0
  3880                           
  3881                           ;doprnt.c: 1469: }
  3882                           ;doprnt.c: 1533: }
  3883                           ;doprnt.c: 1535: alldone:
  3884                           
  3885                           ; BSR set to: 0
  3886  001A98  C0B2  FFD9         	movff	sprintf@sp,fsr2l
  3887  001A9C  C0B3  FFDA         	movff	sprintf@sp+1,fsr2h
  3888  001AA0  0E00               	movlw	0
  3889  001AA2  6EDF               	movwf	indf2,c
  3890  001AA4  0012               	return	
  3891  001AA6                     __end_of_sprintf:
  3892                           	opt stack 0
  3893                           tblptru	equ	0xFF8
  3894                           tblptrh	equ	0xFF7
  3895                           tblptrl	equ	0xFF6
  3896                           tablat	equ	0xFF5
  3897                           prodh	equ	0xFF4
  3898                           prodl	equ	0xFF3
  3899                           postinc0	equ	0xFEE
  3900                           wreg	equ	0xFE8
  3901                           postdec1	equ	0xFE5
  3902                           fsr1l	equ	0xFE1
  3903                           indf2	equ	0xFDF
  3904                           postinc2	equ	0xFDE
  3905                           fsr2h	equ	0xFDA
  3906                           fsr2l	equ	0xFD9
  3907                           status	equ	0xFD8
  3908                           
  3909 ;; *************** function _scale *****************
  3910 ;; Defined at:
  3911 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;  scl             1    wreg     char 
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;  scl             1   17[BANK0 ] char 
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  4   79[COMRAM] char 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3920 ;; Tracked objects:
  3921 ;;		On entry : 0/0
  3922 ;;		On exit  : 0/0
  3923 ;;		Unchanged: 0/0
  3924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3925 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3926 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Totals:         4       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;Total ram usage:        9 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    4
  3932 ;; This function calls:
  3933 ;;		___awdiv
  3934 ;;		___awmod
  3935 ;;		___flmul
  3936 ;; This function is called by:
  3937 ;;		_sprintf
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text2
  3942  002174                     __ptext2:
  3943                           	opt stack 0
  3944  002174                     _scale:
  3945                           	opt stack 25
  3946                           
  3947                           ; BSR set to: 0
  3948                           ;incstack = 0
  3949                           ;scale@scl stored from wreg
  3950  002174  0100               	movlb	0	; () banked
  3951  002176  6F91               	movwf	scale@scl& (0+255),b
  3952                           
  3953                           ;doprnt.c: 428: if(scl < 0) {
  3954  002178  0100               	movlb	0	; () banked
  3955  00217A  AF91               	btfss	scale@scl& (0+255),7,b
  3956  00217C  D112               	goto	l437
  3957                           
  3958                           ; BSR set to: 0
  3959                           ;doprnt.c: 429: scl = -scl;
  3960  00217E  6D91               	negf	scale@scl& (0+255),b
  3961                           
  3962                           ;doprnt.c: 430: if(scl>=110)
  3963  002180  5191               	movf	scale@scl& (0+255),w,b
  3964  002182  0A80               	xorlw	128
  3965  002184  0F12               	addlw	-238
  3966  002186  A0D8               	btfss	status,0,c
  3967  002188  D09A               	goto	l438
  3968                           
  3969                           ; BSR set to: 0
  3970                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  3971  00218A  0E00               	movlw	0
  3972  00218C  6E20               	movwf	___awdiv@divisor+1,c
  3973  00218E  0E0A               	movlw	10
  3974  002190  6E1F               	movwf	___awdiv@divisor,c
  3975  002192  0E00               	movlw	0
  3976  002194  6E1A               	movwf	___awmod@divisor+1,c
  3977  002196  0E64               	movlw	100
  3978  002198  6E19               	movwf	___awmod@divisor,c
  3979  00219A  5191               	movf	scale@scl& (0+255),w,b
  3980  00219C  6E17               	movwf	___awmod@dividend,c
  3981  00219E  6A18               	clrf	___awmod@dividend+1,c
  3982  0021A0  BE17               	btfsc	___awmod@dividend,7,c
  3983  0021A2  0618               	decf	___awmod@dividend+1,f,c
  3984  0021A4  EC63  F01E         	call	___awmod	;wreg free
  3985  0021A8  C017  F01D         	movff	?___awmod,___awdiv@dividend
  3986  0021AC  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  3987  0021B0  EC9F  F01D         	call	___awdiv	;wreg free
  3988  0021B4  90D8               	bcf	status,0,c
  3989  0021B6  361D               	rlcf	?___awdiv,f,c
  3990  0021B8  361E               	rlcf	?___awdiv+1,f,c
  3991  0021BA  90D8               	bcf	status,0,c
  3992  0021BC  361D               	rlcf	?___awdiv,f,c
  3993  0021BE  361E               	rlcf	?___awdiv+1,f,c
  3994  0021C0  0E24               	movlw	36
  3995  0021C2  261D               	addwf	?___awdiv,f,c
  3996  0021C4  0E00               	movlw	0
  3997  0021C6  221E               	addwfc	?___awdiv+1,f,c
  3998  0021C8  0E35               	movlw	low __npowers_
  3999  0021CA  241D               	addwf	?___awdiv,w,c
  4000  0021CC  6EF6               	movwf	tblptrl,c
  4001  0021CE  0E10               	movlw	high __npowers_
  4002  0021D0  201E               	addwfc	?___awdiv+1,w,c
  4003  0021D2  6EF7               	movwf	tblptrh,c
  4004  0021D4                     	if	0	;There are less than 3 active tblptr bytes
  4005  0021D4                     	endif
  4006  0021D4  0009               	tblrd		*+
  4007  0021D6  CFF5 F048          	movff	tablat,___flmul@a
  4008  0021DA  0009               	tblrd		*+
  4009  0021DC  CFF5 F049          	movff	tablat,___flmul@a+1
  4010  0021E0  0009               	tblrd		*+
  4011  0021E2  CFF5 F04A          	movff	tablat,___flmul@a+2
  4012  0021E6  000A               	tblrd		*-
  4013  0021E8  CFF5 F04B          	movff	tablat,___flmul@a+3
  4014  0021EC  0E00               	movlw	0
  4015  0021EE  6E20               	movwf	___awdiv@divisor+1,c
  4016  0021F0  0E64               	movlw	100
  4017  0021F2  6E1F               	movwf	___awdiv@divisor,c
  4018  0021F4  0100               	movlb	0	; () banked
  4019  0021F6  5191               	movf	scale@scl& (0+255),w,b
  4020  0021F8  6E1D               	movwf	___awdiv@dividend,c
  4021  0021FA  6A1E               	clrf	___awdiv@dividend+1,c
  4022  0021FC  BE1D               	btfsc	___awdiv@dividend,7,c
  4023  0021FE  061E               	decf	___awdiv@dividend+1,f,c
  4024  002200  EC9F  F01D         	call	___awdiv	;wreg free
  4025  002204  90D8               	bcf	status,0,c
  4026  002206  361D               	rlcf	?___awdiv,f,c
  4027  002208  361E               	rlcf	?___awdiv+1,f,c
  4028  00220A  90D8               	bcf	status,0,c
  4029  00220C  361D               	rlcf	?___awdiv,f,c
  4030  00220E  361E               	rlcf	?___awdiv+1,f,c
  4031  002210  0E48               	movlw	72
  4032  002212  261D               	addwf	?___awdiv,f,c
  4033  002214  0E00               	movlw	0
  4034  002216  221E               	addwfc	?___awdiv+1,f,c
  4035  002218  0E35               	movlw	low __npowers_
  4036  00221A  241D               	addwf	?___awdiv,w,c
  4037  00221C  6EF6               	movwf	tblptrl,c
  4038  00221E  0E10               	movlw	high __npowers_
  4039  002220  201E               	addwfc	?___awdiv+1,w,c
  4040  002222  6EF7               	movwf	tblptrh,c
  4041  002224                     	if	0	;There are less than 3 active tblptr bytes
  4042  002224                     	endif
  4043  002224  0009               	tblrd		*+
  4044  002226  CFF5 F044          	movff	tablat,___flmul@b
  4045  00222A  0009               	tblrd		*+
  4046  00222C  CFF5 F045          	movff	tablat,___flmul@b+1
  4047  002230  0009               	tblrd		*+
  4048  002232  CFF5 F046          	movff	tablat,___flmul@b+2
  4049  002236  000A               	tblrd		*-
  4050  002238  CFF5 F047          	movff	tablat,___flmul@b+3
  4051  00223C  ECE2  F012         	call	___flmul	;wreg free
  4052  002240  C044  F08D         	movff	?___flmul,_scale$1931
  4053  002244  C045  F08E         	movff	?___flmul+1,_scale$1931+1
  4054  002248  C046  F08F         	movff	?___flmul+2,_scale$1931+2
  4055  00224C  C047  F090         	movff	?___flmul+3,_scale$1931+3
  4056                           
  4057                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  4058  002250  C08D  F044         	movff	_scale$1931,___flmul@b
  4059  002254  C08E  F045         	movff	_scale$1931+1,___flmul@b+1
  4060  002258  C08F  F046         	movff	_scale$1931+2,___flmul@b+2
  4061  00225C  C090  F047         	movff	_scale$1931+3,___flmul@b+3
  4062  002260  0E00               	movlw	0
  4063  002262  6E1A               	movwf	___awmod@divisor+1,c
  4064  002264  0E0A               	movlw	10
  4065  002266  6E19               	movwf	___awmod@divisor,c
  4066  002268  0100               	movlb	0	; () banked
  4067  00226A  5191               	movf	scale@scl& (0+255),w,b
  4068  00226C  6E17               	movwf	___awmod@dividend,c
  4069  00226E  6A18               	clrf	___awmod@dividend+1,c
  4070  002270  BE17               	btfsc	___awmod@dividend,7,c
  4071  002272  0618               	decf	___awmod@dividend+1,f,c
  4072  002274  EC63  F01E         	call	___awmod	;wreg free
  4073  002278  90D8               	bcf	status,0,c
  4074  00227A  3617               	rlcf	?___awmod,f,c
  4075  00227C  3618               	rlcf	?___awmod+1,f,c
  4076  00227E  90D8               	bcf	status,0,c
  4077  002280  3617               	rlcf	?___awmod,f,c
  4078  002282  3618               	rlcf	?___awmod+1,f,c
  4079  002284  0E35               	movlw	low __npowers_
  4080  002286  2417               	addwf	?___awmod,w,c
  4081  002288  6EF6               	movwf	tblptrl,c
  4082  00228A  0E10               	movlw	high __npowers_
  4083  00228C  2018               	addwfc	?___awmod+1,w,c
  4084  00228E  6EF7               	movwf	tblptrh,c
  4085  002290                     	if	0	;There are less than 3 active tblptr bytes
  4086  002290                     	endif
  4087  002290  0009               	tblrd		*+
  4088  002292  CFF5 F048          	movff	tablat,___flmul@a
  4089  002296  0009               	tblrd		*+
  4090  002298  CFF5 F049          	movff	tablat,___flmul@a+1
  4091  00229C  0009               	tblrd		*+
  4092  00229E  CFF5 F04A          	movff	tablat,___flmul@a+2
  4093  0022A2  000A               	tblrd		*-
  4094  0022A4  CFF5 F04B          	movff	tablat,___flmul@a+3
  4095  0022A8  ECE2  F012         	call	___flmul	;wreg free
  4096  0022AC  C044  F050         	movff	?___flmul,?_scale
  4097  0022B0  C045  F051         	movff	?___flmul+1,?_scale+1
  4098  0022B4  C046  F052         	movff	?___flmul+2,?_scale+2
  4099  0022B8  C047  F053         	movff	?___flmul+3,?_scale+3
  4100  0022BC  0012               	return	
  4101  0022BE                     l438:
  4102                           
  4103                           ;doprnt.c: 432: else if(scl > 10)
  4104  0022BE  0100               	movlb	0	; () banked
  4105  0022C0  5191               	movf	scale@scl& (0+255),w,b
  4106  0022C2  0A80               	xorlw	128
  4107  0022C4  0F75               	addlw	-139
  4108  0022C6  A0D8               	btfss	status,0,c
  4109  0022C8  D056               	goto	l441
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  4113  0022CA  0E00               	movlw	0
  4114  0022CC  6E20               	movwf	___awdiv@divisor+1,c
  4115  0022CE  0E0A               	movlw	10
  4116  0022D0  6E1F               	movwf	___awdiv@divisor,c
  4117  0022D2  5191               	movf	scale@scl& (0+255),w,b
  4118  0022D4  6E1D               	movwf	___awdiv@dividend,c
  4119  0022D6  6A1E               	clrf	___awdiv@dividend+1,c
  4120  0022D8  BE1D               	btfsc	___awdiv@dividend,7,c
  4121  0022DA  061E               	decf	___awdiv@dividend+1,f,c
  4122  0022DC  EC9F  F01D         	call	___awdiv	;wreg free
  4123  0022E0  90D8               	bcf	status,0,c
  4124  0022E2  361D               	rlcf	?___awdiv,f,c
  4125  0022E4  361E               	rlcf	?___awdiv+1,f,c
  4126  0022E6  90D8               	bcf	status,0,c
  4127  0022E8  361D               	rlcf	?___awdiv,f,c
  4128  0022EA  361E               	rlcf	?___awdiv+1,f,c
  4129  0022EC  0E24               	movlw	36
  4130  0022EE  261D               	addwf	?___awdiv,f,c
  4131  0022F0  0E00               	movlw	0
  4132  0022F2  221E               	addwfc	?___awdiv+1,f,c
  4133  0022F4  0E35               	movlw	low __npowers_
  4134  0022F6  241D               	addwf	?___awdiv,w,c
  4135  0022F8  6EF6               	movwf	tblptrl,c
  4136  0022FA  0E10               	movlw	high __npowers_
  4137  0022FC  201E               	addwfc	?___awdiv+1,w,c
  4138  0022FE  6EF7               	movwf	tblptrh,c
  4139  002300                     	if	0	;There are less than 3 active tblptr bytes
  4140  002300                     	endif
  4141  002300  0009               	tblrd		*+
  4142  002302  CFF5 F044          	movff	tablat,___flmul@b
  4143  002306  0009               	tblrd		*+
  4144  002308  CFF5 F045          	movff	tablat,___flmul@b+1
  4145  00230C  0009               	tblrd		*+
  4146  00230E  CFF5 F046          	movff	tablat,___flmul@b+2
  4147  002312  000A               	tblrd		*-
  4148  002314  CFF5 F047          	movff	tablat,___flmul@b+3
  4149  002318  0E00               	movlw	0
  4150  00231A  6E1A               	movwf	___awmod@divisor+1,c
  4151  00231C  0E0A               	movlw	10
  4152  00231E  6E19               	movwf	___awmod@divisor,c
  4153  002320  0100               	movlb	0	; () banked
  4154  002322  5191               	movf	scale@scl& (0+255),w,b
  4155  002324  6E17               	movwf	___awmod@dividend,c
  4156  002326  6A18               	clrf	___awmod@dividend+1,c
  4157  002328  BE17               	btfsc	___awmod@dividend,7,c
  4158  00232A  0618               	decf	___awmod@dividend+1,f,c
  4159  00232C  EC63  F01E         	call	___awmod	;wreg free
  4160  002330  90D8               	bcf	status,0,c
  4161  002332  3617               	rlcf	?___awmod,f,c
  4162  002334  3618               	rlcf	?___awmod+1,f,c
  4163  002336  90D8               	bcf	status,0,c
  4164  002338  3617               	rlcf	?___awmod,f,c
  4165  00233A  3618               	rlcf	?___awmod+1,f,c
  4166  00233C  0E35               	movlw	low __npowers_
  4167  00233E  2417               	addwf	?___awmod,w,c
  4168  002340  6EF6               	movwf	tblptrl,c
  4169  002342  0E10               	movlw	high __npowers_
  4170  002344  2018               	addwfc	?___awmod+1,w,c
  4171  002346  6EF7               	movwf	tblptrh,c
  4172  002348                     	if	0	;There are less than 3 active tblptr bytes
  4173  002348                     	endif
  4174  002348  0009               	tblrd		*+
  4175  00234A  CFF5 F048          	movff	tablat,___flmul@a
  4176  00234E  0009               	tblrd		*+
  4177  002350  CFF5 F049          	movff	tablat,___flmul@a+1
  4178  002354  0009               	tblrd		*+
  4179  002356  CFF5 F04A          	movff	tablat,___flmul@a+2
  4180  00235A  000A               	tblrd		*-
  4181  00235C  CFF5 F04B          	movff	tablat,___flmul@a+3
  4182  002360  ECE2  F012         	call	___flmul	;wreg free
  4183  002364  C044  F050         	movff	?___flmul,?_scale
  4184  002368  C045  F051         	movff	?___flmul+1,?_scale+1
  4185  00236C  C046  F052         	movff	?___flmul+2,?_scale+2
  4186  002370  C047  F053         	movff	?___flmul+3,?_scale+3
  4187  002374  0012               	return	
  4188  002376                     l441:
  4189                           
  4190                           ;doprnt.c: 434: return _npowers_[scl];
  4191  002376  0100               	movlb	0	; () banked
  4192  002378  5191               	movf	scale@scl& (0+255),w,b
  4193  00237A  0D04               	mullw	4
  4194  00237C  0E35               	movlw	low __npowers_
  4195  00237E  24F3               	addwf	prodl,w,c
  4196  002380  6EF6               	movwf	tblptrl,c
  4197  002382  0E10               	movlw	high __npowers_
  4198  002384  20F4               	addwfc	prodh,w,c
  4199  002386  6EF7               	movwf	tblptrh,c
  4200  002388                     	if	0	;There are less than 3 active tblptr bytes
  4201  002388                     	endif
  4202  002388  0009               	tblrd		*+
  4203  00238A  CFF5 F050          	movff	tablat,?_scale
  4204  00238E  0009               	tblrd		*+
  4205  002390  CFF5 F051          	movff	tablat,?_scale+1
  4206  002394  0009               	tblrd		*+
  4207  002396  CFF5 F052          	movff	tablat,?_scale+2
  4208  00239A  000A               	tblrd		*-
  4209  00239C  CFF5 F053          	movff	tablat,?_scale+3
  4210                           
  4211                           ; BSR set to: 0
  4212  0023A0  0012               	return	
  4213  0023A2                     l437:
  4214                           
  4215                           ; BSR set to: 0
  4216                           ;doprnt.c: 435: }
  4217                           ;doprnt.c: 436: if(scl>=110)
  4218                           
  4219                           ; BSR set to: 0
  4220  0023A2  5191               	movf	scale@scl& (0+255),w,b
  4221  0023A4  0A80               	xorlw	128
  4222  0023A6  0F12               	addlw	-238
  4223  0023A8  A0D8               	btfss	status,0,c
  4224  0023AA  D09A               	goto	l442
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4228  0023AC  0E00               	movlw	0
  4229  0023AE  6E20               	movwf	___awdiv@divisor+1,c
  4230  0023B0  0E0A               	movlw	10
  4231  0023B2  6E1F               	movwf	___awdiv@divisor,c
  4232  0023B4  0E00               	movlw	0
  4233  0023B6  6E1A               	movwf	___awmod@divisor+1,c
  4234  0023B8  0E64               	movlw	100
  4235  0023BA  6E19               	movwf	___awmod@divisor,c
  4236  0023BC  5191               	movf	scale@scl& (0+255),w,b
  4237  0023BE  6E17               	movwf	___awmod@dividend,c
  4238  0023C0  6A18               	clrf	___awmod@dividend+1,c
  4239  0023C2  BE17               	btfsc	___awmod@dividend,7,c
  4240  0023C4  0618               	decf	___awmod@dividend+1,f,c
  4241  0023C6  EC63  F01E         	call	___awmod	;wreg free
  4242  0023CA  C017  F01D         	movff	?___awmod,___awdiv@dividend
  4243  0023CE  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  4244  0023D2  EC9F  F01D         	call	___awdiv	;wreg free
  4245  0023D6  90D8               	bcf	status,0,c
  4246  0023D8  361D               	rlcf	?___awdiv,f,c
  4247  0023DA  361E               	rlcf	?___awdiv+1,f,c
  4248  0023DC  90D8               	bcf	status,0,c
  4249  0023DE  361D               	rlcf	?___awdiv,f,c
  4250  0023E0  361E               	rlcf	?___awdiv+1,f,c
  4251  0023E2  0E24               	movlw	36
  4252  0023E4  261D               	addwf	?___awdiv,f,c
  4253  0023E6  0E00               	movlw	0
  4254  0023E8  221E               	addwfc	?___awdiv+1,f,c
  4255  0023EA  0E01               	movlw	low __powers_
  4256  0023EC  241D               	addwf	?___awdiv,w,c
  4257  0023EE  6EF6               	movwf	tblptrl,c
  4258  0023F0  0E10               	movlw	high __powers_
  4259  0023F2  201E               	addwfc	?___awdiv+1,w,c
  4260  0023F4  6EF7               	movwf	tblptrh,c
  4261  0023F6                     	if	0	;There are less than 3 active tblptr bytes
  4262  0023F6                     	endif
  4263  0023F6  0009               	tblrd		*+
  4264  0023F8  CFF5 F048          	movff	tablat,___flmul@a
  4265  0023FC  0009               	tblrd		*+
  4266  0023FE  CFF5 F049          	movff	tablat,___flmul@a+1
  4267  002402  0009               	tblrd		*+
  4268  002404  CFF5 F04A          	movff	tablat,___flmul@a+2
  4269  002408  000A               	tblrd		*-
  4270  00240A  CFF5 F04B          	movff	tablat,___flmul@a+3
  4271  00240E  0E00               	movlw	0
  4272  002410  6E20               	movwf	___awdiv@divisor+1,c
  4273  002412  0E64               	movlw	100
  4274  002414  6E1F               	movwf	___awdiv@divisor,c
  4275  002416  0100               	movlb	0	; () banked
  4276  002418  5191               	movf	scale@scl& (0+255),w,b
  4277  00241A  6E1D               	movwf	___awdiv@dividend,c
  4278  00241C  6A1E               	clrf	___awdiv@dividend+1,c
  4279  00241E  BE1D               	btfsc	___awdiv@dividend,7,c
  4280  002420  061E               	decf	___awdiv@dividend+1,f,c
  4281  002422  EC9F  F01D         	call	___awdiv	;wreg free
  4282  002426  90D8               	bcf	status,0,c
  4283  002428  361D               	rlcf	?___awdiv,f,c
  4284  00242A  361E               	rlcf	?___awdiv+1,f,c
  4285  00242C  90D8               	bcf	status,0,c
  4286  00242E  361D               	rlcf	?___awdiv,f,c
  4287  002430  361E               	rlcf	?___awdiv+1,f,c
  4288  002432  0E48               	movlw	72
  4289  002434  261D               	addwf	?___awdiv,f,c
  4290  002436  0E00               	movlw	0
  4291  002438  221E               	addwfc	?___awdiv+1,f,c
  4292  00243A  0E01               	movlw	low __powers_
  4293  00243C  241D               	addwf	?___awdiv,w,c
  4294  00243E  6EF6               	movwf	tblptrl,c
  4295  002440  0E10               	movlw	high __powers_
  4296  002442  201E               	addwfc	?___awdiv+1,w,c
  4297  002444  6EF7               	movwf	tblptrh,c
  4298  002446                     	if	0	;There are less than 3 active tblptr bytes
  4299  002446                     	endif
  4300  002446  0009               	tblrd		*+
  4301  002448  CFF5 F044          	movff	tablat,___flmul@b
  4302  00244C  0009               	tblrd		*+
  4303  00244E  CFF5 F045          	movff	tablat,___flmul@b+1
  4304  002452  0009               	tblrd		*+
  4305  002454  CFF5 F046          	movff	tablat,___flmul@b+2
  4306  002458  000A               	tblrd		*-
  4307  00245A  CFF5 F047          	movff	tablat,___flmul@b+3
  4308  00245E  ECE2  F012         	call	___flmul	;wreg free
  4309  002462  C044  F08D         	movff	?___flmul,_scale$1931
  4310  002466  C045  F08E         	movff	?___flmul+1,_scale$1931+1
  4311  00246A  C046  F08F         	movff	?___flmul+2,_scale$1931+2
  4312  00246E  C047  F090         	movff	?___flmul+3,_scale$1931+3
  4313                           
  4314                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  4315  002472  C08D  F044         	movff	_scale$1931,___flmul@b
  4316  002476  C08E  F045         	movff	_scale$1931+1,___flmul@b+1
  4317  00247A  C08F  F046         	movff	_scale$1931+2,___flmul@b+2
  4318  00247E  C090  F047         	movff	_scale$1931+3,___flmul@b+3
  4319  002482  0E00               	movlw	0
  4320  002484  6E1A               	movwf	___awmod@divisor+1,c
  4321  002486  0E0A               	movlw	10
  4322  002488  6E19               	movwf	___awmod@divisor,c
  4323  00248A  0100               	movlb	0	; () banked
  4324  00248C  5191               	movf	scale@scl& (0+255),w,b
  4325  00248E  6E17               	movwf	___awmod@dividend,c
  4326  002490  6A18               	clrf	___awmod@dividend+1,c
  4327  002492  BE17               	btfsc	___awmod@dividend,7,c
  4328  002494  0618               	decf	___awmod@dividend+1,f,c
  4329  002496  EC63  F01E         	call	___awmod	;wreg free
  4330  00249A  90D8               	bcf	status,0,c
  4331  00249C  3617               	rlcf	?___awmod,f,c
  4332  00249E  3618               	rlcf	?___awmod+1,f,c
  4333  0024A0  90D8               	bcf	status,0,c
  4334  0024A2  3617               	rlcf	?___awmod,f,c
  4335  0024A4  3618               	rlcf	?___awmod+1,f,c
  4336  0024A6  0E01               	movlw	low __powers_
  4337  0024A8  2417               	addwf	?___awmod,w,c
  4338  0024AA  6EF6               	movwf	tblptrl,c
  4339  0024AC  0E10               	movlw	high __powers_
  4340  0024AE  2018               	addwfc	?___awmod+1,w,c
  4341  0024B0  6EF7               	movwf	tblptrh,c
  4342  0024B2                     	if	0	;There are less than 3 active tblptr bytes
  4343  0024B2                     	endif
  4344  0024B2  0009               	tblrd		*+
  4345  0024B4  CFF5 F048          	movff	tablat,___flmul@a
  4346  0024B8  0009               	tblrd		*+
  4347  0024BA  CFF5 F049          	movff	tablat,___flmul@a+1
  4348  0024BE  0009               	tblrd		*+
  4349  0024C0  CFF5 F04A          	movff	tablat,___flmul@a+2
  4350  0024C4  000A               	tblrd		*-
  4351  0024C6  CFF5 F04B          	movff	tablat,___flmul@a+3
  4352  0024CA  ECE2  F012         	call	___flmul	;wreg free
  4353  0024CE  C044  F050         	movff	?___flmul,?_scale
  4354  0024D2  C045  F051         	movff	?___flmul+1,?_scale+1
  4355  0024D6  C046  F052         	movff	?___flmul+2,?_scale+2
  4356  0024DA  C047  F053         	movff	?___flmul+3,?_scale+3
  4357  0024DE  0012               	return	
  4358  0024E0                     l442:
  4359                           
  4360                           ;doprnt.c: 438: else if(scl > 10)
  4361  0024E0  0100               	movlb	0	; () banked
  4362  0024E2  5191               	movf	scale@scl& (0+255),w,b
  4363  0024E4  0A80               	xorlw	128
  4364  0024E6  0F75               	addlw	-139
  4365  0024E8  A0D8               	btfss	status,0,c
  4366  0024EA  D056               	goto	l444
  4367                           
  4368                           ; BSR set to: 0
  4369                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  4370  0024EC  0E00               	movlw	0
  4371  0024EE  6E20               	movwf	___awdiv@divisor+1,c
  4372  0024F0  0E0A               	movlw	10
  4373  0024F2  6E1F               	movwf	___awdiv@divisor,c
  4374  0024F4  5191               	movf	scale@scl& (0+255),w,b
  4375  0024F6  6E1D               	movwf	___awdiv@dividend,c
  4376  0024F8  6A1E               	clrf	___awdiv@dividend+1,c
  4377  0024FA  BE1D               	btfsc	___awdiv@dividend,7,c
  4378  0024FC  061E               	decf	___awdiv@dividend+1,f,c
  4379  0024FE  EC9F  F01D         	call	___awdiv	;wreg free
  4380  002502  90D8               	bcf	status,0,c
  4381  002504  361D               	rlcf	?___awdiv,f,c
  4382  002506  361E               	rlcf	?___awdiv+1,f,c
  4383  002508  90D8               	bcf	status,0,c
  4384  00250A  361D               	rlcf	?___awdiv,f,c
  4385  00250C  361E               	rlcf	?___awdiv+1,f,c
  4386  00250E  0E24               	movlw	36
  4387  002510  261D               	addwf	?___awdiv,f,c
  4388  002512  0E00               	movlw	0
  4389  002514  221E               	addwfc	?___awdiv+1,f,c
  4390  002516  0E01               	movlw	low __powers_
  4391  002518  241D               	addwf	?___awdiv,w,c
  4392  00251A  6EF6               	movwf	tblptrl,c
  4393  00251C  0E10               	movlw	high __powers_
  4394  00251E  201E               	addwfc	?___awdiv+1,w,c
  4395  002520  6EF7               	movwf	tblptrh,c
  4396  002522                     	if	0	;There are less than 3 active tblptr bytes
  4397  002522                     	endif
  4398  002522  0009               	tblrd		*+
  4399  002524  CFF5 F044          	movff	tablat,___flmul@b
  4400  002528  0009               	tblrd		*+
  4401  00252A  CFF5 F045          	movff	tablat,___flmul@b+1
  4402  00252E  0009               	tblrd		*+
  4403  002530  CFF5 F046          	movff	tablat,___flmul@b+2
  4404  002534  000A               	tblrd		*-
  4405  002536  CFF5 F047          	movff	tablat,___flmul@b+3
  4406  00253A  0E00               	movlw	0
  4407  00253C  6E1A               	movwf	___awmod@divisor+1,c
  4408  00253E  0E0A               	movlw	10
  4409  002540  6E19               	movwf	___awmod@divisor,c
  4410  002542  0100               	movlb	0	; () banked
  4411  002544  5191               	movf	scale@scl& (0+255),w,b
  4412  002546  6E17               	movwf	___awmod@dividend,c
  4413  002548  6A18               	clrf	___awmod@dividend+1,c
  4414  00254A  BE17               	btfsc	___awmod@dividend,7,c
  4415  00254C  0618               	decf	___awmod@dividend+1,f,c
  4416  00254E  EC63  F01E         	call	___awmod	;wreg free
  4417  002552  90D8               	bcf	status,0,c
  4418  002554  3617               	rlcf	?___awmod,f,c
  4419  002556  3618               	rlcf	?___awmod+1,f,c
  4420  002558  90D8               	bcf	status,0,c
  4421  00255A  3617               	rlcf	?___awmod,f,c
  4422  00255C  3618               	rlcf	?___awmod+1,f,c
  4423  00255E  0E01               	movlw	low __powers_
  4424  002560  2417               	addwf	?___awmod,w,c
  4425  002562  6EF6               	movwf	tblptrl,c
  4426  002564  0E10               	movlw	high __powers_
  4427  002566  2018               	addwfc	?___awmod+1,w,c
  4428  002568  6EF7               	movwf	tblptrh,c
  4429  00256A                     	if	0	;There are less than 3 active tblptr bytes
  4430  00256A                     	endif
  4431  00256A  0009               	tblrd		*+
  4432  00256C  CFF5 F048          	movff	tablat,___flmul@a
  4433  002570  0009               	tblrd		*+
  4434  002572  CFF5 F049          	movff	tablat,___flmul@a+1
  4435  002576  0009               	tblrd		*+
  4436  002578  CFF5 F04A          	movff	tablat,___flmul@a+2
  4437  00257C  000A               	tblrd		*-
  4438  00257E  CFF5 F04B          	movff	tablat,___flmul@a+3
  4439  002582  ECE2  F012         	call	___flmul	;wreg free
  4440  002586  C044  F050         	movff	?___flmul,?_scale
  4441  00258A  C045  F051         	movff	?___flmul+1,?_scale+1
  4442  00258E  C046  F052         	movff	?___flmul+2,?_scale+2
  4443  002592  C047  F053         	movff	?___flmul+3,?_scale+3
  4444  002596  0012               	return	
  4445  002598                     l444:
  4446                           
  4447                           ;doprnt.c: 440: return _powers_[scl];
  4448  002598  0100               	movlb	0	; () banked
  4449  00259A  5191               	movf	scale@scl& (0+255),w,b
  4450  00259C  0D04               	mullw	4
  4451  00259E  0E01               	movlw	low __powers_
  4452  0025A0  24F3               	addwf	prodl,w,c
  4453  0025A2  6EF6               	movwf	tblptrl,c
  4454  0025A4  0E10               	movlw	high __powers_
  4455  0025A6  20F4               	addwfc	prodh,w,c
  4456  0025A8  6EF7               	movwf	tblptrh,c
  4457  0025AA                     	if	0	;There are less than 3 active tblptr bytes
  4458  0025AA                     	endif
  4459  0025AA  0009               	tblrd		*+
  4460  0025AC  CFF5 F050          	movff	tablat,?_scale
  4461  0025B0  0009               	tblrd		*+
  4462  0025B2  CFF5 F051          	movff	tablat,?_scale+1
  4463  0025B6  0009               	tblrd		*+
  4464  0025B8  CFF5 F052          	movff	tablat,?_scale+2
  4465  0025BC  000A               	tblrd		*-
  4466  0025BE  CFF5 F053          	movff	tablat,?_scale+3
  4467  0025C2  0012               	return	
  4468  0025C4                     __end_of_scale:
  4469                           	opt stack 0
  4470                           tblptru	equ	0xFF8
  4471                           tblptrh	equ	0xFF7
  4472                           tblptrl	equ	0xFF6
  4473                           tablat	equ	0xFF5
  4474                           prodh	equ	0xFF4
  4475                           prodl	equ	0xFF3
  4476                           postinc0	equ	0xFEE
  4477                           wreg	equ	0xFE8
  4478                           postdec1	equ	0xFE5
  4479                           fsr1l	equ	0xFE1
  4480                           indf2	equ	0xFDF
  4481                           postinc2	equ	0xFDE
  4482                           fsr2h	equ	0xFDA
  4483                           fsr2l	equ	0xFD9
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _isdigit *****************
  4487 ;; Defined at:
  4488 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\isdigit.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  c               1    wreg     unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  c               1   24[COMRAM] unsigned char 
  4493 ;; Return value:  Size  Location     Type
  4494 ;;		None               void
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4503 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4504 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4505 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;Total ram usage:        3 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:    3
  4509 ;; This function calls:
  4510 ;;		Nothing
  4511 ;; This function is called by:
  4512 ;;		_sprintf
  4513 ;; This function uses a non-reentrant model
  4514 ;;
  4515                           
  4516                           	psect	text3
  4517  0041C0                     __ptext3:
  4518                           	opt stack 0
  4519  0041C0                     _isdigit:
  4520                           	opt stack 26
  4521                           
  4522                           ;incstack = 0
  4523                           ;isdigit@c stored from wreg
  4524  0041C0  6E19               	movwf	isdigit@c,c
  4525  0041C2  0E00               	movlw	0
  4526  0041C4  6E18               	movwf	_isdigit$1542,c
  4527  0041C6  0E3A               	movlw	58
  4528  0041C8  6019               	cpfslt	isdigit@c,c
  4529  0041CA  D005               	goto	l904
  4530  0041CC  0E2F               	movlw	47
  4531  0041CE  6419               	cpfsgt	isdigit@c,c
  4532  0041D0  D002               	goto	l904
  4533  0041D2  0E01               	movlw	1
  4534  0041D4  6E18               	movwf	_isdigit$1542,c
  4535  0041D6                     l904:
  4536  0041D6  C018  F017         	movff	_isdigit$1542,??_isdigit
  4537  0041DA  3017               	rrcf	??_isdigit,w,c
  4538  0041DC  0012               	return	
  4539  0041DE                     __end_of_isdigit:
  4540                           	opt stack 0
  4541                           tblptru	equ	0xFF8
  4542                           tblptrh	equ	0xFF7
  4543                           tblptrl	equ	0xFF6
  4544                           tablat	equ	0xFF5
  4545                           prodh	equ	0xFF4
  4546                           prodl	equ	0xFF3
  4547                           postinc0	equ	0xFEE
  4548                           wreg	equ	0xFE8
  4549                           postdec1	equ	0xFE5
  4550                           fsr1l	equ	0xFE1
  4551                           indf2	equ	0xFDF
  4552                           postinc2	equ	0xFDE
  4553                           fsr2h	equ	0xFDA
  4554                           fsr2l	equ	0xFD9
  4555                           status	equ	0xFD8
  4556                           
  4557 ;; *************** function _fround *****************
  4558 ;; Defined at:
  4559 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  4560 ;; Parameters:    Size  Location     Type
  4561 ;;  prec            1    wreg     unsigned char 
  4562 ;; Auto vars:     Size  Location     Type
  4563 ;;  prec            1   21[BANK0 ] unsigned char 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;                  4   79[COMRAM] unsigned char 
  4566 ;; Registers used:
  4567 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4574 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4576 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4577 ;;Total ram usage:       13 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    4
  4580 ;; This function calls:
  4581 ;;		___awdiv
  4582 ;;		___awmod
  4583 ;;		___flmul
  4584 ;; This function is called by:
  4585 ;;		_sprintf
  4586 ;; This function uses a non-reentrant model
  4587 ;;
  4588                           
  4589                           	psect	text4
  4590  002F08                     __ptext4:
  4591                           	opt stack 0
  4592  002F08                     _fround:
  4593                           	opt stack 25
  4594                           
  4595                           ;incstack = 0
  4596                           ;fround@prec stored from wreg
  4597  002F08  0100               	movlb	0	; () banked
  4598  002F0A  6F95               	movwf	fround@prec& (0+255),b
  4599                           
  4600                           ;doprnt.c: 413: if(prec>=110)
  4601  002F0C  0E6D               	movlw	109
  4602  002F0E  0100               	movlb	0	; () banked
  4603  002F10  6595               	cpfsgt	fround@prec& (0+255),b
  4604  002F12  D0AC               	goto	l431
  4605                           
  4606                           ; BSR set to: 0
  4607                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4608  002F14  0E00               	movlw	0
  4609  002F16  6E20               	movwf	___awdiv@divisor+1,c
  4610  002F18  0E0A               	movlw	10
  4611  002F1A  6E1F               	movwf	___awdiv@divisor,c
  4612  002F1C  0E00               	movlw	0
  4613  002F1E  6E1A               	movwf	___awmod@divisor+1,c
  4614  002F20  0E64               	movlw	100
  4615  002F22  6E19               	movwf	___awmod@divisor,c
  4616  002F24  C095  F017         	movff	fround@prec,___awmod@dividend
  4617  002F28  6A18               	clrf	___awmod@dividend+1,c
  4618  002F2A  EC63  F01E         	call	___awmod	;wreg free
  4619  002F2E  C017  F01D         	movff	?___awmod,___awdiv@dividend
  4620  002F32  C018  F01E         	movff	?___awmod+1,___awdiv@dividend+1
  4621  002F36  EC9F  F01D         	call	___awdiv	;wreg free
  4622  002F3A  90D8               	bcf	status,0,c
  4623  002F3C  361D               	rlcf	?___awdiv,f,c
  4624  002F3E  361E               	rlcf	?___awdiv+1,f,c
  4625  002F40  90D8               	bcf	status,0,c
  4626  002F42  361D               	rlcf	?___awdiv,f,c
  4627  002F44  361E               	rlcf	?___awdiv+1,f,c
  4628  002F46  0E24               	movlw	36
  4629  002F48  261D               	addwf	?___awdiv,f,c
  4630  002F4A  0E00               	movlw	0
  4631  002F4C  221E               	addwfc	?___awdiv+1,f,c
  4632  002F4E  0E35               	movlw	low __npowers_
  4633  002F50  241D               	addwf	?___awdiv,w,c
  4634  002F52  6EF6               	movwf	tblptrl,c
  4635  002F54  0E10               	movlw	high __npowers_
  4636  002F56  201E               	addwfc	?___awdiv+1,w,c
  4637  002F58  6EF7               	movwf	tblptrh,c
  4638  002F5A                     	if	0	;There are less than 3 active tblptr bytes
  4639  002F5A                     	endif
  4640  002F5A  0009               	tblrd		*+
  4641  002F5C  CFF5 F048          	movff	tablat,___flmul@a
  4642  002F60  0009               	tblrd		*+
  4643  002F62  CFF5 F049          	movff	tablat,___flmul@a+1
  4644  002F66  0009               	tblrd		*+
  4645  002F68  CFF5 F04A          	movff	tablat,___flmul@a+2
  4646  002F6C  000A               	tblrd		*-
  4647  002F6E  CFF5 F04B          	movff	tablat,___flmul@a+3
  4648  002F72  0E00               	movlw	0
  4649  002F74  6E20               	movwf	___awdiv@divisor+1,c
  4650  002F76  0E64               	movlw	100
  4651  002F78  6E1F               	movwf	___awdiv@divisor,c
  4652  002F7A  C095  F01D         	movff	fround@prec,___awdiv@dividend
  4653  002F7E  6A1E               	clrf	___awdiv@dividend+1,c
  4654  002F80  EC9F  F01D         	call	___awdiv	;wreg free
  4655  002F84  90D8               	bcf	status,0,c
  4656  002F86  361D               	rlcf	?___awdiv,f,c
  4657  002F88  361E               	rlcf	?___awdiv+1,f,c
  4658  002F8A  90D8               	bcf	status,0,c
  4659  002F8C  361D               	rlcf	?___awdiv,f,c
  4660  002F8E  361E               	rlcf	?___awdiv+1,f,c
  4661  002F90  0E48               	movlw	72
  4662  002F92  261D               	addwf	?___awdiv,f,c
  4663  002F94  0E00               	movlw	0
  4664  002F96  221E               	addwfc	?___awdiv+1,f,c
  4665  002F98  0E35               	movlw	low __npowers_
  4666  002F9A  241D               	addwf	?___awdiv,w,c
  4667  002F9C  6EF6               	movwf	tblptrl,c
  4668  002F9E  0E10               	movlw	high __npowers_
  4669  002FA0  201E               	addwfc	?___awdiv+1,w,c
  4670  002FA2  6EF7               	movwf	tblptrh,c
  4671  002FA4                     	if	0	;There are less than 3 active tblptr bytes
  4672  002FA4                     	endif
  4673  002FA4  0009               	tblrd		*+
  4674  002FA6  CFF5 F044          	movff	tablat,___flmul@b
  4675  002FAA  0009               	tblrd		*+
  4676  002FAC  CFF5 F045          	movff	tablat,___flmul@b+1
  4677  002FB0  0009               	tblrd		*+
  4678  002FB2  CFF5 F046          	movff	tablat,___flmul@b+2
  4679  002FB6  000A               	tblrd		*-
  4680  002FB8  CFF5 F047          	movff	tablat,___flmul@b+3
  4681  002FBC  ECE2  F012         	call	___flmul	;wreg free
  4682  002FC0  C044  F091         	movff	?___flmul,_fround$1929
  4683  002FC4  C045  F092         	movff	?___flmul+1,_fround$1929+1
  4684  002FC8  C046  F093         	movff	?___flmul+2,_fround$1929+2
  4685  002FCC  C047  F094         	movff	?___flmul+3,_fround$1929+3
  4686                           
  4687                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4688  002FD0  0E00               	movlw	0
  4689  002FD2  6E1A               	movwf	___awmod@divisor+1,c
  4690  002FD4  0E0A               	movlw	10
  4691  002FD6  6E19               	movwf	___awmod@divisor,c
  4692  002FD8  C095  F017         	movff	fround@prec,___awmod@dividend
  4693  002FDC  6A18               	clrf	___awmod@dividend+1,c
  4694  002FDE  EC63  F01E         	call	___awmod	;wreg free
  4695  002FE2  90D8               	bcf	status,0,c
  4696  002FE4  3617               	rlcf	?___awmod,f,c
  4697  002FE6  3618               	rlcf	?___awmod+1,f,c
  4698  002FE8  90D8               	bcf	status,0,c
  4699  002FEA  3617               	rlcf	?___awmod,f,c
  4700  002FEC  3618               	rlcf	?___awmod+1,f,c
  4701  002FEE  0E35               	movlw	low __npowers_
  4702  002FF0  2417               	addwf	?___awmod,w,c
  4703  002FF2  6EF6               	movwf	tblptrl,c
  4704  002FF4  0E10               	movlw	high __npowers_
  4705  002FF6  2018               	addwfc	?___awmod+1,w,c
  4706  002FF8  6EF7               	movwf	tblptrh,c
  4707  002FFA                     	if	0	;There are less than 3 active tblptr bytes
  4708  002FFA                     	endif
  4709  002FFA  0009               	tblrd		*+
  4710  002FFC  CFF5 F048          	movff	tablat,___flmul@a
  4711  003000  0009               	tblrd		*+
  4712  003002  CFF5 F049          	movff	tablat,___flmul@a+1
  4713  003006  0009               	tblrd		*+
  4714  003008  CFF5 F04A          	movff	tablat,___flmul@a+2
  4715  00300C  000A               	tblrd		*-
  4716  00300E  CFF5 F04B          	movff	tablat,___flmul@a+3
  4717  003012  C091  F044         	movff	_fround$1929,___flmul@b
  4718  003016  C092  F045         	movff	_fround$1929+1,___flmul@b+1
  4719  00301A  C093  F046         	movff	_fround$1929+2,___flmul@b+2
  4720  00301E  C094  F047         	movff	_fround$1929+3,___flmul@b+3
  4721  003022  ECE2  F012         	call	___flmul	;wreg free
  4722  003026  C044  F08D         	movff	?___flmul,_fround$1930
  4723  00302A  C045  F08E         	movff	?___flmul+1,_fround$1930+1
  4724  00302E  C046  F08F         	movff	?___flmul+2,_fround$1930+2
  4725  003032  C047  F090         	movff	?___flmul+3,_fround$1930+3
  4726                           
  4727                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  4728  003036  C08D  F044         	movff	_fround$1930,___flmul@b
  4729  00303A  C08E  F045         	movff	_fround$1930+1,___flmul@b+1
  4730  00303E  C08F  F046         	movff	_fround$1930+2,___flmul@b+2
  4731  003042  C090  F047         	movff	_fround$1930+3,___flmul@b+3
  4732  003046  0E00               	movlw	0
  4733  003048  6E48               	movwf	___flmul@a,c
  4734  00304A  0E00               	movlw	0
  4735  00304C  6E49               	movwf	___flmul@a+1,c
  4736  00304E  0E00               	movlw	0
  4737  003050  6E4A               	movwf	___flmul@a+2,c
  4738  003052  0E3F               	movlw	63
  4739  003054  6E4B               	movwf	___flmul@a+3,c
  4740  003056  ECE2  F012         	call	___flmul	;wreg free
  4741  00305A  C044  F050         	movff	?___flmul,?_fround
  4742  00305E  C045  F051         	movff	?___flmul+1,?_fround+1
  4743  003062  C046  F052         	movff	?___flmul+2,?_fround+2
  4744  003066  C047  F053         	movff	?___flmul+3,?_fround+3
  4745  00306A  0012               	return	
  4746  00306C                     l431:
  4747                           
  4748                           ;doprnt.c: 415: else if(prec > 10)
  4749  00306C  0E0A               	movlw	10
  4750  00306E  0100               	movlb	0	; () banked
  4751  003070  6595               	cpfsgt	fround@prec& (0+255),b
  4752  003072  D06B               	goto	l434
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4756  003074  0E00               	movlw	0
  4757  003076  6E1A               	movwf	___awmod@divisor+1,c
  4758  003078  0E0A               	movlw	10
  4759  00307A  6E19               	movwf	___awmod@divisor,c
  4760  00307C  C095  F017         	movff	fround@prec,___awmod@dividend
  4761  003080  6A18               	clrf	___awmod@dividend+1,c
  4762  003082  EC63  F01E         	call	___awmod	;wreg free
  4763  003086  90D8               	bcf	status,0,c
  4764  003088  3617               	rlcf	?___awmod,f,c
  4765  00308A  3618               	rlcf	?___awmod+1,f,c
  4766  00308C  90D8               	bcf	status,0,c
  4767  00308E  3617               	rlcf	?___awmod,f,c
  4768  003090  3618               	rlcf	?___awmod+1,f,c
  4769  003092  0E35               	movlw	low __npowers_
  4770  003094  2417               	addwf	?___awmod,w,c
  4771  003096  6EF6               	movwf	tblptrl,c
  4772  003098  0E10               	movlw	high __npowers_
  4773  00309A  2018               	addwfc	?___awmod+1,w,c
  4774  00309C  6EF7               	movwf	tblptrh,c
  4775  00309E                     	if	0	;There are less than 3 active tblptr bytes
  4776  00309E                     	endif
  4777  00309E  0009               	tblrd		*+
  4778  0030A0  CFF5 F048          	movff	tablat,___flmul@a
  4779  0030A4  0009               	tblrd		*+
  4780  0030A6  CFF5 F049          	movff	tablat,___flmul@a+1
  4781  0030AA  0009               	tblrd		*+
  4782  0030AC  CFF5 F04A          	movff	tablat,___flmul@a+2
  4783  0030B0  000A               	tblrd		*-
  4784  0030B2  CFF5 F04B          	movff	tablat,___flmul@a+3
  4785  0030B6  0E00               	movlw	0
  4786  0030B8  6E20               	movwf	___awdiv@divisor+1,c
  4787  0030BA  0E0A               	movlw	10
  4788  0030BC  6E1F               	movwf	___awdiv@divisor,c
  4789  0030BE  C095  F01D         	movff	fround@prec,___awdiv@dividend
  4790  0030C2  6A1E               	clrf	___awdiv@dividend+1,c
  4791  0030C4  EC9F  F01D         	call	___awdiv	;wreg free
  4792  0030C8  90D8               	bcf	status,0,c
  4793  0030CA  361D               	rlcf	?___awdiv,f,c
  4794  0030CC  361E               	rlcf	?___awdiv+1,f,c
  4795  0030CE  90D8               	bcf	status,0,c
  4796  0030D0  361D               	rlcf	?___awdiv,f,c
  4797  0030D2  361E               	rlcf	?___awdiv+1,f,c
  4798  0030D4  0E24               	movlw	36
  4799  0030D6  261D               	addwf	?___awdiv,f,c
  4800  0030D8  0E00               	movlw	0
  4801  0030DA  221E               	addwfc	?___awdiv+1,f,c
  4802  0030DC  0E35               	movlw	low __npowers_
  4803  0030DE  241D               	addwf	?___awdiv,w,c
  4804  0030E0  6EF6               	movwf	tblptrl,c
  4805  0030E2  0E10               	movlw	high __npowers_
  4806  0030E4  201E               	addwfc	?___awdiv+1,w,c
  4807  0030E6  6EF7               	movwf	tblptrh,c
  4808  0030E8                     	if	0	;There are less than 3 active tblptr bytes
  4809  0030E8                     	endif
  4810  0030E8  0009               	tblrd		*+
  4811  0030EA  CFF5 F044          	movff	tablat,___flmul@b
  4812  0030EE  0009               	tblrd		*+
  4813  0030F0  CFF5 F045          	movff	tablat,___flmul@b+1
  4814  0030F4  0009               	tblrd		*+
  4815  0030F6  CFF5 F046          	movff	tablat,___flmul@b+2
  4816  0030FA  000A               	tblrd		*-
  4817  0030FC  CFF5 F047          	movff	tablat,___flmul@b+3
  4818  003100  ECE2  F012         	call	___flmul	;wreg free
  4819  003104  C044  F091         	movff	?___flmul,_fround$1929
  4820  003108  C045  F092         	movff	?___flmul+1,_fround$1929+1
  4821  00310C  C046  F093         	movff	?___flmul+2,_fround$1929+2
  4822  003110  C047  F094         	movff	?___flmul+3,_fround$1929+3
  4823                           
  4824                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  4825  003114  C091  F044         	movff	_fround$1929,___flmul@b
  4826  003118  C092  F045         	movff	_fround$1929+1,___flmul@b+1
  4827  00311C  C093  F046         	movff	_fround$1929+2,___flmul@b+2
  4828  003120  C094  F047         	movff	_fround$1929+3,___flmul@b+3
  4829  003124  0E00               	movlw	0
  4830  003126  6E48               	movwf	___flmul@a,c
  4831  003128  0E00               	movlw	0
  4832  00312A  6E49               	movwf	___flmul@a+1,c
  4833  00312C  0E00               	movlw	0
  4834  00312E  6E4A               	movwf	___flmul@a+2,c
  4835  003130  0E3F               	movlw	63
  4836  003132  6E4B               	movwf	___flmul@a+3,c
  4837  003134  ECE2  F012         	call	___flmul	;wreg free
  4838  003138  C044  F050         	movff	?___flmul,?_fround
  4839  00313C  C045  F051         	movff	?___flmul+1,?_fround+1
  4840  003140  C046  F052         	movff	?___flmul+2,?_fround+2
  4841  003144  C047  F053         	movff	?___flmul+3,?_fround+3
  4842  003148  0012               	return	
  4843  00314A                     l434:
  4844                           
  4845                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  4846  00314A  0100               	movlb	0	; () banked
  4847  00314C  5195               	movf	fround@prec& (0+255),w,b
  4848  00314E  0D04               	mullw	4
  4849  003150  0E35               	movlw	low __npowers_
  4850  003152  24F3               	addwf	prodl,w,c
  4851  003154  6EF6               	movwf	tblptrl,c
  4852  003156  0E10               	movlw	high __npowers_
  4853  003158  20F4               	addwfc	prodh,w,c
  4854  00315A  6EF7               	movwf	tblptrh,c
  4855  00315C                     	if	0	;There are less than 3 active tblptr bytes
  4856  00315C                     	endif
  4857  00315C  0009               	tblrd		*+
  4858  00315E  CFF5 F044          	movff	tablat,___flmul@b
  4859  003162  0009               	tblrd		*+
  4860  003164  CFF5 F045          	movff	tablat,___flmul@b+1
  4861  003168  0009               	tblrd		*+
  4862  00316A  CFF5 F046          	movff	tablat,___flmul@b+2
  4863  00316E  000A               	tblrd		*-
  4864  003170  CFF5 F047          	movff	tablat,___flmul@b+3
  4865  003174  0E00               	movlw	0
  4866  003176  6E48               	movwf	___flmul@a,c
  4867  003178  0E00               	movlw	0
  4868  00317A  6E49               	movwf	___flmul@a+1,c
  4869  00317C  0E00               	movlw	0
  4870  00317E  6E4A               	movwf	___flmul@a+2,c
  4871  003180  0E3F               	movlw	63
  4872  003182  6E4B               	movwf	___flmul@a+3,c
  4873  003184  ECE2  F012         	call	___flmul	;wreg free
  4874  003188  C044  F050         	movff	?___flmul,?_fround
  4875  00318C  C045  F051         	movff	?___flmul+1,?_fround+1
  4876  003190  C046  F052         	movff	?___flmul+2,?_fround+2
  4877  003194  C047  F053         	movff	?___flmul+3,?_fround+3
  4878  003198  0012               	return	
  4879  00319A                     __end_of_fround:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           postinc0	equ	0xFEE
  4888                           wreg	equ	0xFE8
  4889                           postdec1	equ	0xFE5
  4890                           fsr1l	equ	0xFE1
  4891                           indf2	equ	0xFDF
  4892                           postinc2	equ	0xFDE
  4893                           fsr2h	equ	0xFDA
  4894                           fsr2l	equ	0xFD9
  4895                           status	equ	0xFD8
  4896                           
  4897 ;; *************** function ___flmul *****************
  4898 ;; Defined at:
  4899 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  4900 ;; Parameters:    Size  Location     Type
  4901 ;;  b               4   67[COMRAM] unsigned char 
  4902 ;;  a               4   71[COMRAM] unsigned char 
  4903 ;; Auto vars:     Size  Location     Type
  4904 ;;  prod            4    7[BANK0 ] struct .
  4905 ;;  grs             4    2[BANK0 ] unsigned long 
  4906 ;;  temp            2   11[BANK0 ] struct .
  4907 ;;  bexp            1    6[BANK0 ] unsigned char 
  4908 ;;  aexp            1    1[BANK0 ] unsigned char 
  4909 ;;  sign            1    0[BANK0 ] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  4   67[COMRAM] unsigned char 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0, prodl, prodh
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4919 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4920 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4921 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4922 ;;      Totals:        12      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4923 ;;Total ram usage:       25 bytes
  4924 ;; Hardware stack levels used:    1
  4925 ;; Hardware stack levels required when called:    3
  4926 ;; This function calls:
  4927 ;;		Nothing
  4928 ;; This function is called by:
  4929 ;;		_main
  4930 ;;		_fround
  4931 ;;		_scale
  4932 ;;		_sprintf
  4933 ;;		_set_pwm1_percent
  4934 ;;		_set_pwm1_voltage
  4935 ;;		_set_pwm1_general
  4936 ;; This function uses a non-reentrant model
  4937 ;;
  4938                           
  4939                           	psect	text5
  4940  0025C4                     __ptext5:
  4941                           	opt stack 0
  4942  0025C4                     ___flmul:
  4943                           	opt stack 25
  4944                           
  4945                           ;incstack = 0
  4946  0025C4  5047               	movf	___flmul@b+3,w,c
  4947  0025C6  0B80               	andlw	128
  4948  0025C8  0100               	movlb	0	; () banked
  4949  0025CA  6F80               	movwf	___flmul@sign& (0+255),b
  4950  0025CC  5047               	movf	___flmul@b+3,w,c
  4951  0025CE  2447               	addwf	___flmul@b+3,w,c
  4952  0025D0  6F86               	movwf	___flmul@bexp& (0+255),b
  4953                           
  4954                           ; BSR set to: 0
  4955  0025D2  BE46               	btfsc	___flmul@b+2,7,c
  4956                           
  4957                           ; BSR set to: 0
  4958  0025D4  8186               	bsf	___flmul@bexp& (0+255),0,b
  4959                           
  4960                           ; BSR set to: 0
  4961                           
  4962                           ; BSR set to: 0
  4963  0025D6  5186               	movf	___flmul@bexp& (0+255),w,b
  4964  0025D8  B4D8               	btfsc	status,2,c
  4965  0025DA  D00D               	goto	l1103
  4966                           
  4967                           ; BSR set to: 0
  4968  0025DC  2986               	incf	___flmul@bexp& (0+255),w,b
  4969  0025DE  A4D8               	btfss	status,2,c
  4970  0025E0  D008               	goto	l1104
  4971                           
  4972                           ; BSR set to: 0
  4973  0025E2  0E00               	movlw	0
  4974  0025E4  6E44               	movwf	___flmul@b,c
  4975  0025E6  0E00               	movlw	0
  4976  0025E8  6E45               	movwf	___flmul@b+1,c
  4977  0025EA  0E00               	movlw	0
  4978  0025EC  6E46               	movwf	___flmul@b+2,c
  4979  0025EE  0E00               	movlw	0
  4980  0025F0  6E47               	movwf	___flmul@b+3,c
  4981  0025F2                     l1104:
  4982                           
  4983                           ; BSR set to: 0
  4984                           
  4985                           ; BSR set to: 0
  4986  0025F2  8E46               	bsf	___flmul@b+2,7,c
  4987  0025F4  D008               	goto	l1105
  4988  0025F6                     l1103:
  4989                           
  4990                           ; BSR set to: 0
  4991                           
  4992                           ; BSR set to: 0
  4993  0025F6  0E00               	movlw	0
  4994  0025F8  6E44               	movwf	___flmul@b,c
  4995  0025FA  0E00               	movlw	0
  4996  0025FC  6E45               	movwf	___flmul@b+1,c
  4997  0025FE  0E00               	movlw	0
  4998  002600  6E46               	movwf	___flmul@b+2,c
  4999  002602  0E00               	movlw	0
  5000  002604  6E47               	movwf	___flmul@b+3,c
  5001  002606                     l1105:
  5002                           
  5003                           ; BSR set to: 0
  5004                           
  5005                           ; BSR set to: 0
  5006  002606  504B               	movf	___flmul@a+3,w,c
  5007  002608  0B80               	andlw	128
  5008  00260A  1B80               	xorwf	___flmul@sign& (0+255),f,b
  5009                           
  5010                           ; BSR set to: 0
  5011  00260C  504B               	movf	___flmul@a+3,w,c
  5012  00260E  244B               	addwf	___flmul@a+3,w,c
  5013  002610  6F81               	movwf	___flmul@aexp& (0+255),b
  5014                           
  5015                           ; BSR set to: 0
  5016  002612  BE4A               	btfsc	___flmul@a+2,7,c
  5017                           
  5018                           ; BSR set to: 0
  5019  002614  8181               	bsf	___flmul@aexp& (0+255),0,b
  5020                           
  5021                           ; BSR set to: 0
  5022                           
  5023                           ; BSR set to: 0
  5024  002616  5181               	movf	___flmul@aexp& (0+255),w,b
  5025  002618  B4D8               	btfsc	status,2,c
  5026  00261A  D00D               	goto	l1107
  5027                           
  5028                           ; BSR set to: 0
  5029  00261C  2981               	incf	___flmul@aexp& (0+255),w,b
  5030  00261E  A4D8               	btfss	status,2,c
  5031  002620  D008               	goto	l1108
  5032                           
  5033                           ; BSR set to: 0
  5034  002622  0E00               	movlw	0
  5035  002624  6E48               	movwf	___flmul@a,c
  5036  002626  0E00               	movlw	0
  5037  002628  6E49               	movwf	___flmul@a+1,c
  5038  00262A  0E00               	movlw	0
  5039  00262C  6E4A               	movwf	___flmul@a+2,c
  5040  00262E  0E00               	movlw	0
  5041  002630  6E4B               	movwf	___flmul@a+3,c
  5042  002632                     l1108:
  5043                           
  5044                           ; BSR set to: 0
  5045                           
  5046                           ; BSR set to: 0
  5047  002632  8E4A               	bsf	___flmul@a+2,7,c
  5048  002634  D008               	goto	l1109
  5049  002636                     l1107:
  5050                           
  5051                           ; BSR set to: 0
  5052                           
  5053                           ; BSR set to: 0
  5054  002636  0E00               	movlw	0
  5055  002638  6E48               	movwf	___flmul@a,c
  5056  00263A  0E00               	movlw	0
  5057  00263C  6E49               	movwf	___flmul@a+1,c
  5058  00263E  0E00               	movlw	0
  5059  002640  6E4A               	movwf	___flmul@a+2,c
  5060  002642  0E00               	movlw	0
  5061  002644  6E4B               	movwf	___flmul@a+3,c
  5062  002646                     l1109:
  5063                           
  5064                           ; BSR set to: 0
  5065  002646  5181               	movf	___flmul@aexp& (0+255),w,b
  5066  002648  B4D8               	btfsc	status,2,c
  5067  00264A  D003               	goto	u5900
  5068                           
  5069                           ; BSR set to: 0
  5070  00264C  5186               	movf	___flmul@bexp& (0+255),w,b
  5071  00264E  A4D8               	btfss	status,2,c
  5072  002650  D009               	goto	l1110
  5073  002652                     u5900:
  5074                           
  5075                           ; BSR set to: 0
  5076                           
  5077                           ; BSR set to: 0
  5078  002652  0E00               	movlw	0
  5079  002654  6E44               	movwf	?___flmul,c
  5080  002656  0E00               	movlw	0
  5081  002658  6E45               	movwf	?___flmul+1,c
  5082  00265A  0E00               	movlw	0
  5083  00265C  6E46               	movwf	?___flmul+2,c
  5084  00265E  0E00               	movlw	0
  5085  002660  6E47               	movwf	?___flmul+3,c
  5086                           
  5087                           ; BSR set to: 0
  5088  002662  0012               	return	
  5089  002664                     l1110:
  5090                           
  5091                           ; BSR set to: 0
  5092                           
  5093                           ; BSR set to: 0
  5094  002664  504A               	movf	___flmul@a+2,w,c
  5095  002666  0244               	mulwf	___flmul@b,c
  5096  002668  CFF3 F08B          	movff	prodl,___flmul@temp
  5097  00266C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5098                           
  5099                           ; BSR set to: 0
  5100  002670  518B               	movf	___flmul@temp& (0+255),w,b
  5101  002672  6F82               	movwf	___flmul@grs& (0+255),b
  5102  002674  6B83               	clrf	(___flmul@grs+1)& (0+255),b
  5103  002676  6B84               	clrf	(___flmul@grs+2)& (0+255),b
  5104  002678  6B85               	clrf	(___flmul@grs+3)& (0+255),b
  5105                           
  5106                           ; BSR set to: 0
  5107  00267A  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5108  00267C  6F87               	movwf	___flmul@prod& (0+255),b
  5109  00267E  6B88               	clrf	(___flmul@prod+1)& (0+255),b
  5110  002680  6B89               	clrf	(___flmul@prod+2)& (0+255),b
  5111  002682  6B8A               	clrf	(___flmul@prod+3)& (0+255),b
  5112  002684  5049               	movf	___flmul@a+1,w,c
  5113  002686  0245               	mulwf	___flmul@b+1,c
  5114  002688  CFF3 F08B          	movff	prodl,___flmul@temp
  5115  00268C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5116                           
  5117                           ; BSR set to: 0
  5118  002690  518B               	movf	___flmul@temp& (0+255),w,b
  5119  002692  2782               	addwf	___flmul@grs& (0+255),f,b
  5120  002694  0E00               	movlw	0
  5121  002696  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  5122  002698  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  5123  00269A  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  5124                           
  5125                           ; BSR set to: 0
  5126  00269C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5127  00269E  2787               	addwf	___flmul@prod& (0+255),f,b
  5128  0026A0  0E00               	movlw	0
  5129  0026A2  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5130  0026A4  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5131  0026A6  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5132  0026A8  5048               	movf	___flmul@a,w,c
  5133  0026AA  0246               	mulwf	___flmul@b+2,c
  5134  0026AC  CFF3 F08B          	movff	prodl,___flmul@temp
  5135  0026B0  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5136                           
  5137                           ; BSR set to: 0
  5138  0026B4  518B               	movf	___flmul@temp& (0+255),w,b
  5139  0026B6  2782               	addwf	___flmul@grs& (0+255),f,b
  5140  0026B8  0E00               	movlw	0
  5141  0026BA  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  5142  0026BC  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  5143  0026BE  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  5144                           
  5145                           ; BSR set to: 0
  5146  0026C0  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5147  0026C2  2787               	addwf	___flmul@prod& (0+255),f,b
  5148  0026C4  0E00               	movlw	0
  5149  0026C6  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5150  0026C8  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5151  0026CA  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5152                           
  5153                           ; BSR set to: 0
  5154  0026CC  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  5155  0026D0  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  5156  0026D4  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  5157  0026D8  6B82               	clrf	___flmul@grs& (0+255),b
  5158                           
  5159                           ; BSR set to: 0
  5160  0026DA  5048               	movf	___flmul@a,w,c
  5161  0026DC  0245               	mulwf	___flmul@b+1,c
  5162  0026DE  CFF3 F08B          	movff	prodl,___flmul@temp
  5163  0026E2  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5164                           
  5165                           ; BSR set to: 0
  5166  0026E6  518B               	movf	___flmul@temp& (0+255),w,b
  5167  0026E8  2782               	addwf	___flmul@grs& (0+255),f,b
  5168  0026EA  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5169  0026EC  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  5170  0026EE  0E00               	movlw	0
  5171  0026F0  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  5172  0026F2  0E00               	movlw	0
  5173  0026F4  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  5174                           
  5175                           ; BSR set to: 0
  5176  0026F6  5049               	movf	___flmul@a+1,w,c
  5177  0026F8  0244               	mulwf	___flmul@b,c
  5178  0026FA  CFF3 F08B          	movff	prodl,___flmul@temp
  5179  0026FE  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5180                           
  5181                           ; BSR set to: 0
  5182  002702  518B               	movf	___flmul@temp& (0+255),w,b
  5183  002704  2782               	addwf	___flmul@grs& (0+255),f,b
  5184  002706  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5185  002708  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  5186  00270A  0E00               	movlw	0
  5187  00270C  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  5188  00270E  0E00               	movlw	0
  5189  002710  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  5190                           
  5191                           ; BSR set to: 0
  5192  002712  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  5193  002716  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  5194  00271A  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  5195  00271E  6B82               	clrf	___flmul@grs& (0+255),b
  5196  002720  5048               	movf	___flmul@a,w,c
  5197  002722  0244               	mulwf	___flmul@b,c
  5198  002724  CFF3 F08B          	movff	prodl,___flmul@temp
  5199  002728  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5200                           
  5201                           ; BSR set to: 0
  5202  00272C  518B               	movf	___flmul@temp& (0+255),w,b
  5203  00272E  2782               	addwf	___flmul@grs& (0+255),f,b
  5204  002730  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5205  002732  2383               	addwfc	(___flmul@grs+1)& (0+255),f,b
  5206  002734  0E00               	movlw	0
  5207  002736  2384               	addwfc	(___flmul@grs+2)& (0+255),f,b
  5208  002738  0E00               	movlw	0
  5209  00273A  2385               	addwfc	(___flmul@grs+3)& (0+255),f,b
  5210                           
  5211                           ; BSR set to: 0
  5212  00273C  504A               	movf	___flmul@a+2,w,c
  5213  00273E  0245               	mulwf	___flmul@b+1,c
  5214  002740  CFF3 F08B          	movff	prodl,___flmul@temp
  5215  002744  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5216  002748  518B               	movf	___flmul@temp& (0+255),w,b
  5217  00274A  2787               	addwf	___flmul@prod& (0+255),f,b
  5218  00274C  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5219  00274E  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5220  002750  0E00               	movlw	0
  5221  002752  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5222  002754  0E00               	movlw	0
  5223  002756  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5224                           
  5225                           ; BSR set to: 0
  5226  002758  5049               	movf	___flmul@a+1,w,c
  5227  00275A  0246               	mulwf	___flmul@b+2,c
  5228  00275C  CFF3 F08B          	movff	prodl,___flmul@temp
  5229  002760  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5230                           
  5231                           ; BSR set to: 0
  5232  002764  518B               	movf	___flmul@temp& (0+255),w,b
  5233  002766  2787               	addwf	___flmul@prod& (0+255),f,b
  5234  002768  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5235  00276A  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5236  00276C  0E00               	movlw	0
  5237  00276E  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5238  002770  0E00               	movlw	0
  5239  002772  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5240  002774  504A               	movf	___flmul@a+2,w,c
  5241  002776  0246               	mulwf	___flmul@b+2,c
  5242  002778  CFF3 F08B          	movff	prodl,___flmul@temp
  5243  00277C  CFF4 F08C          	movff	prodh,___flmul@temp+1
  5244                           
  5245                           ; BSR set to: 0
  5246  002780  518B               	movf	___flmul@temp& (0+255),w,b
  5247  002782  6E4C               	movwf	??___flmul& (0+255),c
  5248  002784  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5249  002786  6E4D               	movwf	(??___flmul+1)& (0+255),c
  5250  002788  6A4E               	clrf	(??___flmul+2)& (0+255),c
  5251  00278A  6A4F               	clrf	(??___flmul+3)& (0+255),c
  5252  00278C  C04E  F04F         	movff	??___flmul+2,??___flmul+3
  5253  002790  C04D  F04E         	movff	??___flmul+1,??___flmul+2
  5254  002794  C04C  F04D         	movff	??___flmul,??___flmul+1
  5255  002798  6A4C               	clrf	??___flmul,c
  5256  00279A  504C               	movf	??___flmul,w,c
  5257  00279C  2787               	addwf	___flmul@prod& (0+255),f,b
  5258  00279E  504D               	movf	??___flmul+1,w,c
  5259  0027A0  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5260  0027A2  504E               	movf	??___flmul+2,w,c
  5261  0027A4  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5262  0027A6  504F               	movf	??___flmul+3,w,c
  5263  0027A8  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5264                           
  5265                           ; BSR set to: 0
  5266  0027AA  C082  F04C         	movff	___flmul@grs,??___flmul
  5267  0027AE  C083  F04D         	movff	___flmul@grs+1,??___flmul+1
  5268  0027B2  C084  F04E         	movff	___flmul@grs+2,??___flmul+2
  5269  0027B6  C085  F04F         	movff	___flmul@grs+3,??___flmul+3
  5270  0027BA  0E19               	movlw	25
  5271  0027BC  D005               	goto	u5910
  5272  0027BE                     u5915:
  5273  0027BE  90D8               	bcf	status,0,c
  5274  0027C0  324F               	rrcf	??___flmul+3,f,c
  5275  0027C2  324E               	rrcf	??___flmul+2,f,c
  5276  0027C4  324D               	rrcf	??___flmul+1,f,c
  5277  0027C6  324C               	rrcf	??___flmul,f,c
  5278  0027C8                     u5910:
  5279  0027C8  2EE8               	decfsz	wreg,f,c
  5280  0027CA  D7F9               	goto	u5915
  5281  0027CC  504C               	movf	??___flmul,w,c
  5282  0027CE  2787               	addwf	___flmul@prod& (0+255),f,b
  5283  0027D0  504D               	movf	??___flmul+1,w,c
  5284  0027D2  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5285  0027D4  504E               	movf	??___flmul+2,w,c
  5286  0027D6  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5287  0027D8  504F               	movf	??___flmul+3,w,c
  5288  0027DA  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5289                           
  5290                           ; BSR set to: 0
  5291  0027DC  C084  F085         	movff	___flmul@grs+2,___flmul@grs+3
  5292  0027E0  C083  F084         	movff	___flmul@grs+1,___flmul@grs+2
  5293  0027E4  C082  F083         	movff	___flmul@grs,___flmul@grs+1
  5294  0027E8  6B82               	clrf	___flmul@grs& (0+255),b
  5295                           
  5296                           ; BSR set to: 0
  5297  0027EA  5181               	movf	___flmul@aexp& (0+255),w,b
  5298  0027EC  C086  F04C         	movff	___flmul@bexp,??___flmul
  5299  0027F0  6A4D               	clrf	(??___flmul+1)& (0+255),c
  5300  0027F2  264C               	addwf	??___flmul,f,c
  5301  0027F4  0E00               	movlw	0
  5302  0027F6  224D               	addwfc	??___flmul+1,f,c
  5303  0027F8  0E82               	movlw	130
  5304  0027FA  244C               	addwf	??___flmul,w,c
  5305  0027FC  6F8B               	movwf	___flmul@temp& (0+255),b
  5306  0027FE  0EFF               	movlw	255
  5307  002800  204D               	addwfc	??___flmul+1,w,c
  5308  002802  6F8C               	movwf	(___flmul@temp+1)& (0+255),b
  5309  002804  D00F               	goto	l1114
  5310  002806                     
  5311                           ; BSR set to: 0
  5312                           
  5313                           ; BSR set to: 0
  5314  002806  90D8               	bcf	status,0,c
  5315  002808  3787               	rlcf	___flmul@prod& (0+255),f,b
  5316  00280A  3788               	rlcf	(___flmul@prod+1)& (0+255),f,b
  5317  00280C  3789               	rlcf	(___flmul@prod+2)& (0+255),f,b
  5318  00280E  378A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  5319                           
  5320                           ; BSR set to: 0
  5321  002810  BF85               	btfsc	(___flmul@grs+3)& (0+255),7,b
  5322                           
  5323                           ; BSR set to: 0
  5324  002812  8187               	bsf	___flmul@prod& (0+255),0,b
  5325                           
  5326                           ; BSR set to: 0
  5327  002814  90D8               	bcf	status,0,c
  5328  002816  3782               	rlcf	___flmul@grs& (0+255),f,b
  5329  002818  3783               	rlcf	(___flmul@grs+1)& (0+255),f,b
  5330  00281A  3784               	rlcf	(___flmul@grs+2)& (0+255),f,b
  5331  00281C  3785               	rlcf	(___flmul@grs+3)& (0+255),f,b
  5332  00281E  078B               	decf	___flmul@temp& (0+255),f,b
  5333  002820  A0D8               	btfss	status,0,c
  5334  002822  078C               	decf	(___flmul@temp+1)& (0+255),f,b
  5335  002824                     l1114:
  5336                           
  5337                           ; BSR set to: 0
  5338                           
  5339                           ; BSR set to: 0
  5340  002824  AF89               	btfss	(___flmul@prod+2)& (0+255),7,b
  5341  002826  D7EF               	goto	l1115
  5342                           
  5343                           ; BSR set to: 0
  5344                           
  5345                           ; BSR set to: 0
  5346  002828  0E00               	movlw	0
  5347  00282A  6F81               	movwf	___flmul@aexp& (0+255),b
  5348                           
  5349                           ; BSR set to: 0
  5350  00282C  AF85               	btfss	(___flmul@grs+3)& (0+255),7,b
  5351  00282E  D016               	goto	l1121
  5352                           
  5353                           ; BSR set to: 0
  5354  002830  0EFF               	movlw	255
  5355  002832  1582               	andwf	___flmul@grs& (0+255),w,b
  5356  002834  6E4C               	movwf	??___flmul& (0+255),c
  5357  002836  0EFF               	movlw	255
  5358  002838  1583               	andwf	(___flmul@grs+1)& (0+255),w,b
  5359  00283A  6E4D               	movwf	(??___flmul+1)& (0+255),c
  5360  00283C  0EFF               	movlw	255
  5361  00283E  1584               	andwf	(___flmul@grs+2)& (0+255),w,b
  5362  002840  6E4E               	movwf	(??___flmul+2)& (0+255),c
  5363  002842  0E7F               	movlw	127
  5364  002844  1585               	andwf	(___flmul@grs+3)& (0+255),w,b
  5365  002846  6E4F               	movwf	(??___flmul+3)& (0+255),c
  5366  002848  504C               	movf	??___flmul,w,c
  5367  00284A  104D               	iorwf	??___flmul+1,w,c
  5368  00284C  104E               	iorwf	??___flmul+2,w,c
  5369  00284E  104F               	iorwf	??___flmul+3,w,c
  5370  002850  A4D8               	btfss	status,2,c
  5371  002852  D002               	goto	u5960
  5372                           
  5373                           ; BSR set to: 0
  5374                           
  5375                           ; BSR set to: 0
  5376  002854  A187               	btfss	___flmul@prod& (0+255),0,b
  5377  002856  D002               	goto	l1121
  5378  002858                     u5960:
  5379                           
  5380                           ; BSR set to: 0
  5381  002858  0E01               	movlw	1
  5382  00285A  6F81               	movwf	___flmul@aexp& (0+255),b
  5383  00285C                     l1121:
  5384                           
  5385                           ; BSR set to: 0
  5386                           
  5387                           ; BSR set to: 0
  5388                           
  5389                           ; BSR set to: 0
  5390  00285C  5181               	movf	___flmul@aexp& (0+255),w,b
  5391  00285E  B4D8               	btfsc	status,2,c
  5392  002860  D01F               	goto	l1123
  5393                           
  5394                           ; BSR set to: 0
  5395  002862  0E01               	movlw	1
  5396  002864  2787               	addwf	___flmul@prod& (0+255),f,b
  5397  002866  0E00               	movlw	0
  5398  002868  2388               	addwfc	(___flmul@prod+1)& (0+255),f,b
  5399  00286A  2389               	addwfc	(___flmul@prod+2)& (0+255),f,b
  5400  00286C  238A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  00286E  A18A               	btfss	(___flmul@prod+3)& (0+255),0,b
  5404  002870  D017               	goto	l1123
  5405                           
  5406                           ; BSR set to: 0
  5407  002872  C087  F04C         	movff	___flmul@prod,??___flmul
  5408  002876  C088  F04D         	movff	___flmul@prod+1,??___flmul+1
  5409  00287A  C089  F04E         	movff	___flmul@prod+2,??___flmul+2
  5410  00287E  C08A  F04F         	movff	___flmul@prod+3,??___flmul+3
  5411  002882  344F               	rlcf	??___flmul+3,w,c
  5412  002884  324F               	rrcf	??___flmul+3,f,c
  5413  002886  324E               	rrcf	??___flmul+2,f,c
  5414  002888  324D               	rrcf	??___flmul+1,f,c
  5415  00288A  324C               	rrcf	??___flmul,f,c
  5416  00288C  C04C  F087         	movff	??___flmul,___flmul@prod
  5417  002890  C04D  F088         	movff	??___flmul+1,___flmul@prod+1
  5418  002894  C04E  F089         	movff	??___flmul+2,___flmul@prod+2
  5419  002898  C04F  F08A         	movff	??___flmul+3,___flmul@prod+3
  5420                           
  5421                           ; BSR set to: 0
  5422  00289C  4B8B               	infsnz	___flmul@temp& (0+255),f,b
  5423  00289E  2B8C               	incf	(___flmul@temp+1)& (0+255),f,b
  5424  0028A0                     l1123:
  5425                           
  5426                           ; BSR set to: 0
  5427                           
  5428                           ; BSR set to: 0
  5429                           
  5430                           ; BSR set to: 0
  5431  0028A0  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  5432  0028A2  D00D               	goto	l1124
  5433  0028A4  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5434  0028A6  E103               	bnz	u5990
  5435  0028A8  298B               	incf	___flmul@temp& (0+255),w,b
  5436  0028AA  A0D8               	btfss	status,0,c
  5437  0028AC  D008               	goto	l1124
  5438  0028AE                     u5990:
  5439                           
  5440                           ; BSR set to: 0
  5441  0028AE  0E00               	movlw	0
  5442  0028B0  6F87               	movwf	___flmul@prod& (0+255),b
  5443  0028B2  0E00               	movlw	0
  5444  0028B4  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  5445  0028B6  0E80               	movlw	128
  5446  0028B8  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  5447  0028BA  0E7F               	movlw	127
  5448  0028BC  D020               	goto	L5
  5449  0028BE                     l1124:
  5450                           
  5451                           ; BSR set to: 0
  5452                           
  5453                           ; BSR set to: 0
  5454  0028BE  BF8C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  5455  0028C0  D005               	goto	u6000
  5456  0028C2  518C               	movf	(___flmul@temp+1)& (0+255),w,b
  5457  0028C4  E10E               	bnz	l1126
  5458  0028C6  058B               	decf	___flmul@temp& (0+255),w,b
  5459  0028C8  B0D8               	btfsc	status,0,c
  5460  0028CA  D00B               	goto	l1126
  5461  0028CC                     u6000:
  5462                           
  5463                           ; BSR set to: 0
  5464  0028CC  0E00               	movlw	0
  5465  0028CE  6F87               	movwf	___flmul@prod& (0+255),b
  5466  0028D0  0E00               	movlw	0
  5467  0028D2  6F88               	movwf	(___flmul@prod+1)& (0+255),b
  5468  0028D4  0E00               	movlw	0
  5469  0028D6  6F89               	movwf	(___flmul@prod+2)& (0+255),b
  5470  0028D8  0E00               	movlw	0
  5471  0028DA  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  5472  0028DC  0E00               	movlw	0
  5473  0028DE  6F80               	movwf	___flmul@sign& (0+255),b
  5474  0028E0  D00F               	goto	l1127
  5475  0028E2                     l1126:
  5476                           
  5477                           ; BSR set to: 0
  5478  0028E2  C08B  F086         	movff	___flmul@temp,___flmul@bexp
  5479                           
  5480                           ; BSR set to: 0
  5481  0028E6  0EFF               	movlw	255
  5482  0028E8  1787               	andwf	___flmul@prod& (0+255),f,b
  5483  0028EA  0EFF               	movlw	255
  5484  0028EC  1788               	andwf	(___flmul@prod+1)& (0+255),f,b
  5485  0028EE  0E7F               	movlw	127
  5486  0028F0  1789               	andwf	(___flmul@prod+2)& (0+255),f,b
  5487  0028F2  0E00               	movlw	0
  5488  0028F4  178A               	andwf	(___flmul@prod+3)& (0+255),f,b
  5489                           
  5490                           ; BSR set to: 0
  5491  0028F6  B186               	btfsc	___flmul@bexp& (0+255),0,b
  5492                           
  5493                           ; BSR set to: 0
  5494  0028F8  8F89               	bsf	(___flmul@prod+2)& (0+255),7,b
  5495                           
  5496                           ; BSR set to: 0
  5497                           
  5498                           ; BSR set to: 0
  5499  0028FA  90D8               	bcf	status,0,c
  5500  0028FC  3186               	rrcf	___flmul@bexp& (0+255),w,b
  5501  0028FE                     L5:
  5502  0028FE  6F8A               	movwf	(___flmul@prod+3)& (0+255),b
  5503  002900                     l1127:
  5504                           
  5505                           ; BSR set to: 0
  5506                           
  5507                           ; BSR set to: 0
  5508                           
  5509                           ; BSR set to: 0
  5510  002900  5180               	movf	___flmul@sign& (0+255),w,b
  5511  002902  138A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  5512                           
  5513                           ; BSR set to: 0
  5514  002904  C087  F044         	movff	___flmul@prod,?___flmul
  5515  002908  C088  F045         	movff	___flmul@prod+1,?___flmul+1
  5516  00290C  C089  F046         	movff	___flmul@prod+2,?___flmul+2
  5517  002910  C08A  F047         	movff	___flmul@prod+3,?___flmul+3
  5518  002914  0012               	return	
  5519  002916                     __end_of___flmul:
  5520                           	opt stack 0
  5521                           tblptru	equ	0xFF8
  5522                           tblptrh	equ	0xFF7
  5523                           tblptrl	equ	0xFF6
  5524                           tablat	equ	0xFF5
  5525                           prodh	equ	0xFF4
  5526                           prodl	equ	0xFF3
  5527                           postinc0	equ	0xFEE
  5528                           wreg	equ	0xFE8
  5529                           postdec1	equ	0xFE5
  5530                           fsr1l	equ	0xFE1
  5531                           indf2	equ	0xFDF
  5532                           postinc2	equ	0xFDE
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function ___awmod *****************
  5538 ;; Defined at:
  5539 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awmod.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;  dividend        2   22[COMRAM] int 
  5542 ;;  divisor         2   24[COMRAM] int 
  5543 ;; Auto vars:     Size  Location     Type
  5544 ;;  sign            1   27[COMRAM] unsigned char 
  5545 ;;  counter         1   26[COMRAM] unsigned char 
  5546 ;; Return value:  Size  Location     Type
  5547 ;;                  2   22[COMRAM] int 
  5548 ;; Registers used:
  5549 ;;		wreg, status,2, status,0
  5550 ;; Tracked objects:
  5551 ;;		On entry : 0/0
  5552 ;;		On exit  : 0/0
  5553 ;;		Unchanged: 0/0
  5554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5555 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;Total ram usage:        6 bytes
  5560 ;; Hardware stack levels used:    1
  5561 ;; Hardware stack levels required when called:    3
  5562 ;; This function calls:
  5563 ;;		Nothing
  5564 ;; This function is called by:
  5565 ;;		_main
  5566 ;;		_fround
  5567 ;;		_scale
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text6
  5572  003CC6                     __ptext6:
  5573                           	opt stack 0
  5574  003CC6                     ___awmod:
  5575                           	opt stack 25
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;incstack = 0
  5579  003CC6  0E00               	movlw	0
  5580  003CC8  6E1C               	movwf	___awmod@sign,c
  5581  003CCA  AE18               	btfss	___awmod@dividend+1,7,c
  5582  003CCC  D006               	goto	l721
  5583  003CCE  6C17               	negf	___awmod@dividend,c
  5584  003CD0  1E18               	comf	___awmod@dividend+1,f,c
  5585  003CD2  B0D8               	btfsc	status,0,c
  5586  003CD4  2A18               	incf	___awmod@dividend+1,f,c
  5587  003CD6  0E01               	movlw	1
  5588  003CD8  6E1C               	movwf	___awmod@sign,c
  5589  003CDA                     l721:
  5590  003CDA  AE1A               	btfss	___awmod@divisor+1,7,c
  5591  003CDC  D004               	goto	l722
  5592  003CDE  6C19               	negf	___awmod@divisor,c
  5593  003CE0  1E1A               	comf	___awmod@divisor+1,f,c
  5594  003CE2  B0D8               	btfsc	status,0,c
  5595  003CE4  2A1A               	incf	___awmod@divisor+1,f,c
  5596  003CE6                     l722:
  5597  003CE6  5019               	movf	___awmod@divisor,w,c
  5598  003CE8  101A               	iorwf	___awmod@divisor+1,w,c
  5599  003CEA  B4D8               	btfsc	status,2,c
  5600  003CEC  D018               	goto	l729
  5601  003CEE  0E01               	movlw	1
  5602  003CF0  6E1B               	movwf	___awmod@counter,c
  5603  003CF2  D004               	goto	l724
  5604  003CF4  90D8               	bcf	status,0,c
  5605  003CF6  3619               	rlcf	___awmod@divisor,f,c
  5606  003CF8  361A               	rlcf	___awmod@divisor+1,f,c
  5607  003CFA  2A1B               	incf	___awmod@counter,f,c
  5608  003CFC                     l724:
  5609  003CFC  AE1A               	btfss	___awmod@divisor+1,7,c
  5610  003CFE  D7FA               	goto	l725
  5611  003D00                     u6110:
  5612  003D00  5019               	movf	___awmod@divisor,w,c
  5613  003D02  5C17               	subwf	___awmod@dividend,w,c
  5614  003D04  501A               	movf	___awmod@divisor+1,w,c
  5615  003D06  5818               	subwfb	___awmod@dividend+1,w,c
  5616  003D08  A0D8               	btfss	status,0,c
  5617  003D0A  D004               	goto	l728
  5618  003D0C  5019               	movf	___awmod@divisor,w,c
  5619  003D0E  5E17               	subwf	___awmod@dividend,f,c
  5620  003D10  501A               	movf	___awmod@divisor+1,w,c
  5621  003D12  5A18               	subwfb	___awmod@dividend+1,f,c
  5622  003D14                     l728:
  5623  003D14  90D8               	bcf	status,0,c
  5624  003D16  321A               	rrcf	___awmod@divisor+1,f,c
  5625  003D18  3219               	rrcf	___awmod@divisor,f,c
  5626  003D1A  2E1B               	decfsz	___awmod@counter,f,c
  5627  003D1C  D7F1               	goto	u6110
  5628  003D1E                     l729:
  5629  003D1E  501C               	movf	___awmod@sign,w,c
  5630  003D20  B4D8               	btfsc	status,2,c
  5631  003D22  D004               	goto	l730
  5632  003D24  6C17               	negf	___awmod@dividend,c
  5633  003D26  1E18               	comf	___awmod@dividend+1,f,c
  5634  003D28  B0D8               	btfsc	status,0,c
  5635  003D2A  2A18               	incf	___awmod@dividend+1,f,c
  5636  003D2C                     l730:
  5637  003D2C  C017  F017         	movff	___awmod@dividend,?___awmod
  5638  003D30  C018  F018         	movff	___awmod@dividend+1,?___awmod+1
  5639  003D34  0012               	return	
  5640  003D36                     __end_of___awmod:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           postinc0	equ	0xFEE
  5649                           wreg	equ	0xFE8
  5650                           postdec1	equ	0xFE5
  5651                           fsr1l	equ	0xFE1
  5652                           indf2	equ	0xFDF
  5653                           postinc2	equ	0xFDE
  5654                           fsr2h	equ	0xFDA
  5655                           fsr2l	equ	0xFD9
  5656                           status	equ	0xFD8
  5657                           
  5658 ;; *************** function ___awdiv *****************
  5659 ;; Defined at:
  5660 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
  5661 ;; Parameters:    Size  Location     Type
  5662 ;;  dividend        2   28[COMRAM] int 
  5663 ;;  divisor         2   30[COMRAM] int 
  5664 ;; Auto vars:     Size  Location     Type
  5665 ;;  quotient        2   34[COMRAM] int 
  5666 ;;  sign            1   33[COMRAM] unsigned char 
  5667 ;;  counter         1   32[COMRAM] unsigned char 
  5668 ;; Return value:  Size  Location     Type
  5669 ;;                  2   28[COMRAM] int 
  5670 ;; Registers used:
  5671 ;;		wreg, status,2, status,0
  5672 ;; Tracked objects:
  5673 ;;		On entry : 0/0
  5674 ;;		On exit  : 0/0
  5675 ;;		Unchanged: 0/0
  5676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5677 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5678 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5680 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5681 ;;Total ram usage:        8 bytes
  5682 ;; Hardware stack levels used:    1
  5683 ;; Hardware stack levels required when called:    3
  5684 ;; This function calls:
  5685 ;;		Nothing
  5686 ;; This function is called by:
  5687 ;;		_fround
  5688 ;;		_scale
  5689 ;;		_sprintf
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text7
  5694  003B3E                     __ptext7:
  5695                           	opt stack 0
  5696  003B3E                     ___awdiv:
  5697                           	opt stack 25
  5698                           
  5699                           ;incstack = 0
  5700  003B3E  0E00               	movlw	0
  5701  003B40  6E22               	movwf	___awdiv@sign,c
  5702  003B42  AE20               	btfss	___awdiv@divisor+1,7,c
  5703  003B44  D006               	goto	l708
  5704  003B46  6C1F               	negf	___awdiv@divisor,c
  5705  003B48  1E20               	comf	___awdiv@divisor+1,f,c
  5706  003B4A  B0D8               	btfsc	status,0,c
  5707  003B4C  2A20               	incf	___awdiv@divisor+1,f,c
  5708  003B4E  0E01               	movlw	1
  5709  003B50  6E22               	movwf	___awdiv@sign,c
  5710  003B52                     l708:
  5711  003B52  AE1E               	btfss	___awdiv@dividend+1,7,c
  5712  003B54  D006               	goto	l709
  5713  003B56  6C1D               	negf	___awdiv@dividend,c
  5714  003B58  1E1E               	comf	___awdiv@dividend+1,f,c
  5715  003B5A  B0D8               	btfsc	status,0,c
  5716  003B5C  2A1E               	incf	___awdiv@dividend+1,f,c
  5717  003B5E  0E01               	movlw	1
  5718  003B60  1A22               	xorwf	___awdiv@sign,f,c
  5719  003B62                     l709:
  5720  003B62  0E00               	movlw	0
  5721  003B64  6E24               	movwf	___awdiv@quotient+1,c
  5722  003B66  0E00               	movlw	0
  5723  003B68  6E23               	movwf	___awdiv@quotient,c
  5724  003B6A  501F               	movf	___awdiv@divisor,w,c
  5725  003B6C  1020               	iorwf	___awdiv@divisor+1,w,c
  5726  003B6E  B4D8               	btfsc	status,2,c
  5727  003B70  D01C               	goto	l716
  5728  003B72  0E01               	movlw	1
  5729  003B74  6E21               	movwf	___awdiv@counter,c
  5730  003B76  D004               	goto	l711
  5731  003B78  90D8               	bcf	status,0,c
  5732  003B7A  361F               	rlcf	___awdiv@divisor,f,c
  5733  003B7C  3620               	rlcf	___awdiv@divisor+1,f,c
  5734  003B7E  2A21               	incf	___awdiv@counter,f,c
  5735  003B80                     l711:
  5736  003B80  AE20               	btfss	___awdiv@divisor+1,7,c
  5737  003B82  D7FA               	goto	l712
  5738  003B84                     u6050:
  5739  003B84  90D8               	bcf	status,0,c
  5740  003B86  3623               	rlcf	___awdiv@quotient,f,c
  5741  003B88  3624               	rlcf	___awdiv@quotient+1,f,c
  5742  003B8A  501F               	movf	___awdiv@divisor,w,c
  5743  003B8C  5C1D               	subwf	___awdiv@dividend,w,c
  5744  003B8E  5020               	movf	___awdiv@divisor+1,w,c
  5745  003B90  581E               	subwfb	___awdiv@dividend+1,w,c
  5746  003B92  A0D8               	btfss	status,0,c
  5747  003B94  D005               	goto	l715
  5748  003B96  501F               	movf	___awdiv@divisor,w,c
  5749  003B98  5E1D               	subwf	___awdiv@dividend,f,c
  5750  003B9A  5020               	movf	___awdiv@divisor+1,w,c
  5751  003B9C  5A1E               	subwfb	___awdiv@dividend+1,f,c
  5752  003B9E  8023               	bsf	___awdiv@quotient,0,c
  5753  003BA0                     l715:
  5754  003BA0  90D8               	bcf	status,0,c
  5755  003BA2  3220               	rrcf	___awdiv@divisor+1,f,c
  5756  003BA4  321F               	rrcf	___awdiv@divisor,f,c
  5757  003BA6  2E21               	decfsz	___awdiv@counter,f,c
  5758  003BA8  D7ED               	goto	u6050
  5759  003BAA                     l716:
  5760  003BAA  5022               	movf	___awdiv@sign,w,c
  5761  003BAC  B4D8               	btfsc	status,2,c
  5762  003BAE  D004               	goto	l717
  5763  003BB0  6C23               	negf	___awdiv@quotient,c
  5764  003BB2  1E24               	comf	___awdiv@quotient+1,f,c
  5765  003BB4  B0D8               	btfsc	status,0,c
  5766  003BB6  2A24               	incf	___awdiv@quotient+1,f,c
  5767  003BB8                     l717:
  5768  003BB8  C023  F01D         	movff	___awdiv@quotient,?___awdiv
  5769  003BBC  C024  F01E         	movff	___awdiv@quotient+1,?___awdiv+1
  5770  003BC0  0012               	return	
  5771  003BC2                     __end_of___awdiv:
  5772                           	opt stack 0
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           postinc0	equ	0xFEE
  5780                           wreg	equ	0xFE8
  5781                           postdec1	equ	0xFE5
  5782                           fsr1l	equ	0xFE1
  5783                           indf2	equ	0xFDF
  5784                           postinc2	equ	0xFDE
  5785                           fsr2h	equ	0xFDA
  5786                           fsr2l	equ	0xFD9
  5787                           status	equ	0xFD8
  5788                           
  5789 ;; *************** function __tdiv_to_l_ *****************
  5790 ;; Defined at:
  5791 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdivl.c"
  5792 ;; Parameters:    Size  Location     Type
  5793 ;;  f1              4   22[COMRAM] float 
  5794 ;;  f2              4   26[COMRAM] float 
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;  quot            4   33[COMRAM] unsigned long 
  5797 ;;  exp1            1   38[COMRAM] unsigned char 
  5798 ;;  cntr            1   37[COMRAM] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  4   22[COMRAM] unsigned long 
  5801 ;; Registers used:
  5802 ;;		wreg, status,2, status,0
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5808 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5809 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5810 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;Total ram usage:       17 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    3
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_sprintf
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text8
  5823  003446                     __ptext8:
  5824                           	opt stack 0
  5825  003446                     __tdiv_to_l_:
  5826                           	opt stack 26
  5827                           
  5828                           ;incstack = 0
  5829  003446  C019  F01F         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  5830  00344A  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5831  00344C  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5832  00344E  3418               	rlcf	__tdiv_to_l_@f1+1,w,c
  5833  003450  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5834  003452  E301               	bnc	u3611
  5835  003454  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5836  003456                     u3611:
  5837  003456  501F               	movf	??__tdiv_to_l_,w,c
  5838  003458  6E27               	movwf	__tdiv_to_l_@exp1,c
  5839  00345A  5027               	movf	__tdiv_to_l_@exp1,w,c
  5840  00345C  A4D8               	btfss	status,2,c
  5841  00345E  D009               	goto	l844
  5842  003460  0E00               	movlw	0
  5843  003462  6E17               	movwf	?__tdiv_to_l_,c
  5844  003464  0E00               	movlw	0
  5845  003466  6E18               	movwf	?__tdiv_to_l_+1,c
  5846  003468  0E00               	movlw	0
  5847  00346A  6E19               	movwf	?__tdiv_to_l_+2,c
  5848  00346C  0E00               	movlw	0
  5849  00346E  6E1A               	movwf	?__tdiv_to_l_+3,c
  5850  003470  0012               	return	
  5851  003472                     l844:
  5852  003472  C01D  F01F         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  5853  003476  6A20               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  5854  003478  6A21               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  5855  00347A  341C               	rlcf	__tdiv_to_l_@f2+1,w,c
  5856  00347C  361F               	rlcf	??__tdiv_to_l_& (0+255),f,c
  5857  00347E  E301               	bnc	u3631
  5858  003480  8020               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  5859  003482                     u3631:
  5860  003482  501F               	movf	??__tdiv_to_l_,w,c
  5861  003484  6E26               	movwf	__tdiv_to_l_@cntr,c
  5862  003486  5026               	movf	__tdiv_to_l_@cntr,w,c
  5863  003488  A4D8               	btfss	status,2,c
  5864  00348A  D009               	goto	l846
  5865  00348C  0E00               	movlw	0
  5866  00348E  6E17               	movwf	?__tdiv_to_l_,c
  5867  003490  0E00               	movlw	0
  5868  003492  6E18               	movwf	?__tdiv_to_l_+1,c
  5869  003494  0E00               	movlw	0
  5870  003496  6E19               	movwf	?__tdiv_to_l_+2,c
  5871  003498  0E00               	movlw	0
  5872  00349A  6E1A               	movwf	?__tdiv_to_l_+3,c
  5873  00349C  0012               	return	
  5874  00349E                     l846:
  5875  00349E  8E18               	bsf	__tdiv_to_l_@f1+1,7,c
  5876  0034A0  0EFF               	movlw	255
  5877  0034A2  1617               	andwf	__tdiv_to_l_@f1,f,c
  5878  0034A4  0EFF               	movlw	255
  5879  0034A6  1618               	andwf	__tdiv_to_l_@f1+1,f,c
  5880  0034A8  0E00               	movlw	0
  5881  0034AA  1619               	andwf	__tdiv_to_l_@f1+2,f,c
  5882  0034AC  8E1C               	bsf	__tdiv_to_l_@f2+1,7,c
  5883  0034AE  0EFF               	movlw	255
  5884  0034B0  161B               	andwf	__tdiv_to_l_@f2,f,c
  5885  0034B2  0EFF               	movlw	255
  5886  0034B4  161C               	andwf	__tdiv_to_l_@f2+1,f,c
  5887  0034B6  0E00               	movlw	0
  5888  0034B8  161D               	andwf	__tdiv_to_l_@f2+2,f,c
  5889  0034BA  0E00               	movlw	0
  5890  0034BC  6E22               	movwf	__tdiv_to_l_@quot,c
  5891  0034BE  0E00               	movlw	0
  5892  0034C0  6E23               	movwf	__tdiv_to_l_@quot+1,c
  5893  0034C2  0E00               	movlw	0
  5894  0034C4  6E24               	movwf	__tdiv_to_l_@quot+2,c
  5895  0034C6  0E00               	movlw	0
  5896  0034C8  6E25               	movwf	__tdiv_to_l_@quot+3,c
  5897  0034CA  0E7F               	movlw	127
  5898  0034CC  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  5899  0034CE  5026               	movf	__tdiv_to_l_@cntr,w,c
  5900  0034D0  0F98               	addlw	152
  5901  0034D2  5E27               	subwf	__tdiv_to_l_@exp1,f,c
  5902  0034D4  0E18               	movlw	24
  5903  0034D6  6E26               	movwf	__tdiv_to_l_@cntr,c
  5904  0034D8                     l847:
  5905  0034D8  90D8               	bcf	status,0,c
  5906  0034DA  3622               	rlcf	__tdiv_to_l_@quot,f,c
  5907  0034DC  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  5908  0034DE  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  5909  0034E0  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  5910  0034E2  501B               	movf	__tdiv_to_l_@f2,w,c
  5911  0034E4  5C17               	subwf	__tdiv_to_l_@f1,w,c
  5912  0034E6  501C               	movf	__tdiv_to_l_@f2+1,w,c
  5913  0034E8  5818               	subwfb	__tdiv_to_l_@f1+1,w,c
  5914  0034EA  501D               	movf	__tdiv_to_l_@f2+2,w,c
  5915  0034EC  5819               	subwfb	__tdiv_to_l_@f1+2,w,c
  5916  0034EE  A0D8               	btfss	status,0,c
  5917  0034F0  D007               	goto	l848
  5918  0034F2  501B               	movf	__tdiv_to_l_@f2,w,c
  5919  0034F4  5E17               	subwf	__tdiv_to_l_@f1,f,c
  5920  0034F6  501C               	movf	__tdiv_to_l_@f2+1,w,c
  5921  0034F8  5A18               	subwfb	__tdiv_to_l_@f1+1,f,c
  5922  0034FA  501D               	movf	__tdiv_to_l_@f2+2,w,c
  5923  0034FC  5A19               	subwfb	__tdiv_to_l_@f1+2,f,c
  5924  0034FE  8022               	bsf	__tdiv_to_l_@quot,0,c
  5925  003500                     l848:
  5926  003500  90D8               	bcf	status,0,c
  5927  003502  3617               	rlcf	__tdiv_to_l_@f1,f,c
  5928  003504  3618               	rlcf	__tdiv_to_l_@f1+1,f,c
  5929  003506  3619               	rlcf	__tdiv_to_l_@f1+2,f,c
  5930  003508  2E26               	decfsz	__tdiv_to_l_@cntr,f,c
  5931  00350A  D7E6               	goto	l847
  5932  00350C  AE27               	btfss	__tdiv_to_l_@exp1,7,c
  5933  00350E  D016               	goto	l850
  5934  003510  5027               	movf	__tdiv_to_l_@exp1,w,c
  5935  003512  0A80               	xorlw	128
  5936  003514  0F97               	addlw	151
  5937  003516  B0D8               	btfsc	status,0,c
  5938  003518  D009               	goto	l851
  5939  00351A  0E00               	movlw	0
  5940  00351C  6E17               	movwf	?__tdiv_to_l_,c
  5941  00351E  0E00               	movlw	0
  5942  003520  6E18               	movwf	?__tdiv_to_l_+1,c
  5943  003522  0E00               	movlw	0
  5944  003524  6E19               	movwf	?__tdiv_to_l_+2,c
  5945  003526  0E00               	movlw	0
  5946  003528  6E1A               	movwf	?__tdiv_to_l_+3,c
  5947  00352A  0012               	return	
  5948  00352C                     l851:
  5949  00352C  90D8               	bcf	status,0,c
  5950  00352E  3225               	rrcf	__tdiv_to_l_@quot+3,f,c
  5951  003530  3224               	rrcf	__tdiv_to_l_@quot+2,f,c
  5952  003532  3223               	rrcf	__tdiv_to_l_@quot+1,f,c
  5953  003534  3222               	rrcf	__tdiv_to_l_@quot,f,c
  5954  003536  3E27               	incfsz	__tdiv_to_l_@exp1,f,c
  5955  003538  D7F9               	goto	l851
  5956  00353A  D015               	goto	u3690
  5957  00353C                     l850:
  5958  00353C  0E17               	movlw	23
  5959  00353E  6427               	cpfsgt	__tdiv_to_l_@exp1,c
  5960  003540  D00F               	goto	l856
  5961  003542  0E00               	movlw	0
  5962  003544  6E17               	movwf	?__tdiv_to_l_,c
  5963  003546  0E00               	movlw	0
  5964  003548  6E18               	movwf	?__tdiv_to_l_+1,c
  5965  00354A  0E00               	movlw	0
  5966  00354C  6E19               	movwf	?__tdiv_to_l_+2,c
  5967  00354E  0E00               	movlw	0
  5968  003550  6E1A               	movwf	?__tdiv_to_l_+3,c
  5969  003552  0012               	return	
  5970  003554  90D8               	bcf	status,0,c
  5971  003556  3622               	rlcf	__tdiv_to_l_@quot,f,c
  5972  003558  3623               	rlcf	__tdiv_to_l_@quot+1,f,c
  5973  00355A  3624               	rlcf	__tdiv_to_l_@quot+2,f,c
  5974  00355C  3625               	rlcf	__tdiv_to_l_@quot+3,f,c
  5975  00355E  0627               	decf	__tdiv_to_l_@exp1,f,c
  5976  003560                     l856:
  5977  003560  5027               	movf	__tdiv_to_l_@exp1,w,c
  5978  003562  A4D8               	btfss	status,2,c
  5979  003564  D7F7               	goto	l857
  5980  003566                     u3690:
  5981  003566  C022  F017         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  5982  00356A  C023  F018         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  5983  00356E  C024  F019         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  5984  003572  C025  F01A         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  5985  003576  0012               	return		;funcret
  5986  003578                     __end_of__tdiv_to_l_:
  5987                           	opt stack 0
  5988                           tblptru	equ	0xFF8
  5989                           tblptrh	equ	0xFF7
  5990                           tblptrl	equ	0xFF6
  5991                           tablat	equ	0xFF5
  5992                           prodh	equ	0xFF4
  5993                           prodl	equ	0xFF3
  5994                           postinc0	equ	0xFEE
  5995                           wreg	equ	0xFE8
  5996                           postdec1	equ	0xFE5
  5997                           fsr1l	equ	0xFE1
  5998                           indf2	equ	0xFDF
  5999                           postinc2	equ	0xFDE
  6000                           fsr2h	equ	0xFDA
  6001                           fsr2l	equ	0xFD9
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function __div_to_l_ *****************
  6005 ;; Defined at:
  6006 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fldivl.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  f1              4   22[COMRAM] unsigned long 
  6009 ;;  f2              4   26[COMRAM] unsigned long 
  6010 ;; Auto vars:     Size  Location     Type
  6011 ;;  quot            4   30[COMRAM] unsigned long 
  6012 ;;  exp1            1   35[COMRAM] unsigned char 
  6013 ;;  cntr            1   34[COMRAM] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  4   22[COMRAM] unsigned long 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6023 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6024 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;Total ram usage:       14 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    3
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_sprintf
  6034 ;; This function uses a non-reentrant model
  6035 ;;
  6036                           
  6037                           	psect	text9
  6038  003578                     __ptext9:
  6039                           	opt stack 0
  6040  003578                     __div_to_l_:
  6041                           	opt stack 26
  6042                           
  6043                           ;incstack = 0
  6044  003578  3419               	rlcf	__div_to_l_@f1+2,w,c
  6045  00357A  341A               	rlcf	__div_to_l_@f1+3,w,c
  6046  00357C  6E24               	movwf	__div_to_l_@exp1,c
  6047  00357E  5024               	movf	__div_to_l_@exp1,w,c
  6048  003580  A4D8               	btfss	status,2,c
  6049  003582  D009               	goto	l740
  6050  003584  0E00               	movlw	0
  6051  003586  6E17               	movwf	?__div_to_l_,c
  6052  003588  0E00               	movlw	0
  6053  00358A  6E18               	movwf	?__div_to_l_+1,c
  6054  00358C  0E00               	movlw	0
  6055  00358E  6E19               	movwf	?__div_to_l_+2,c
  6056  003590  0E00               	movlw	0
  6057  003592  6E1A               	movwf	?__div_to_l_+3,c
  6058  003594  0012               	return	
  6059  003596                     l740:
  6060  003596  341D               	rlcf	__div_to_l_@f2+2,w,c
  6061  003598  341E               	rlcf	__div_to_l_@f2+3,w,c
  6062  00359A  6E23               	movwf	__div_to_l_@cntr,c
  6063  00359C  5023               	movf	__div_to_l_@cntr,w,c
  6064  00359E  A4D8               	btfss	status,2,c
  6065  0035A0  D009               	goto	l742
  6066  0035A2  0E00               	movlw	0
  6067  0035A4  6E17               	movwf	?__div_to_l_,c
  6068  0035A6  0E00               	movlw	0
  6069  0035A8  6E18               	movwf	?__div_to_l_+1,c
  6070  0035AA  0E00               	movlw	0
  6071  0035AC  6E19               	movwf	?__div_to_l_+2,c
  6072  0035AE  0E00               	movlw	0
  6073  0035B0  6E1A               	movwf	?__div_to_l_+3,c
  6074  0035B2  0012               	return	
  6075  0035B4                     l742:
  6076  0035B4  8E19               	bsf	__div_to_l_@f1+2,7,c
  6077  0035B6  0EFF               	movlw	255
  6078  0035B8  1617               	andwf	__div_to_l_@f1,f,c
  6079  0035BA  0EFF               	movlw	255
  6080  0035BC  1618               	andwf	__div_to_l_@f1+1,f,c
  6081  0035BE  0EFF               	movlw	255
  6082  0035C0  1619               	andwf	__div_to_l_@f1+2,f,c
  6083  0035C2  0E00               	movlw	0
  6084  0035C4  161A               	andwf	__div_to_l_@f1+3,f,c
  6085  0035C6  8E1D               	bsf	__div_to_l_@f2+2,7,c
  6086  0035C8  0EFF               	movlw	255
  6087  0035CA  161B               	andwf	__div_to_l_@f2,f,c
  6088  0035CC  0EFF               	movlw	255
  6089  0035CE  161C               	andwf	__div_to_l_@f2+1,f,c
  6090  0035D0  0EFF               	movlw	255
  6091  0035D2  161D               	andwf	__div_to_l_@f2+2,f,c
  6092  0035D4  0E00               	movlw	0
  6093  0035D6  161E               	andwf	__div_to_l_@f2+3,f,c
  6094  0035D8  0E00               	movlw	0
  6095  0035DA  6E1F               	movwf	__div_to_l_@quot,c
  6096  0035DC  0E00               	movlw	0
  6097  0035DE  6E20               	movwf	__div_to_l_@quot+1,c
  6098  0035E0  0E00               	movlw	0
  6099  0035E2  6E21               	movwf	__div_to_l_@quot+2,c
  6100  0035E4  0E00               	movlw	0
  6101  0035E6  6E22               	movwf	__div_to_l_@quot+3,c
  6102  0035E8  0E7F               	movlw	127
  6103  0035EA  5E24               	subwf	__div_to_l_@exp1,f,c
  6104  0035EC  5023               	movf	__div_to_l_@cntr,w,c
  6105  0035EE  0FA0               	addlw	160
  6106  0035F0  5E24               	subwf	__div_to_l_@exp1,f,c
  6107  0035F2  0E20               	movlw	32
  6108  0035F4  6E23               	movwf	__div_to_l_@cntr,c
  6109  0035F6  90D8               	bcf	status,0,c
  6110  0035F8  361F               	rlcf	__div_to_l_@quot,f,c
  6111  0035FA  3620               	rlcf	__div_to_l_@quot+1,f,c
  6112  0035FC  3621               	rlcf	__div_to_l_@quot+2,f,c
  6113  0035FE  3622               	rlcf	__div_to_l_@quot+3,f,c
  6114  003600  501B               	movf	__div_to_l_@f2,w,c
  6115  003602  5C17               	subwf	__div_to_l_@f1,w,c
  6116  003604  501C               	movf	__div_to_l_@f2+1,w,c
  6117  003606  5818               	subwfb	__div_to_l_@f1+1,w,c
  6118  003608  501D               	movf	__div_to_l_@f2+2,w,c
  6119  00360A  5819               	subwfb	__div_to_l_@f1+2,w,c
  6120  00360C  501E               	movf	__div_to_l_@f2+3,w,c
  6121  00360E  581A               	subwfb	__div_to_l_@f1+3,w,c
  6122  003610  A0D8               	btfss	status,0,c
  6123  003612  D009               	goto	l744
  6124  003614  501B               	movf	__div_to_l_@f2,w,c
  6125  003616  5E17               	subwf	__div_to_l_@f1,f,c
  6126  003618  501C               	movf	__div_to_l_@f2+1,w,c
  6127  00361A  5A18               	subwfb	__div_to_l_@f1+1,f,c
  6128  00361C  501D               	movf	__div_to_l_@f2+2,w,c
  6129  00361E  5A19               	subwfb	__div_to_l_@f1+2,f,c
  6130  003620  501E               	movf	__div_to_l_@f2+3,w,c
  6131  003622  5A1A               	subwfb	__div_to_l_@f1+3,f,c
  6132  003624  801F               	bsf	__div_to_l_@quot,0,c
  6133  003626                     l744:
  6134  003626  90D8               	bcf	status,0,c
  6135  003628  3617               	rlcf	__div_to_l_@f1,f,c
  6136  00362A  3618               	rlcf	__div_to_l_@f1+1,f,c
  6137  00362C  3619               	rlcf	__div_to_l_@f1+2,f,c
  6138  00362E  361A               	rlcf	__div_to_l_@f1+3,f,c
  6139  003630  2E23               	decfsz	__div_to_l_@cntr,f,c
  6140  003632  D7E1               	goto	l743
  6141  003634  AE24               	btfss	__div_to_l_@exp1,7,c
  6142  003636  D016               	goto	l746
  6143  003638  5024               	movf	__div_to_l_@exp1,w,c
  6144  00363A  0A80               	xorlw	128
  6145  00363C  0F9F               	addlw	159
  6146  00363E  B0D8               	btfsc	status,0,c
  6147  003640  D009               	goto	l747
  6148  003642  0E00               	movlw	0
  6149  003644  6E17               	movwf	?__div_to_l_,c
  6150  003646  0E00               	movlw	0
  6151  003648  6E18               	movwf	?__div_to_l_+1,c
  6152  00364A  0E00               	movlw	0
  6153  00364C  6E19               	movwf	?__div_to_l_+2,c
  6154  00364E  0E00               	movlw	0
  6155  003650  6E1A               	movwf	?__div_to_l_+3,c
  6156  003652  0012               	return	
  6157  003654                     l747:
  6158  003654  90D8               	bcf	status,0,c
  6159  003656  3222               	rrcf	__div_to_l_@quot+3,f,c
  6160  003658  3221               	rrcf	__div_to_l_@quot+2,f,c
  6161  00365A  3220               	rrcf	__div_to_l_@quot+1,f,c
  6162  00365C  321F               	rrcf	__div_to_l_@quot,f,c
  6163  00365E  3E24               	incfsz	__div_to_l_@exp1,f,c
  6164  003660  D7F9               	goto	l747
  6165  003662  D015               	goto	u3760
  6166  003664                     l746:
  6167  003664  0E1F               	movlw	31
  6168  003666  6424               	cpfsgt	__div_to_l_@exp1,c
  6169  003668  D00F               	goto	l752
  6170  00366A  0E00               	movlw	0
  6171  00366C  6E17               	movwf	?__div_to_l_,c
  6172  00366E  0E00               	movlw	0
  6173  003670  6E18               	movwf	?__div_to_l_+1,c
  6174  003672  0E00               	movlw	0
  6175  003674  6E19               	movwf	?__div_to_l_+2,c
  6176  003676  0E00               	movlw	0
  6177  003678  6E1A               	movwf	?__div_to_l_+3,c
  6178  00367A  0012               	return	
  6179  00367C  90D8               	bcf	status,0,c
  6180  00367E  361F               	rlcf	__div_to_l_@quot,f,c
  6181  003680  3620               	rlcf	__div_to_l_@quot+1,f,c
  6182  003682  3621               	rlcf	__div_to_l_@quot+2,f,c
  6183  003684  3622               	rlcf	__div_to_l_@quot+3,f,c
  6184  003686  0624               	decf	__div_to_l_@exp1,f,c
  6185  003688                     l752:
  6186  003688  5024               	movf	__div_to_l_@exp1,w,c
  6187  00368A  A4D8               	btfss	status,2,c
  6188  00368C  D7F7               	goto	l753
  6189  00368E                     u3760:
  6190  00368E  C01F  F017         	movff	__div_to_l_@quot,?__div_to_l_
  6191  003692  C020  F018         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  6192  003696  C021  F019         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  6193  00369A  C022  F01A         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  6194  00369E  0012               	return		;funcret
  6195  0036A0                     __end_of__div_to_l_:
  6196                           	opt stack 0
  6197                           tblptru	equ	0xFF8
  6198                           tblptrh	equ	0xFF7
  6199                           tblptrl	equ	0xFF6
  6200                           tablat	equ	0xFF5
  6201                           prodh	equ	0xFF4
  6202                           prodl	equ	0xFF3
  6203                           postinc0	equ	0xFEE
  6204                           wreg	equ	0xFE8
  6205                           postdec1	equ	0xFE5
  6206                           fsr1l	equ	0xFE1
  6207                           indf2	equ	0xFDF
  6208                           postinc2	equ	0xFDE
  6209                           fsr2h	equ	0xFDA
  6210                           fsr2l	equ	0xFD9
  6211                           status	equ	0xFD8
  6212                           
  6213 ;; *************** function ___llmod *****************
  6214 ;; Defined at:
  6215 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  6216 ;; Parameters:    Size  Location     Type
  6217 ;;  dividend        4   22[COMRAM] unsigned long 
  6218 ;;  divisor         4   26[COMRAM] unsigned long 
  6219 ;; Auto vars:     Size  Location     Type
  6220 ;;  counter         1   30[COMRAM] unsigned char 
  6221 ;; Return value:  Size  Location     Type
  6222 ;;                  4   22[COMRAM] unsigned long 
  6223 ;; Registers used:
  6224 ;;		wreg, status,2, status,0
  6225 ;; Tracked objects:
  6226 ;;		On entry : 0/0
  6227 ;;		On exit  : 0/0
  6228 ;;		Unchanged: 0/0
  6229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6230 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;Total ram usage:        9 bytes
  6235 ;; Hardware stack levels used:    1
  6236 ;; Hardware stack levels required when called:    3
  6237 ;; This function calls:
  6238 ;;		Nothing
  6239 ;; This function is called by:
  6240 ;;		_sprintf
  6241 ;; This function uses a non-reentrant model
  6242 ;;
  6243                           
  6244                           	psect	text10
  6245  003D36                     __ptext10:
  6246                           	opt stack 0
  6247  003D36                     ___llmod:
  6248                           	opt stack 26
  6249                           
  6250                           ;incstack = 0
  6251  003D36  501B               	movf	___llmod@divisor,w,c
  6252  003D38  101C               	iorwf	___llmod@divisor+1,w,c
  6253  003D3A  101D               	iorwf	___llmod@divisor+2,w,c
  6254  003D3C  101E               	iorwf	___llmod@divisor+3,w,c
  6255  003D3E  B4D8               	btfsc	status,2,c
  6256  003D40  D024               	goto	l945
  6257  003D42  0E01               	movlw	1
  6258  003D44  6E1F               	movwf	___llmod@counter,c
  6259  003D46  D006               	goto	l940
  6260  003D48  90D8               	bcf	status,0,c
  6261  003D4A  361B               	rlcf	___llmod@divisor,f,c
  6262  003D4C  361C               	rlcf	___llmod@divisor+1,f,c
  6263  003D4E  361D               	rlcf	___llmod@divisor+2,f,c
  6264  003D50  361E               	rlcf	___llmod@divisor+3,f,c
  6265  003D52  2A1F               	incf	___llmod@counter,f,c
  6266  003D54                     l940:
  6267  003D54  AE1E               	btfss	___llmod@divisor+3,7,c
  6268  003D56  D7F8               	goto	l941
  6269  003D58                     u4170:
  6270  003D58  501B               	movf	___llmod@divisor,w,c
  6271  003D5A  5C17               	subwf	___llmod@dividend,w,c
  6272  003D5C  501C               	movf	___llmod@divisor+1,w,c
  6273  003D5E  5818               	subwfb	___llmod@dividend+1,w,c
  6274  003D60  501D               	movf	___llmod@divisor+2,w,c
  6275  003D62  5819               	subwfb	___llmod@dividend+2,w,c
  6276  003D64  501E               	movf	___llmod@divisor+3,w,c
  6277  003D66  581A               	subwfb	___llmod@dividend+3,w,c
  6278  003D68  A0D8               	btfss	status,0,c
  6279  003D6A  D008               	goto	l944
  6280  003D6C  501B               	movf	___llmod@divisor,w,c
  6281  003D6E  5E17               	subwf	___llmod@dividend,f,c
  6282  003D70  501C               	movf	___llmod@divisor+1,w,c
  6283  003D72  5A18               	subwfb	___llmod@dividend+1,f,c
  6284  003D74  501D               	movf	___llmod@divisor+2,w,c
  6285  003D76  5A19               	subwfb	___llmod@dividend+2,f,c
  6286  003D78  501E               	movf	___llmod@divisor+3,w,c
  6287  003D7A  5A1A               	subwfb	___llmod@dividend+3,f,c
  6288  003D7C                     l944:
  6289  003D7C  90D8               	bcf	status,0,c
  6290  003D7E  321E               	rrcf	___llmod@divisor+3,f,c
  6291  003D80  321D               	rrcf	___llmod@divisor+2,f,c
  6292  003D82  321C               	rrcf	___llmod@divisor+1,f,c
  6293  003D84  321B               	rrcf	___llmod@divisor,f,c
  6294  003D86  2E1F               	decfsz	___llmod@counter,f,c
  6295  003D88  D7E7               	goto	u4170
  6296  003D8A                     l945:
  6297  003D8A  C017  F017         	movff	___llmod@dividend,?___llmod
  6298  003D8E  C018  F018         	movff	___llmod@dividend+1,?___llmod+1
  6299  003D92  C019  F019         	movff	___llmod@dividend+2,?___llmod+2
  6300  003D96  C01A  F01A         	movff	___llmod@dividend+3,?___llmod+3
  6301  003D9A  0012               	return		;funcret
  6302  003D9C                     __end_of___llmod:
  6303                           	opt stack 0
  6304                           tblptru	equ	0xFF8
  6305                           tblptrh	equ	0xFF7
  6306                           tblptrl	equ	0xFF6
  6307                           tablat	equ	0xFF5
  6308                           prodh	equ	0xFF4
  6309                           prodl	equ	0xFF3
  6310                           postinc0	equ	0xFEE
  6311                           wreg	equ	0xFE8
  6312                           postdec1	equ	0xFE5
  6313                           fsr1l	equ	0xFE1
  6314                           indf2	equ	0xFDF
  6315                           postinc2	equ	0xFDE
  6316                           fsr2h	equ	0xFDA
  6317                           fsr2l	equ	0xFD9
  6318                           status	equ	0xFD8
  6319                           
  6320 ;; *************** function ___lldiv *****************
  6321 ;; Defined at:
  6322 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  dividend        4   22[COMRAM] unsigned long 
  6325 ;;  divisor         4   26[COMRAM] unsigned long 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  quotient        4   30[COMRAM] unsigned long 
  6328 ;;  counter         1   34[COMRAM] unsigned char 
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  4   22[COMRAM] unsigned long 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6338 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;Total ram usage:       13 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    3
  6345 ;; This function calls:
  6346 ;;		Nothing
  6347 ;; This function is called by:
  6348 ;;		_sprintf
  6349 ;; This function uses a non-reentrant model
  6350 ;;
  6351                           
  6352                           	psect	text11
  6353  003BC2                     __ptext11:
  6354                           	opt stack 0
  6355  003BC2                     ___lldiv:
  6356                           	opt stack 26
  6357                           
  6358                           ;incstack = 0
  6359  003BC2  0E00               	movlw	0
  6360  003BC4  6E1F               	movwf	___lldiv@quotient,c
  6361  003BC6  0E00               	movlw	0
  6362  003BC8  6E20               	movwf	___lldiv@quotient+1,c
  6363  003BCA  0E00               	movlw	0
  6364  003BCC  6E21               	movwf	___lldiv@quotient+2,c
  6365  003BCE  0E00               	movlw	0
  6366  003BD0  6E22               	movwf	___lldiv@quotient+3,c
  6367  003BD2  501B               	movf	___lldiv@divisor,w,c
  6368  003BD4  101C               	iorwf	___lldiv@divisor+1,w,c
  6369  003BD6  101D               	iorwf	___lldiv@divisor+2,w,c
  6370  003BD8  101E               	iorwf	___lldiv@divisor+3,w,c
  6371  003BDA  B4D8               	btfsc	status,2,c
  6372  003BDC  D02A               	goto	l935
  6373  003BDE  0E01               	movlw	1
  6374  003BE0  6E23               	movwf	___lldiv@counter,c
  6375  003BE2  D006               	goto	l930
  6376  003BE4  90D8               	bcf	status,0,c
  6377  003BE6  361B               	rlcf	___lldiv@divisor,f,c
  6378  003BE8  361C               	rlcf	___lldiv@divisor+1,f,c
  6379  003BEA  361D               	rlcf	___lldiv@divisor+2,f,c
  6380  003BEC  361E               	rlcf	___lldiv@divisor+3,f,c
  6381  003BEE  2A23               	incf	___lldiv@counter,f,c
  6382  003BF0                     l930:
  6383  003BF0  AE1E               	btfss	___lldiv@divisor+3,7,c
  6384  003BF2  D7F8               	goto	l931
  6385  003BF4                     u4140:
  6386  003BF4  90D8               	bcf	status,0,c
  6387  003BF6  361F               	rlcf	___lldiv@quotient,f,c
  6388  003BF8  3620               	rlcf	___lldiv@quotient+1,f,c
  6389  003BFA  3621               	rlcf	___lldiv@quotient+2,f,c
  6390  003BFC  3622               	rlcf	___lldiv@quotient+3,f,c
  6391  003BFE  501B               	movf	___lldiv@divisor,w,c
  6392  003C00  5C17               	subwf	___lldiv@dividend,w,c
  6393  003C02  501C               	movf	___lldiv@divisor+1,w,c
  6394  003C04  5818               	subwfb	___lldiv@dividend+1,w,c
  6395  003C06  501D               	movf	___lldiv@divisor+2,w,c
  6396  003C08  5819               	subwfb	___lldiv@dividend+2,w,c
  6397  003C0A  501E               	movf	___lldiv@divisor+3,w,c
  6398  003C0C  581A               	subwfb	___lldiv@dividend+3,w,c
  6399  003C0E  A0D8               	btfss	status,0,c
  6400  003C10  D009               	goto	l934
  6401  003C12  501B               	movf	___lldiv@divisor,w,c
  6402  003C14  5E17               	subwf	___lldiv@dividend,f,c
  6403  003C16  501C               	movf	___lldiv@divisor+1,w,c
  6404  003C18  5A18               	subwfb	___lldiv@dividend+1,f,c
  6405  003C1A  501D               	movf	___lldiv@divisor+2,w,c
  6406  003C1C  5A19               	subwfb	___lldiv@dividend+2,f,c
  6407  003C1E  501E               	movf	___lldiv@divisor+3,w,c
  6408  003C20  5A1A               	subwfb	___lldiv@dividend+3,f,c
  6409  003C22  801F               	bsf	___lldiv@quotient,0,c
  6410  003C24                     l934:
  6411  003C24  90D8               	bcf	status,0,c
  6412  003C26  321E               	rrcf	___lldiv@divisor+3,f,c
  6413  003C28  321D               	rrcf	___lldiv@divisor+2,f,c
  6414  003C2A  321C               	rrcf	___lldiv@divisor+1,f,c
  6415  003C2C  321B               	rrcf	___lldiv@divisor,f,c
  6416  003C2E  2E23               	decfsz	___lldiv@counter,f,c
  6417  003C30  D7E1               	goto	u4140
  6418  003C32                     l935:
  6419  003C32  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  6420  003C36  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  6421  003C3A  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  6422  003C3E  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  6423  003C42  0012               	return		;funcret
  6424  003C44                     __end_of___lldiv:
  6425                           	opt stack 0
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           postinc0	equ	0xFEE
  6433                           wreg	equ	0xFE8
  6434                           postdec1	equ	0xFE5
  6435                           fsr1l	equ	0xFE1
  6436                           indf2	equ	0xFDF
  6437                           postinc2	equ	0xFDE
  6438                           fsr2h	equ	0xFDA
  6439                           fsr2l	equ	0xFD9
  6440                           status	equ	0xFD8
  6441                           
  6442 ;; *************** function ___fltol *****************
  6443 ;; Defined at:
  6444 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  6445 ;; Parameters:    Size  Location     Type
  6446 ;;  f1              4   18[BANK0 ] unsigned long 
  6447 ;; Auto vars:     Size  Location     Type
  6448 ;;  exp1            1   84[COMRAM] unsigned char 
  6449 ;;  sign1           1   83[COMRAM] unsigned char 
  6450 ;; Return value:  Size  Location     Type
  6451 ;;                  4   18[BANK0 ] long 
  6452 ;; Registers used:
  6453 ;;		wreg, status,2, status,0
  6454 ;; Tracked objects:
  6455 ;;		On entry : 0/0
  6456 ;;		On exit  : 0/0
  6457 ;;		Unchanged: 0/0
  6458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6463 ;;Total ram usage:       10 bytes
  6464 ;; Hardware stack levels used:    1
  6465 ;; Hardware stack levels required when called:    3
  6466 ;; This function calls:
  6467 ;;		Nothing
  6468 ;; This function is called by:
  6469 ;;		_main
  6470 ;;		_sprintf
  6471 ;;		_set_pwm1_percent
  6472 ;;		_set_pwm1_voltage
  6473 ;;		_set_pwm1_general
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text12
  6478  0038D4                     __ptext12:
  6479                           	opt stack 0
  6480  0038D4                     ___fltol:
  6481                           	opt stack 26
  6482                           
  6483                           ;incstack = 0
  6484  0038D4  0100               	movlb	0	; () banked
  6485  0038D6  3594               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6486  0038D8  3595               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6487  0038DA  6E55               	movwf	___fltol@exp1,c
  6488  0038DC  5055               	movf	___fltol@exp1,w,c
  6489  0038DE  A4D8               	btfss	status,2,c
  6490  0038E0  D009               	goto	l787
  6491                           
  6492                           ; BSR set to: 0
  6493  0038E2  0E00               	movlw	0
  6494  0038E4  6F92               	movwf	?___fltol& (0+255),b
  6495  0038E6  0E00               	movlw	0
  6496  0038E8  6F93               	movwf	(?___fltol+1)& (0+255),b
  6497  0038EA  0E00               	movlw	0
  6498  0038EC  6F94               	movwf	(?___fltol+2)& (0+255),b
  6499  0038EE  0E00               	movlw	0
  6500  0038F0  6F95               	movwf	(?___fltol+3)& (0+255),b
  6501                           
  6502                           ; BSR set to: 0
  6503  0038F2  0012               	return	
  6504  0038F4                     l787:
  6505                           
  6506                           ; BSR set to: 0
  6507                           
  6508                           ; BSR set to: 0
  6509  0038F4  C092  F096         	movff	___fltol@f1,??___fltol
  6510  0038F8  C093  F097         	movff	___fltol@f1+1,??___fltol+1
  6511  0038FC  C094  F098         	movff	___fltol@f1+2,??___fltol+2
  6512  003900  C095  F099         	movff	___fltol@f1+3,??___fltol+3
  6513  003904  0E20               	movlw	32
  6514  003906  D005               	goto	u4070
  6515  003908                     u4075:
  6516  003908  90D8               	bcf	status,0,c
  6517  00390A  3399               	rrcf	(??___fltol+3)& (0+255),f,b
  6518  00390C  3398               	rrcf	(??___fltol+2)& (0+255),f,b
  6519  00390E  3397               	rrcf	(??___fltol+1)& (0+255),f,b
  6520  003910  3396               	rrcf	??___fltol& (0+255),f,b
  6521  003912                     u4070:
  6522  003912  2EE8               	decfsz	wreg,f,c
  6523  003914  D7F9               	goto	u4075
  6524  003916  5196               	movf	??___fltol& (0+255),w,b
  6525  003918  6E54               	movwf	___fltol@sign1,c
  6526                           
  6527                           ; BSR set to: 0
  6528  00391A  8F94               	bsf	(___fltol@f1+2)& (0+255),7,b
  6529                           
  6530                           ; BSR set to: 0
  6531  00391C  0EFF               	movlw	255
  6532  00391E  1792               	andwf	___fltol@f1& (0+255),f,b
  6533  003920  0EFF               	movlw	255
  6534  003922  1793               	andwf	(___fltol@f1+1)& (0+255),f,b
  6535  003924  0EFF               	movlw	255
  6536  003926  1794               	andwf	(___fltol@f1+2)& (0+255),f,b
  6537  003928  0E00               	movlw	0
  6538  00392A  1795               	andwf	(___fltol@f1+3)& (0+255),f,b
  6539                           
  6540                           ; BSR set to: 0
  6541  00392C  0E96               	movlw	150
  6542  00392E  5E55               	subwf	___fltol@exp1,f,c
  6543                           
  6544                           ; BSR set to: 0
  6545  003930  AE55               	btfss	___fltol@exp1,7,c
  6546  003932  D016               	goto	l789
  6547                           
  6548                           ; BSR set to: 0
  6549  003934  5055               	movf	___fltol@exp1,w,c
  6550  003936  0A80               	xorlw	128
  6551  003938  0F97               	addlw	151
  6552  00393A  B0D8               	btfsc	status,0,c
  6553  00393C  D009               	goto	l790
  6554                           
  6555                           ; BSR set to: 0
  6556  00393E  0E00               	movlw	0
  6557  003940  6F92               	movwf	?___fltol& (0+255),b
  6558  003942  0E00               	movlw	0
  6559  003944  6F93               	movwf	(?___fltol+1)& (0+255),b
  6560  003946  0E00               	movlw	0
  6561  003948  6F94               	movwf	(?___fltol+2)& (0+255),b
  6562  00394A  0E00               	movlw	0
  6563  00394C  6F95               	movwf	(?___fltol+3)& (0+255),b
  6564                           
  6565                           ; BSR set to: 0
  6566  00394E  0012               	return	
  6567  003950                     l790:
  6568                           
  6569                           ; BSR set to: 0
  6570                           
  6571                           ; BSR set to: 0
  6572                           
  6573                           ; BSR set to: 0
  6574  003950  90D8               	bcf	status,0,c
  6575  003952  3395               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6576  003954  3394               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6577  003956  3393               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6578  003958  3392               	rrcf	___fltol@f1& (0+255),f,b
  6579                           
  6580                           ; BSR set to: 0
  6581  00395A  3E55               	incfsz	___fltol@exp1,f,c
  6582  00395C  D7F9               	goto	l790
  6583                           
  6584                           ; BSR set to: 0
  6585  00395E  D015               	goto	u4110
  6586  003960                     l789:
  6587                           
  6588                           ; BSR set to: 0
  6589                           
  6590                           ; BSR set to: 0
  6591  003960  0E1F               	movlw	31
  6592  003962  6455               	cpfsgt	___fltol@exp1,c
  6593  003964  D00F               	goto	l795
  6594                           
  6595                           ; BSR set to: 0
  6596  003966  0E00               	movlw	0
  6597  003968  6F92               	movwf	?___fltol& (0+255),b
  6598  00396A  0E00               	movlw	0
  6599  00396C  6F93               	movwf	(?___fltol+1)& (0+255),b
  6600  00396E  0E00               	movlw	0
  6601  003970  6F94               	movwf	(?___fltol+2)& (0+255),b
  6602  003972  0E00               	movlw	0
  6603  003974  6F95               	movwf	(?___fltol+3)& (0+255),b
  6604                           
  6605                           ; BSR set to: 0
  6606  003976  0012               	return	
  6607  003978                     
  6608                           ; BSR set to: 0
  6609                           
  6610                           ; BSR set to: 0
  6611  003978  90D8               	bcf	status,0,c
  6612  00397A  3792               	rlcf	___fltol@f1& (0+255),f,b
  6613  00397C  3793               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6614  00397E  3794               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6615  003980  3795               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6616  003982  0655               	decf	___fltol@exp1,f,c
  6617  003984                     l795:
  6618                           
  6619                           ; BSR set to: 0
  6620                           
  6621                           ; BSR set to: 0
  6622  003984  5055               	movf	___fltol@exp1,w,c
  6623  003986  A4D8               	btfss	status,2,c
  6624  003988  D7F7               	goto	l796
  6625  00398A                     u4110:
  6626                           
  6627                           ; BSR set to: 0
  6628                           
  6629                           ; BSR set to: 0
  6630                           
  6631                           ; BSR set to: 0
  6632  00398A  5054               	movf	___fltol@sign1,w,c
  6633  00398C  B4D8               	btfsc	status,2,c
  6634  00398E  D008               	goto	l798
  6635                           
  6636                           ; BSR set to: 0
  6637  003990  1F95               	comf	(___fltol@f1+3)& (0+255),f,b
  6638  003992  1F94               	comf	(___fltol@f1+2)& (0+255),f,b
  6639  003994  1F93               	comf	(___fltol@f1+1)& (0+255),f,b
  6640  003996  6D92               	negf	___fltol@f1& (0+255),b
  6641  003998  0E00               	movlw	0
  6642  00399A  2393               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6643  00399C  2394               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6644  00399E  2395               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6645  0039A0                     l798:
  6646                           
  6647                           ; BSR set to: 0
  6648                           
  6649                           ; BSR set to: 0
  6650  0039A0  C092  F092         	movff	___fltol@f1,?___fltol
  6651  0039A4  C093  F093         	movff	___fltol@f1+1,?___fltol+1
  6652  0039A8  C094  F094         	movff	___fltol@f1+2,?___fltol+2
  6653  0039AC  C095  F095         	movff	___fltol@f1+3,?___fltol+3
  6654  0039B0  0012               	return	
  6655  0039B2                     __end_of___fltol:
  6656                           	opt stack 0
  6657                           tblptru	equ	0xFF8
  6658                           tblptrh	equ	0xFF7
  6659                           tblptrl	equ	0xFF6
  6660                           tablat	equ	0xFF5
  6661                           prodh	equ	0xFF4
  6662                           prodl	equ	0xFF3
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1l	equ	0xFE1
  6667                           indf2	equ	0xFDF
  6668                           postinc2	equ	0xFDE
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function ___flsub *****************
  6674 ;; Defined at:
  6675 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  b               4   42[BANK0 ] long 
  6678 ;;  a               4   46[BANK0 ] long 
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  4   42[BANK0 ] long 
  6683 ;; Registers used:
  6684 ;;		wreg, status,2, status,0, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        8 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    4
  6697 ;; This function calls:
  6698 ;;		___fladd
  6699 ;; This function is called by:
  6700 ;;		_sprintf
  6701 ;; This function uses a non-reentrant model
  6702 ;;
  6703                           
  6704                           	psect	text13
  6705  003F08                     __ptext13:
  6706                           	opt stack 0
  6707  003F08                     ___flsub:
  6708                           	opt stack 25
  6709                           
  6710                           ; BSR set to: 0
  6711                           ;incstack = 0
  6712  003F08  0E00               	movlw	0
  6713  003F0A  0100               	movlb	0	; () banked
  6714  003F0C  1BAE               	xorwf	___flsub@a& (0+255),f,b
  6715  003F0E  0E00               	movlw	0
  6716  003F10  1BAF               	xorwf	(___flsub@a+1)& (0+255),f,b
  6717  003F12  0E00               	movlw	0
  6718  003F14  1BB0               	xorwf	(___flsub@a+2)& (0+255),f,b
  6719  003F16  0E80               	movlw	128
  6720  003F18  1BB1               	xorwf	(___flsub@a+3)& (0+255),f,b
  6721                           
  6722                           ; BSR set to: 0
  6723  003F1A  C0AA  F096         	movff	___flsub@b,___fladd@b
  6724  003F1E  C0AB  F097         	movff	___flsub@b+1,___fladd@b+1
  6725  003F22  C0AC  F098         	movff	___flsub@b+2,___fladd@b+2
  6726  003F26  C0AD  F099         	movff	___flsub@b+3,___fladd@b+3
  6727  003F2A  C0AE  F09A         	movff	___flsub@a,___fladd@a
  6728  003F2E  C0AF  F09B         	movff	___flsub@a+1,___fladd@a+1
  6729  003F32  C0B0  F09C         	movff	___flsub@a+2,___fladd@a+2
  6730  003F36  C0B1  F09D         	movff	___flsub@a+3,___fladd@a+3
  6731  003F3A  EC8B  F014         	call	___fladd	;wreg free
  6732  003F3E  C096  F0AA         	movff	?___fladd,?___flsub
  6733  003F42  C097  F0AB         	movff	?___fladd+1,?___flsub+1
  6734  003F46  C098  F0AC         	movff	?___fladd+2,?___flsub+2
  6735  003F4A  C099  F0AD         	movff	?___fladd+3,?___flsub+3
  6736  003F4E  0012               	return	
  6737  003F50                     __end_of___flsub:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           postinc0	equ	0xFEE
  6746                           wreg	equ	0xFE8
  6747                           postdec1	equ	0xFE5
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           fsr2h	equ	0xFDA
  6752                           fsr2l	equ	0xFD9
  6753                           status	equ	0xFD8
  6754                           
  6755 ;; *************** function ___fladd *****************
  6756 ;; Defined at:
  6757 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  6758 ;; Parameters:    Size  Location     Type
  6759 ;;  b               4   22[BANK0 ] long 
  6760 ;;  a               4   26[BANK0 ] long 
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  grs             1   41[BANK0 ] unsigned char 
  6763 ;;  bexp            1   40[BANK0 ] unsigned char 
  6764 ;;  aexp            1   39[BANK0 ] unsigned char 
  6765 ;;  signs           1   38[BANK0 ] unsigned char 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;                  4   22[BANK0 ] unsigned char 
  6768 ;; Registers used:
  6769 ;;		wreg, status,2, status,0
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6775 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;Total ram usage:       20 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    3
  6782 ;; This function calls:
  6783 ;;		Nothing
  6784 ;; This function is called by:
  6785 ;;		_main
  6786 ;;		_sprintf
  6787 ;;		___flsub
  6788 ;;		_set_pwm1_percent
  6789 ;;		_set_pwm1_voltage
  6790 ;;		_set_pwm1_general
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text14
  6795  002916                     __ptext14:
  6796                           	opt stack 0
  6797  002916                     ___fladd:
  6798                           	opt stack 25
  6799                           
  6800                           ;incstack = 0
  6801  002916  0100               	movlb	0	; () banked
  6802  002918  5199               	movf	(___fladd@b+3)& (0+255),w,b
  6803  00291A  0B80               	andlw	128
  6804  00291C  6FA6               	movwf	___fladd@signs& (0+255),b
  6805  00291E  5199               	movf	(___fladd@b+3)& (0+255),w,b
  6806  002920  2599               	addwf	(___fladd@b+3)& (0+255),w,b
  6807  002922  6FA8               	movwf	___fladd@bexp& (0+255),b
  6808                           
  6809                           ; BSR set to: 0
  6810  002924  BF98               	btfsc	(___fladd@b+2)& (0+255),7,b
  6811                           
  6812                           ; BSR set to: 0
  6813  002926  81A8               	bsf	___fladd@bexp& (0+255),0,b
  6814                           
  6815                           ; BSR set to: 0
  6816                           
  6817                           ; BSR set to: 0
  6818  002928  51A8               	movf	___fladd@bexp& (0+255),w,b
  6819  00292A  B4D8               	btfsc	status,2,c
  6820  00292C  D00D               	goto	l1012
  6821                           
  6822                           ; BSR set to: 0
  6823  00292E  29A8               	incf	___fladd@bexp& (0+255),w,b
  6824  002930  A4D8               	btfss	status,2,c
  6825  002932  D008               	goto	l1013
  6826                           
  6827                           ; BSR set to: 0
  6828  002934  0E00               	movlw	0
  6829  002936  6F96               	movwf	___fladd@b& (0+255),b
  6830  002938  0E00               	movlw	0
  6831  00293A  6F97               	movwf	(___fladd@b+1)& (0+255),b
  6832  00293C  0E00               	movlw	0
  6833  00293E  6F98               	movwf	(___fladd@b+2)& (0+255),b
  6834  002940  0E00               	movlw	0
  6835  002942  6F99               	movwf	(___fladd@b+3)& (0+255),b
  6836  002944                     l1013:
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841  002944  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  6842  002946  D006               	goto	L6
  6843  002948                     l1012:
  6844                           
  6845                           ; BSR set to: 0
  6846                           
  6847                           ; BSR set to: 0
  6848  002948  0E00               	movlw	0
  6849  00294A  6F96               	movwf	___fladd@b& (0+255),b
  6850  00294C  0E00               	movlw	0
  6851  00294E  6F97               	movwf	(___fladd@b+1)& (0+255),b
  6852  002950  0E00               	movlw	0
  6853  002952  6F98               	movwf	(___fladd@b+2)& (0+255),b
  6854  002954                     L6:
  6855  002954  0E00               	movlw	0
  6856  002956  6F99               	movwf	(___fladd@b+3)& (0+255),b
  6857                           
  6858                           ; BSR set to: 0
  6859                           
  6860                           ; BSR set to: 0
  6861  002958  519D               	movf	(___fladd@a+3)& (0+255),w,b
  6862  00295A  0B80               	andlw	128
  6863  00295C  6FA7               	movwf	___fladd@aexp& (0+255),b
  6864                           
  6865                           ; BSR set to: 0
  6866  00295E  51A6               	movf	___fladd@signs& (0+255),w,b
  6867  002960  19A7               	xorwf	___fladd@aexp& (0+255),w,b
  6868  002962  A4D8               	btfss	status,2,c
  6869                           
  6870                           ; BSR set to: 0
  6871  002964  8DA6               	bsf	___fladd@signs& (0+255),6,b
  6872                           
  6873                           ; BSR set to: 0
  6874                           
  6875                           ; BSR set to: 0
  6876  002966  519D               	movf	(___fladd@a+3)& (0+255),w,b
  6877  002968  259D               	addwf	(___fladd@a+3)& (0+255),w,b
  6878  00296A  6FA7               	movwf	___fladd@aexp& (0+255),b
  6879                           
  6880                           ; BSR set to: 0
  6881  00296C  BF9C               	btfsc	(___fladd@a+2)& (0+255),7,b
  6882                           
  6883                           ; BSR set to: 0
  6884  00296E  81A7               	bsf	___fladd@aexp& (0+255),0,b
  6885                           
  6886                           ; BSR set to: 0
  6887                           
  6888                           ; BSR set to: 0
  6889  002970  51A7               	movf	___fladd@aexp& (0+255),w,b
  6890  002972  B4D8               	btfsc	status,2,c
  6891  002974  D00D               	goto	l1017
  6892                           
  6893                           ; BSR set to: 0
  6894  002976  29A7               	incf	___fladd@aexp& (0+255),w,b
  6895  002978  A4D8               	btfss	status,2,c
  6896  00297A  D008               	goto	l1018
  6897                           
  6898                           ; BSR set to: 0
  6899  00297C  0E00               	movlw	0
  6900  00297E  6F9A               	movwf	___fladd@a& (0+255),b
  6901  002980  0E00               	movlw	0
  6902  002982  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  6903  002984  0E00               	movlw	0
  6904  002986  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  6905  002988  0E00               	movlw	0
  6906  00298A  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  6907  00298C                     l1018:
  6908                           
  6909                           ; BSR set to: 0
  6910                           
  6911                           ; BSR set to: 0
  6912  00298C  8F9C               	bsf	(___fladd@a+2)& (0+255),7,b
  6913  00298E  D006               	goto	L7
  6914  002990                     l1017:
  6915                           
  6916                           ; BSR set to: 0
  6917                           
  6918                           ; BSR set to: 0
  6919  002990  0E00               	movlw	0
  6920  002992  6F9A               	movwf	___fladd@a& (0+255),b
  6921  002994  0E00               	movlw	0
  6922  002996  6F9B               	movwf	(___fladd@a+1)& (0+255),b
  6923  002998  0E00               	movlw	0
  6924  00299A  6F9C               	movwf	(___fladd@a+2)& (0+255),b
  6925  00299C                     L7:
  6926  00299C  0E00               	movlw	0
  6927  00299E  6F9D               	movwf	(___fladd@a+3)& (0+255),b
  6928                           
  6929                           ; BSR set to: 0
  6930                           
  6931                           ; BSR set to: 0
  6932  0029A0  51A8               	movf	___fladd@bexp& (0+255),w,b
  6933  0029A2  5DA7               	subwf	___fladd@aexp& (0+255),w,b
  6934  0029A4  B0D8               	btfsc	status,0,c
  6935  0029A6  D022               	goto	l1020
  6936                           
  6937                           ; BSR set to: 0
  6938  0029A8  ADA6               	btfss	___fladd@signs& (0+255),6,b
  6939  0029AA  D002               	goto	l1021
  6940                           
  6941                           ; BSR set to: 0
  6942  0029AC  0E80               	movlw	128
  6943  0029AE  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  6944  0029B0                     l1021:
  6945                           
  6946                           ; BSR set to: 0
  6947                           
  6948                           ; BSR set to: 0
  6949  0029B0  C0A8  F0A9         	movff	___fladd@bexp,___fladd@grs
  6950                           
  6951                           ; BSR set to: 0
  6952  0029B4  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  6953                           
  6954                           ; BSR set to: 0
  6955  0029B8  C0A9  F0A7         	movff	___fladd@grs,___fladd@aexp
  6956                           
  6957                           ; BSR set to: 0
  6958  0029BC  C096  F0A9         	movff	___fladd@b,___fladd@grs
  6959                           
  6960                           ; BSR set to: 0
  6961  0029C0  C09A  F096         	movff	___fladd@a,___fladd@b
  6962                           
  6963                           ; BSR set to: 0
  6964  0029C4  C0A9  F09A         	movff	___fladd@grs,___fladd@a
  6965                           
  6966                           ; BSR set to: 0
  6967  0029C8  C097  F0A9         	movff	___fladd@b+1,___fladd@grs
  6968                           
  6969                           ; BSR set to: 0
  6970  0029CC  C09B  F097         	movff	___fladd@a+1,___fladd@b+1
  6971                           
  6972                           ; BSR set to: 0
  6973  0029D0  C0A9  F09B         	movff	___fladd@grs,___fladd@a+1
  6974                           
  6975                           ; BSR set to: 0
  6976  0029D4  C098  F0A9         	movff	___fladd@b+2,___fladd@grs
  6977                           
  6978                           ; BSR set to: 0
  6979  0029D8  C09C  F098         	movff	___fladd@a+2,___fladd@b+2
  6980                           
  6981                           ; BSR set to: 0
  6982  0029DC  C0A9  F09C         	movff	___fladd@grs,___fladd@a+2
  6983                           
  6984                           ; BSR set to: 0
  6985  0029E0  C099  F0A9         	movff	___fladd@b+3,___fladd@grs
  6986                           
  6987                           ; BSR set to: 0
  6988  0029E4  C09D  F099         	movff	___fladd@a+3,___fladd@b+3
  6989                           
  6990                           ; BSR set to: 0
  6991  0029E8  C0A9  F09D         	movff	___fladd@grs,___fladd@a+3
  6992  0029EC                     l1020:
  6993                           
  6994                           ; BSR set to: 0
  6995                           
  6996                           ; BSR set to: 0
  6997  0029EC  0E00               	movlw	0
  6998  0029EE  6FA9               	movwf	___fladd@grs& (0+255),b
  6999                           
  7000                           ; BSR set to: 0
  7001  0029F0  51A8               	movf	___fladd@bexp& (0+255),w,b
  7002  0029F2  6F9E               	movwf	??___fladd& (0+255),b
  7003  0029F4  6B9F               	clrf	(??___fladd+1)& (0+255),b
  7004  0029F6  1F9E               	comf	??___fladd& (0+255),f,b
  7005  0029F8  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  7006  0029FA  4B9E               	infsnz	??___fladd& (0+255),f,b
  7007  0029FC  2B9F               	incf	(??___fladd+1)& (0+255),f,b
  7008  0029FE  51A7               	movf	___fladd@aexp& (0+255),w,b
  7009  002A00  6FA0               	movwf	(??___fladd+2)& (0+255),b
  7010  002A02  6BA1               	clrf	(??___fladd+3)& (0+255),b
  7011  002A04  519E               	movf	??___fladd& (0+255),w,b
  7012  002A06  27A0               	addwf	(??___fladd+2)& (0+255),f,b
  7013  002A08  519F               	movf	(??___fladd+1)& (0+255),w,b
  7014  002A0A  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  7015  002A0C  BFA1               	btfsc	(??___fladd+3)& (0+255),7,b
  7016  002A0E  D02C               	goto	l1024
  7017  002A10  51A1               	movf	(??___fladd+3)& (0+255),w,b
  7018  002A12  E104               	bnz	u5530
  7019  002A14  0E1A               	movlw	26
  7020  002A16  5DA0               	subwf	(??___fladd+2)& (0+255),w,b
  7021  002A18  A0D8               	btfss	status,0,c
  7022  002A1A  D026               	goto	l1024
  7023  002A1C                     u5530:
  7024                           
  7025                           ; BSR set to: 0
  7026  002A1C  5196               	movf	___fladd@b& (0+255),w,b
  7027  002A1E  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  7028  002A20  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  7029  002A22  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  7030  002A24  B4D8               	btfsc	status,2,c
  7031  002A26  D002               	goto	u5540
  7032  002A28  0E01               	movlw	1
  7033  002A2A  D001               	goto	u5550
  7034  002A2C                     u5540:
  7035  002A2C  0E00               	movlw	0
  7036  002A2E                     u5550:
  7037  002A2E  6FA9               	movwf	___fladd@grs& (0+255),b
  7038                           
  7039                           ; BSR set to: 0
  7040  002A30  0E00               	movlw	0
  7041  002A32  6F96               	movwf	___fladd@b& (0+255),b
  7042  002A34  0E00               	movlw	0
  7043  002A36  6F97               	movwf	(___fladd@b+1)& (0+255),b
  7044  002A38  0E00               	movlw	0
  7045  002A3A  6F98               	movwf	(___fladd@b+2)& (0+255),b
  7046  002A3C  0E00               	movlw	0
  7047  002A3E  6F99               	movwf	(___fladd@b+3)& (0+255),b
  7048                           
  7049                           ; BSR set to: 0
  7050  002A40  C0A7  F0A8         	movff	___fladd@aexp,___fladd@bexp
  7051  002A44  D015               	goto	u5580
  7052  002A46                     l1025:
  7053                           
  7054                           ; BSR set to: 0
  7055  002A46  A1A9               	btfss	___fladd@grs& (0+255),0,b
  7056  002A48  D005               	goto	l1026
  7057                           
  7058                           ; BSR set to: 0
  7059  002A4A  90D8               	bcf	status,0,c
  7060  002A4C  31A9               	rrcf	___fladd@grs& (0+255),w,b
  7061  002A4E  0901               	iorlw	1
  7062  002A50  6FA9               	movwf	___fladd@grs& (0+255),b
  7063  002A52  D002               	goto	l1027
  7064  002A54                     l1026:
  7065                           
  7066                           ; BSR set to: 0
  7067                           
  7068                           ; BSR set to: 0
  7069  002A54  90D8               	bcf	status,0,c
  7070  002A56  33A9               	rrcf	___fladd@grs& (0+255),f,b
  7071  002A58                     l1027:
  7072                           
  7073                           ; BSR set to: 0
  7074                           
  7075                           ; BSR set to: 0
  7076  002A58  B196               	btfsc	___fladd@b& (0+255),0,b
  7077                           
  7078                           ; BSR set to: 0
  7079  002A5A  8FA9               	bsf	___fladd@grs& (0+255),7,b
  7080                           
  7081                           ; BSR set to: 0
  7082                           
  7083                           ; BSR set to: 0
  7084  002A5C  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  7085  002A5E  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  7086  002A60  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  7087  002A62  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  7088  002A64  3396               	rrcf	___fladd@b& (0+255),f,b
  7089                           
  7090                           ; BSR set to: 0
  7091  002A66  2BA8               	incf	___fladd@bexp& (0+255),f,b
  7092  002A68                     l1024:
  7093                           
  7094                           ; BSR set to: 0
  7095  002A68  51A7               	movf	___fladd@aexp& (0+255),w,b
  7096  002A6A  5DA8               	subwf	___fladd@bexp& (0+255),w,b
  7097  002A6C  A0D8               	btfss	status,0,c
  7098  002A6E  D7EB               	goto	l1025
  7099  002A70                     u5580:
  7100                           
  7101                           ; BSR set to: 0
  7102                           
  7103                           ; BSR set to: 0
  7104  002A70  BDA6               	btfsc	___fladd@signs& (0+255),6,b
  7105  002A72  D029               	goto	l1030
  7106                           
  7107                           ; BSR set to: 0
  7108  002A74  51A8               	movf	___fladd@bexp& (0+255),w,b
  7109  002A76  A4D8               	btfss	status,2,c
  7110  002A78  D009               	goto	l1031
  7111                           
  7112                           ; BSR set to: 0
  7113  002A7A  0E00               	movlw	0
  7114  002A7C  6F96               	movwf	?___fladd& (0+255),b
  7115  002A7E  0E00               	movlw	0
  7116  002A80  6F97               	movwf	(?___fladd+1)& (0+255),b
  7117  002A82  0E00               	movlw	0
  7118  002A84  6F98               	movwf	(?___fladd+2)& (0+255),b
  7119  002A86  0E00               	movlw	0
  7120  002A88  6F99               	movwf	(?___fladd+3)& (0+255),b
  7121                           
  7122                           ; BSR set to: 0
  7123  002A8A  0012               	return	
  7124  002A8C                     l1031:
  7125                           
  7126                           ; BSR set to: 0
  7127                           
  7128                           ; BSR set to: 0
  7129  002A8C  519A               	movf	___fladd@a& (0+255),w,b
  7130  002A8E  2796               	addwf	___fladd@b& (0+255),f,b
  7131  002A90  519B               	movf	(___fladd@a+1)& (0+255),w,b
  7132  002A92  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  7133  002A94  519C               	movf	(___fladd@a+2)& (0+255),w,b
  7134  002A96  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  7135  002A98  519D               	movf	(___fladd@a+3)& (0+255),w,b
  7136  002A9A  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  7137                           
  7138                           ; BSR set to: 0
  7139  002A9C  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  7140  002A9E  D083               	goto	u5710
  7141                           
  7142                           ; BSR set to: 0
  7143  002AA0  A1A9               	btfss	___fladd@grs& (0+255),0,b
  7144  002AA2  D006               	goto	l1034
  7145                           
  7146                           ; BSR set to: 0
  7147  002AA4  90D8               	bcf	status,0,c
  7148  002AA6  33A9               	rrcf	___fladd@grs& (0+255),f,b
  7149  002AA8  51A9               	movf	___fladd@grs& (0+255),w,b
  7150  002AAA  0901               	iorlw	1
  7151  002AAC  6FA9               	movwf	___fladd@grs& (0+255),b
  7152  002AAE  D002               	goto	l1035
  7153  002AB0                     l1034:
  7154                           
  7155                           ; BSR set to: 0
  7156                           
  7157                           ; BSR set to: 0
  7158  002AB0  90D8               	bcf	status,0,c
  7159  002AB2  33A9               	rrcf	___fladd@grs& (0+255),f,b
  7160  002AB4                     l1035:
  7161                           
  7162                           ; BSR set to: 0
  7163                           
  7164                           ; BSR set to: 0
  7165  002AB4  B196               	btfsc	___fladd@b& (0+255),0,b
  7166                           
  7167                           ; BSR set to: 0
  7168  002AB6  8FA9               	bsf	___fladd@grs& (0+255),7,b
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173  002AB8  3599               	rlcf	(___fladd@b+3)& (0+255),w,b
  7174  002ABA  3399               	rrcf	(___fladd@b+3)& (0+255),f,b
  7175  002ABC  3398               	rrcf	(___fladd@b+2)& (0+255),f,b
  7176  002ABE  3397               	rrcf	(___fladd@b+1)& (0+255),f,b
  7177  002AC0  3396               	rrcf	___fladd@b& (0+255),f,b
  7178                           
  7179                           ; BSR set to: 0
  7180  002AC2  2BA8               	incf	___fladd@bexp& (0+255),f,b
  7181                           
  7182                           ; BSR set to: 0
  7183  002AC4  D070               	goto	u5710
  7184  002AC6                     l1030:
  7185                           
  7186                           ; BSR set to: 0
  7187                           
  7188                           ; BSR set to: 0
  7189  002AC6  519A               	movf	___fladd@a& (0+255),w,b
  7190  002AC8  5D96               	subwf	___fladd@b& (0+255),w,b
  7191  002ACA  519B               	movf	(___fladd@a+1)& (0+255),w,b
  7192  002ACC  5997               	subwfb	(___fladd@b+1)& (0+255),w,b
  7193  002ACE  519C               	movf	(___fladd@a+2)& (0+255),w,b
  7194  002AD0  5998               	subwfb	(___fladd@b+2)& (0+255),w,b
  7195  002AD2  5199               	movf	(___fladd@b+3)& (0+255),w,b
  7196  002AD4  0A80               	xorlw	128
  7197  002AD6  6F9E               	movwf	??___fladd& (0+255),b
  7198  002AD8  519D               	movf	(___fladd@a+3)& (0+255),w,b
  7199  002ADA  0A80               	xorlw	128
  7200  002ADC  599E               	subwfb	??___fladd& (0+255),w,b
  7201  002ADE  B0D8               	btfsc	status,0,c
  7202  002AE0  D036               	goto	l1038
  7203                           
  7204                           ; BSR set to: 0
  7205  002AE2  C096  F09E         	movff	___fladd@b,??___fladd
  7206  002AE6  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  7207  002AEA  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  7208  002AEE  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  7209  002AF2  1F9E               	comf	??___fladd& (0+255),f,b
  7210  002AF4  1F9F               	comf	(??___fladd+1)& (0+255),f,b
  7211  002AF6  1FA0               	comf	(??___fladd+2)& (0+255),f,b
  7212  002AF8  1FA1               	comf	(??___fladd+3)& (0+255),f,b
  7213  002AFA  2B9E               	incf	??___fladd& (0+255),f,b
  7214  002AFC  0E00               	movlw	0
  7215  002AFE  239F               	addwfc	(??___fladd+1)& (0+255),f,b
  7216  002B00  23A0               	addwfc	(??___fladd+2)& (0+255),f,b
  7217  002B02  23A1               	addwfc	(??___fladd+3)& (0+255),f,b
  7218  002B04  519A               	movf	___fladd@a& (0+255),w,b
  7219  002B06  259E               	addwf	??___fladd& (0+255),w,b
  7220  002B08  6FA2               	movwf	(??___fladd+4)& (0+255),b
  7221  002B0A  519B               	movf	(___fladd@a+1)& (0+255),w,b
  7222  002B0C  219F               	addwfc	(??___fladd+1)& (0+255),w,b
  7223  002B0E  6FA3               	movwf	(??___fladd+5)& (0+255),b
  7224  002B10  519C               	movf	(___fladd@a+2)& (0+255),w,b
  7225  002B12  21A0               	addwfc	(??___fladd+2)& (0+255),w,b
  7226  002B14  6FA4               	movwf	(??___fladd+6)& (0+255),b
  7227  002B16  519D               	movf	(___fladd@a+3)& (0+255),w,b
  7228  002B18  21A1               	addwfc	(??___fladd+3)& (0+255),w,b
  7229  002B1A  6FA5               	movwf	(??___fladd+7)& (0+255),b
  7230  002B1C  0EFF               	movlw	255
  7231  002B1E  25A2               	addwf	(??___fladd+4)& (0+255),w,b
  7232  002B20  6F96               	movwf	___fladd@b& (0+255),b
  7233  002B22  0EFF               	movlw	255
  7234  002B24  21A3               	addwfc	(??___fladd+5)& (0+255),w,b
  7235  002B26  6F97               	movwf	(___fladd@b+1)& (0+255),b
  7236  002B28  0EFF               	movlw	255
  7237  002B2A  21A4               	addwfc	(??___fladd+6)& (0+255),w,b
  7238  002B2C  6F98               	movwf	(___fladd@b+2)& (0+255),b
  7239  002B2E  0EFF               	movlw	255
  7240  002B30  21A5               	addwfc	(??___fladd+7)& (0+255),w,b
  7241  002B32  6F99               	movwf	(___fladd@b+3)& (0+255),b
  7242  002B34  0E80               	movlw	128
  7243  002B36  1BA6               	xorwf	___fladd@signs& (0+255),f,b
  7244                           
  7245                           ; BSR set to: 0
  7246  002B38  6DA9               	negf	___fladd@grs& (0+255),b
  7247                           
  7248                           ; BSR set to: 0
  7249  002B3A  51A9               	movf	___fladd@grs& (0+255),w,b
  7250  002B3C  A4D8               	btfss	status,2,c
  7251  002B3E  D00F               	goto	l1040
  7252                           
  7253                           ; BSR set to: 0
  7254  002B40  0E01               	movlw	1
  7255  002B42  2796               	addwf	___fladd@b& (0+255),f,b
  7256  002B44  0E00               	movlw	0
  7257  002B46  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  7258  002B48  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  7259  002B4A  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  7260                           
  7261                           ; BSR set to: 0
  7262  002B4C  D008               	goto	l1040
  7263  002B4E                     l1038:
  7264                           
  7265                           ; BSR set to: 0
  7266                           
  7267                           ; BSR set to: 0
  7268  002B4E  519A               	movf	___fladd@a& (0+255),w,b
  7269  002B50  5F96               	subwf	___fladd@b& (0+255),f,b
  7270  002B52  519B               	movf	(___fladd@a+1)& (0+255),w,b
  7271  002B54  5B97               	subwfb	(___fladd@b+1)& (0+255),f,b
  7272  002B56  519C               	movf	(___fladd@a+2)& (0+255),w,b
  7273  002B58  5B98               	subwfb	(___fladd@b+2)& (0+255),f,b
  7274  002B5A  519D               	movf	(___fladd@a+3)& (0+255),w,b
  7275  002B5C  5B99               	subwfb	(___fladd@b+3)& (0+255),f,b
  7276  002B5E                     l1040:
  7277                           
  7278                           ; BSR set to: 0
  7279  002B5E  5196               	movf	___fladd@b& (0+255),w,b
  7280  002B60  1197               	iorwf	(___fladd@b+1)& (0+255),w,b
  7281  002B62  1198               	iorwf	(___fladd@b+2)& (0+255),w,b
  7282  002B64  1199               	iorwf	(___fladd@b+3)& (0+255),w,b
  7283  002B66  A4D8               	btfss	status,2,c
  7284  002B68  D01C               	goto	l1047
  7285                           
  7286                           ; BSR set to: 0
  7287  002B6A  51A9               	movf	___fladd@grs& (0+255),w,b
  7288  002B6C  A4D8               	btfss	status,2,c
  7289  002B6E  D019               	goto	l1047
  7290                           
  7291                           ; BSR set to: 0
  7292  002B70  0E00               	movlw	0
  7293  002B72  6F96               	movwf	?___fladd& (0+255),b
  7294  002B74  0E00               	movlw	0
  7295  002B76  6F97               	movwf	(?___fladd+1)& (0+255),b
  7296  002B78  0E00               	movlw	0
  7297  002B7A  6F98               	movwf	(?___fladd+2)& (0+255),b
  7298  002B7C  0E00               	movlw	0
  7299  002B7E  6F99               	movwf	(?___fladd+3)& (0+255),b
  7300                           
  7301                           ; BSR set to: 0
  7302  002B80  0012               	return	
  7303  002B82                     
  7304                           ; BSR set to: 0
  7305                           
  7306                           ; BSR set to: 0
  7307  002B82  90D8               	bcf	status,0,c
  7308  002B84  3796               	rlcf	___fladd@b& (0+255),f,b
  7309  002B86  3797               	rlcf	(___fladd@b+1)& (0+255),f,b
  7310  002B88  3798               	rlcf	(___fladd@b+2)& (0+255),f,b
  7311  002B8A  3799               	rlcf	(___fladd@b+3)& (0+255),f,b
  7312                           
  7313                           ; BSR set to: 0
  7314  002B8C  BFA9               	btfsc	___fladd@grs& (0+255),7,b
  7315                           
  7316                           ; BSR set to: 0
  7317  002B8E  8196               	bsf	___fladd@b& (0+255),0,b
  7318                           
  7319                           ; BSR set to: 0
  7320                           
  7321                           ; BSR set to: 0
  7322  002B90  A1A9               	btfss	___fladd@grs& (0+255),0,b
  7323  002B92  D002               	goto	l1045
  7324                           
  7325                           ; BSR set to: 0
  7326  002B94  80D8               	bsf	status,0,c
  7327  002B96  D001               	goto	L8
  7328  002B98                     l1045:
  7329                           
  7330                           ; BSR set to: 0
  7331                           
  7332                           ; BSR set to: 0
  7333  002B98  90D8               	bcf	status,0,c
  7334  002B9A                     L8:
  7335  002B9A  37A9               	rlcf	___fladd@grs& (0+255),f,b
  7336                           
  7337                           ; BSR set to: 0
  7338                           
  7339                           ; BSR set to: 0
  7340  002B9C  51A8               	movf	___fladd@bexp& (0+255),w,b
  7341  002B9E  A4D8               	btfss	status,2,c
  7342                           
  7343                           ; BSR set to: 0
  7344  002BA0  07A8               	decf	___fladd@bexp& (0+255),f,b
  7345  002BA2                     l1047:
  7346                           
  7347                           ; BSR set to: 0
  7348                           
  7349                           ; BSR set to: 0
  7350                           
  7351                           ; BSR set to: 0
  7352  002BA2  AF98               	btfss	(___fladd@b+2)& (0+255),7,b
  7353  002BA4  D7EE               	goto	l1043
  7354  002BA6                     u5710:
  7355                           
  7356                           ; BSR set to: 0
  7357                           
  7358                           ; BSR set to: 0
  7359                           
  7360                           ; BSR set to: 0
  7361  002BA6  0E00               	movlw	0
  7362  002BA8  6FA7               	movwf	___fladd@aexp& (0+255),b
  7363                           
  7364                           ; BSR set to: 0
  7365  002BAA  AFA9               	btfss	___fladd@grs& (0+255),7,b
  7366  002BAC  D00A               	goto	l1052
  7367                           
  7368                           ; BSR set to: 0
  7369  002BAE  C0A9  F09E         	movff	___fladd@grs,??___fladd
  7370  002BB2  0E7F               	movlw	127
  7371  002BB4  179E               	andwf	??___fladd& (0+255),f,b
  7372  002BB6  A4D8               	btfss	status,2,c
  7373  002BB8  D002               	goto	u5740
  7374                           
  7375                           ; BSR set to: 0
  7376                           
  7377                           ; BSR set to: 0
  7378  002BBA  A196               	btfss	___fladd@b& (0+255),0,b
  7379  002BBC  D002               	goto	l1052
  7380  002BBE                     u5740:
  7381                           
  7382                           ; BSR set to: 0
  7383  002BBE  0E01               	movlw	1
  7384  002BC0  6FA7               	movwf	___fladd@aexp& (0+255),b
  7385  002BC2                     l1052:
  7386                           
  7387                           ; BSR set to: 0
  7388                           
  7389                           ; BSR set to: 0
  7390                           
  7391                           ; BSR set to: 0
  7392  002BC2  51A7               	movf	___fladd@aexp& (0+255),w,b
  7393  002BC4  B4D8               	btfsc	status,2,c
  7394  002BC6  D020               	goto	l1055
  7395                           
  7396                           ; BSR set to: 0
  7397  002BC8  0E01               	movlw	1
  7398  002BCA  2796               	addwf	___fladd@b& (0+255),f,b
  7399  002BCC  0E00               	movlw	0
  7400  002BCE  2397               	addwfc	(___fladd@b+1)& (0+255),f,b
  7401  002BD0  2398               	addwfc	(___fladd@b+2)& (0+255),f,b
  7402  002BD2  2399               	addwfc	(___fladd@b+3)& (0+255),f,b
  7403                           
  7404                           ; BSR set to: 0
  7405  002BD4  A199               	btfss	(___fladd@b+3)& (0+255),0,b
  7406  002BD6  D018               	goto	l1055
  7407                           
  7408                           ; BSR set to: 0
  7409  002BD8  C096  F09E         	movff	___fladd@b,??___fladd
  7410  002BDC  C097  F09F         	movff	___fladd@b+1,??___fladd+1
  7411  002BE0  C098  F0A0         	movff	___fladd@b+2,??___fladd+2
  7412  002BE4  C099  F0A1         	movff	___fladd@b+3,??___fladd+3
  7413  002BE8  35A1               	rlcf	(??___fladd+3)& (0+255),w,b
  7414  002BEA  33A1               	rrcf	(??___fladd+3)& (0+255),f,b
  7415  002BEC  33A0               	rrcf	(??___fladd+2)& (0+255),f,b
  7416  002BEE  339F               	rrcf	(??___fladd+1)& (0+255),f,b
  7417  002BF0  339E               	rrcf	??___fladd& (0+255),f,b
  7418  002BF2  C09E  F096         	movff	??___fladd,___fladd@b
  7419  002BF6  C09F  F097         	movff	??___fladd+1,___fladd@b+1
  7420  002BFA  C0A0  F098         	movff	??___fladd+2,___fladd@b+2
  7421  002BFE  C0A1  F099         	movff	??___fladd+3,___fladd@b+3
  7422  002C02  29A8               	incf	___fladd@bexp& (0+255),w,b
  7423  002C04  A4D8               	btfss	status,2,c
  7424                           
  7425                           ; BSR set to: 0
  7426  002C06  2BA8               	incf	___fladd@bexp& (0+255),f,b
  7427  002C08                     l1055:
  7428                           
  7429                           ; BSR set to: 0
  7430                           
  7431                           ; BSR set to: 0
  7432                           
  7433                           ; BSR set to: 0
  7434                           
  7435                           ; BSR set to: 0
  7436  002C08  29A8               	incf	___fladd@bexp& (0+255),w,b
  7437  002C0A  B4D8               	btfsc	status,2,c
  7438  002C0C  D003               	goto	u5790
  7439                           
  7440                           ; BSR set to: 0
  7441  002C0E  51A8               	movf	___fladd@bexp& (0+255),w,b
  7442  002C10  A4D8               	btfss	status,2,c
  7443  002C12  D00D               	goto	l1059
  7444  002C14                     u5790:
  7445                           
  7446                           ; BSR set to: 0
  7447                           
  7448                           ; BSR set to: 0
  7449  002C14  0E00               	movlw	0
  7450  002C16  6F96               	movwf	___fladd@b& (0+255),b
  7451  002C18  0E00               	movlw	0
  7452  002C1A  6F97               	movwf	(___fladd@b+1)& (0+255),b
  7453  002C1C  0E00               	movlw	0
  7454  002C1E  6F98               	movwf	(___fladd@b+2)& (0+255),b
  7455  002C20  0E00               	movlw	0
  7456  002C22  6F99               	movwf	(___fladd@b+3)& (0+255),b
  7457  002C24  51A8               	movf	___fladd@bexp& (0+255),w,b
  7458  002C26  A4D8               	btfss	status,2,c
  7459  002C28  D002               	goto	l1059
  7460                           
  7461                           ; BSR set to: 0
  7462  002C2A  0E00               	movlw	0
  7463  002C2C  6FA6               	movwf	___fladd@signs& (0+255),b
  7464  002C2E                     l1059:
  7465                           
  7466                           ; BSR set to: 0
  7467                           
  7468                           ; BSR set to: 0
  7469                           
  7470                           ; BSR set to: 0
  7471  002C2E  A1A8               	btfss	___fladd@bexp& (0+255),0,b
  7472  002C30  D002               	goto	l1060
  7473                           
  7474                           ; BSR set to: 0
  7475  002C32  8F98               	bsf	(___fladd@b+2)& (0+255),7,b
  7476  002C34  D001               	goto	l1061
  7477  002C36                     l1060:
  7478                           
  7479                           ; BSR set to: 0
  7480                           
  7481                           ; BSR set to: 0
  7482  002C36  9F98               	bcf	(___fladd@b+2)& (0+255),7,b
  7483  002C38                     l1061:
  7484                           
  7485                           ; BSR set to: 0
  7486                           
  7487                           ; BSR set to: 0
  7488  002C38  90D8               	bcf	status,0,c
  7489  002C3A  31A8               	rrcf	___fladd@bexp& (0+255),w,b
  7490  002C3C  6F99               	movwf	(___fladd@b+3)& (0+255),b
  7491                           
  7492                           ; BSR set to: 0
  7493  002C3E  BFA6               	btfsc	___fladd@signs& (0+255),7,b
  7494                           
  7495                           ; BSR set to: 0
  7496  002C40  8F99               	bsf	(___fladd@b+3)& (0+255),7,b
  7497                           
  7498                           ; BSR set to: 0
  7499                           
  7500                           ; BSR set to: 0
  7501  002C42  C096  F096         	movff	___fladd@b,?___fladd
  7502  002C46  C097  F097         	movff	___fladd@b+1,?___fladd+1
  7503  002C4A  C098  F098         	movff	___fladd@b+2,?___fladd+2
  7504  002C4E  C099  F099         	movff	___fladd@b+3,?___fladd+3
  7505  002C52  0012               	return	
  7506  002C54                     __end_of___fladd:
  7507                           	opt stack 0
  7508                           tblptru	equ	0xFF8
  7509                           tblptrh	equ	0xFF7
  7510                           tblptrl	equ	0xFF6
  7511                           tablat	equ	0xFF5
  7512                           prodh	equ	0xFF4
  7513                           prodl	equ	0xFF3
  7514                           postinc0	equ	0xFEE
  7515                           wreg	equ	0xFE8
  7516                           postdec1	equ	0xFE5
  7517                           fsr1l	equ	0xFE1
  7518                           indf2	equ	0xFDF
  7519                           postinc2	equ	0xFDE
  7520                           fsr2h	equ	0xFDA
  7521                           fsr2l	equ	0xFD9
  7522                           status	equ	0xFD8
  7523                           
  7524 ;; *************** function ___flneg *****************
  7525 ;; Defined at:
  7526 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  7527 ;; Parameters:    Size  Location     Type
  7528 ;;  f1              4   22[COMRAM] unsigned char 
  7529 ;; Auto vars:     Size  Location     Type
  7530 ;;		None
  7531 ;; Return value:  Size  Location     Type
  7532 ;;                  4   22[COMRAM] unsigned char 
  7533 ;; Registers used:
  7534 ;;		wreg, status,2, status,0
  7535 ;; Tracked objects:
  7536 ;;		On entry : 0/0
  7537 ;;		On exit  : 0/0
  7538 ;;		Unchanged: 0/0
  7539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7543 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7544 ;;Total ram usage:        4 bytes
  7545 ;; Hardware stack levels used:    1
  7546 ;; Hardware stack levels required when called:    3
  7547 ;; This function calls:
  7548 ;;		Nothing
  7549 ;; This function is called by:
  7550 ;;		_sprintf
  7551 ;;		_set_pwm1_general
  7552 ;; This function uses a non-reentrant model
  7553 ;;
  7554                           
  7555                           	psect	text15
  7556  004014                     __ptext15:
  7557                           	opt stack 0
  7558  004014                     ___flneg:
  7559                           	opt stack 26
  7560                           
  7561                           ; BSR set to: 0
  7562                           ;incstack = 0
  7563  004014  5017               	movf	___flneg@f1,w,c
  7564  004016  1018               	iorwf	___flneg@f1+1,w,c
  7565  004018  1019               	iorwf	___flneg@f1+2,w,c
  7566  00401A  101A               	iorwf	___flneg@f1+3,w,c
  7567  00401C  B4D8               	btfsc	status,2,c
  7568  00401E  D008               	goto	l764
  7569  004020  0E00               	movlw	0
  7570  004022  1A17               	xorwf	___flneg@f1,f,c
  7571  004024  0E00               	movlw	0
  7572  004026  1A18               	xorwf	___flneg@f1+1,f,c
  7573  004028  0E00               	movlw	0
  7574  00402A  1A19               	xorwf	___flneg@f1+2,f,c
  7575  00402C  0E80               	movlw	128
  7576  00402E  1A1A               	xorwf	___flneg@f1+3,f,c
  7577  004030                     l764:
  7578  004030  C017  F017         	movff	___flneg@f1,?___flneg
  7579  004034  C018  F018         	movff	___flneg@f1+1,?___flneg+1
  7580  004038  C019  F019         	movff	___flneg@f1+2,?___flneg+2
  7581  00403C  C01A  F01A         	movff	___flneg@f1+3,?___flneg+3
  7582  004040  0012               	return	
  7583  004042                     __end_of___flneg:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           postinc0	equ	0xFEE
  7592                           wreg	equ	0xFE8
  7593                           postdec1	equ	0xFE5
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           
  7601 ;; *************** function ___flge *****************
  7602 ;; Defined at:
  7603 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  7604 ;; Parameters:    Size  Location     Type
  7605 ;;  ff1             4   22[COMRAM] unsigned char 
  7606 ;;  ff2             4   26[COMRAM] unsigned char 
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;		None               void
  7611 ;; Registers used:
  7612 ;;		wreg, status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7618 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7620 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7621 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;Total ram usage:       12 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    3
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;;		_sprintf
  7630 ;; This function uses a non-reentrant model
  7631 ;;
  7632                           
  7633                           	psect	text16
  7634  0036A0                     __ptext16:
  7635                           	opt stack 0
  7636  0036A0                     ___flge:
  7637                           	opt stack 26
  7638                           
  7639                           ;incstack = 0
  7640  0036A0  0E00               	movlw	0
  7641  0036A2  1417               	andwf	___flge@ff1,w,c
  7642  0036A4  6E1F               	movwf	??___flge& (0+255),c
  7643  0036A6  0E00               	movlw	0
  7644  0036A8  1418               	andwf	___flge@ff1+1,w,c
  7645  0036AA  6E20               	movwf	(??___flge+1)& (0+255),c
  7646  0036AC  0E80               	movlw	128
  7647  0036AE  1419               	andwf	___flge@ff1+2,w,c
  7648  0036B0  6E21               	movwf	(??___flge+2)& (0+255),c
  7649  0036B2  0E7F               	movlw	127
  7650  0036B4  141A               	andwf	___flge@ff1+3,w,c
  7651  0036B6  6E22               	movwf	(??___flge+3)& (0+255),c
  7652  0036B8  501F               	movf	??___flge,w,c
  7653  0036BA  1020               	iorwf	??___flge+1,w,c
  7654  0036BC  1021               	iorwf	??___flge+2,w,c
  7655  0036BE  1022               	iorwf	??___flge+3,w,c
  7656  0036C0  A4D8               	btfss	status,2,c
  7657  0036C2  D008               	goto	l757
  7658  0036C4  0E00               	movlw	0
  7659  0036C6  6E17               	movwf	___flge@ff1,c
  7660  0036C8  0E00               	movlw	0
  7661  0036CA  6E18               	movwf	___flge@ff1+1,c
  7662  0036CC  0E00               	movlw	0
  7663  0036CE  6E19               	movwf	___flge@ff1+2,c
  7664  0036D0  0E00               	movlw	0
  7665  0036D2  6E1A               	movwf	___flge@ff1+3,c
  7666  0036D4                     l757:
  7667  0036D4  0E00               	movlw	0
  7668  0036D6  141B               	andwf	___flge@ff2,w,c
  7669  0036D8  6E1F               	movwf	??___flge& (0+255),c
  7670  0036DA  0E00               	movlw	0
  7671  0036DC  141C               	andwf	___flge@ff2+1,w,c
  7672  0036DE  6E20               	movwf	(??___flge+1)& (0+255),c
  7673  0036E0  0E80               	movlw	128
  7674  0036E2  141D               	andwf	___flge@ff2+2,w,c
  7675  0036E4  6E21               	movwf	(??___flge+2)& (0+255),c
  7676  0036E6  0E7F               	movlw	127
  7677  0036E8  141E               	andwf	___flge@ff2+3,w,c
  7678  0036EA  6E22               	movwf	(??___flge+3)& (0+255),c
  7679  0036EC  501F               	movf	??___flge,w,c
  7680  0036EE  1020               	iorwf	??___flge+1,w,c
  7681  0036F0  1021               	iorwf	??___flge+2,w,c
  7682  0036F2  1022               	iorwf	??___flge+3,w,c
  7683  0036F4  A4D8               	btfss	status,2,c
  7684  0036F6  D008               	goto	l758
  7685  0036F8  0E00               	movlw	0
  7686  0036FA  6E1B               	movwf	___flge@ff2,c
  7687  0036FC  0E00               	movlw	0
  7688  0036FE  6E1C               	movwf	___flge@ff2+1,c
  7689  003700  0E00               	movlw	0
  7690  003702  6E1D               	movwf	___flge@ff2+2,c
  7691  003704  0E00               	movlw	0
  7692  003706  6E1E               	movwf	___flge@ff2+3,c
  7693  003708                     l758:
  7694  003708  AE1A               	btfss	___flge@ff1+3,7,c
  7695  00370A  D01D               	goto	l759
  7696  00370C  C017  F01F         	movff	___flge@ff1,??___flge
  7697  003710  C018  F020         	movff	___flge@ff1+1,??___flge+1
  7698  003714  C019  F021         	movff	___flge@ff1+2,??___flge+2
  7699  003718  C01A  F022         	movff	___flge@ff1+3,??___flge+3
  7700  00371C  1E1F               	comf	??___flge,f,c
  7701  00371E  1E20               	comf	??___flge+1,f,c
  7702  003720  1E21               	comf	??___flge+2,f,c
  7703  003722  1E22               	comf	??___flge+3,f,c
  7704  003724  2A1F               	incf	??___flge,f,c
  7705  003726  0E00               	movlw	0
  7706  003728  2220               	addwfc	??___flge+1,f,c
  7707  00372A  2221               	addwfc	??___flge+2,f,c
  7708  00372C  2222               	addwfc	??___flge+3,f,c
  7709  00372E  0E00               	movlw	0
  7710  003730  241F               	addwf	??___flge,w,c
  7711  003732  6E17               	movwf	___flge@ff1,c
  7712  003734  0E00               	movlw	0
  7713  003736  2020               	addwfc	??___flge+1,w,c
  7714  003738  6E18               	movwf	___flge@ff1+1,c
  7715  00373A  0E00               	movlw	0
  7716  00373C  2021               	addwfc	??___flge+2,w,c
  7717  00373E  6E19               	movwf	___flge@ff1+2,c
  7718  003740  0E80               	movlw	128
  7719  003742  2022               	addwfc	??___flge+3,w,c
  7720  003744  6E1A               	movwf	___flge@ff1+3,c
  7721  003746                     l759:
  7722  003746  AE1E               	btfss	___flge@ff2+3,7,c
  7723  003748  D01D               	goto	l760
  7724  00374A  C01B  F01F         	movff	___flge@ff2,??___flge
  7725  00374E  C01C  F020         	movff	___flge@ff2+1,??___flge+1
  7726  003752  C01D  F021         	movff	___flge@ff2+2,??___flge+2
  7727  003756  C01E  F022         	movff	___flge@ff2+3,??___flge+3
  7728  00375A  1E1F               	comf	??___flge,f,c
  7729  00375C  1E20               	comf	??___flge+1,f,c
  7730  00375E  1E21               	comf	??___flge+2,f,c
  7731  003760  1E22               	comf	??___flge+3,f,c
  7732  003762  2A1F               	incf	??___flge,f,c
  7733  003764  0E00               	movlw	0
  7734  003766  2220               	addwfc	??___flge+1,f,c
  7735  003768  2221               	addwfc	??___flge+2,f,c
  7736  00376A  2222               	addwfc	??___flge+3,f,c
  7737  00376C  0E00               	movlw	0
  7738  00376E  241F               	addwf	??___flge,w,c
  7739  003770  6E1B               	movwf	___flge@ff2,c
  7740  003772  0E00               	movlw	0
  7741  003774  2020               	addwfc	??___flge+1,w,c
  7742  003776  6E1C               	movwf	___flge@ff2+1,c
  7743  003778  0E00               	movlw	0
  7744  00377A  2021               	addwfc	??___flge+2,w,c
  7745  00377C  6E1D               	movwf	___flge@ff2+2,c
  7746  00377E  0E80               	movlw	128
  7747  003780  2022               	addwfc	??___flge+3,w,c
  7748  003782  6E1E               	movwf	___flge@ff2+3,c
  7749  003784                     l760:
  7750  003784  0E00               	movlw	0
  7751  003786  1A17               	xorwf	___flge@ff1,f,c
  7752  003788  0E00               	movlw	0
  7753  00378A  1A18               	xorwf	___flge@ff1+1,f,c
  7754  00378C  0E00               	movlw	0
  7755  00378E  1A19               	xorwf	___flge@ff1+2,f,c
  7756  003790  0E80               	movlw	128
  7757  003792  1A1A               	xorwf	___flge@ff1+3,f,c
  7758  003794  0E00               	movlw	0
  7759  003796  1A1B               	xorwf	___flge@ff2,f,c
  7760  003798  0E00               	movlw	0
  7761  00379A  1A1C               	xorwf	___flge@ff2+1,f,c
  7762  00379C  0E00               	movlw	0
  7763  00379E  1A1D               	xorwf	___flge@ff2+2,f,c
  7764  0037A0  0E80               	movlw	128
  7765  0037A2  1A1E               	xorwf	___flge@ff2+3,f,c
  7766  0037A4  501B               	movf	___flge@ff2,w,c
  7767  0037A6  5C17               	subwf	___flge@ff1,w,c
  7768  0037A8  501C               	movf	___flge@ff2+1,w,c
  7769  0037AA  5818               	subwfb	___flge@ff1+1,w,c
  7770  0037AC  501D               	movf	___flge@ff2+2,w,c
  7771  0037AE  5819               	subwfb	___flge@ff1+2,w,c
  7772  0037B0  501E               	movf	___flge@ff2+3,w,c
  7773  0037B2  581A               	subwfb	___flge@ff1+3,w,c
  7774  0037B4  B0D8               	btfsc	status,0,c
  7775  0037B6  D002               	goto	l3135
  7776  0037B8  90D8               	bcf	status,0,c
  7777  0037BA  0012               	return	
  7778  0037BC                     l3135:
  7779  0037BC  80D8               	bsf	status,0,c
  7780  0037BE  0012               	return	
  7781  0037C0                     __end_of___flge:
  7782                           	opt stack 0
  7783                           tblptru	equ	0xFF8
  7784                           tblptrh	equ	0xFF7
  7785                           tblptrl	equ	0xFF6
  7786                           tablat	equ	0xFF5
  7787                           prodh	equ	0xFF4
  7788                           prodl	equ	0xFF3
  7789                           postinc0	equ	0xFEE
  7790                           wreg	equ	0xFE8
  7791                           postdec1	equ	0xFE5
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           fsr2h	equ	0xFDA
  7796                           fsr2l	equ	0xFD9
  7797                           status	equ	0xFD8
  7798                           
  7799 ;; *************** function _setupSerial *****************
  7800 ;; Defined at:
  7801 ;;		line 3 in file "my_ser.c"
  7802 ;; Parameters:    Size  Location     Type
  7803 ;;		None
  7804 ;; Auto vars:     Size  Location     Type
  7805 ;;  dummy           1   22[COMRAM] unsigned char 
  7806 ;; Return value:  Size  Location     Type
  7807 ;;                  1    wreg      void 
  7808 ;; Registers used:
  7809 ;;		wreg, status,2
  7810 ;; Tracked objects:
  7811 ;;		On entry : 0/0
  7812 ;;		On exit  : 0/0
  7813 ;;		Unchanged: 0/0
  7814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;Total ram usage:        1 bytes
  7820 ;; Hardware stack levels used:    1
  7821 ;; Hardware stack levels required when called:    3
  7822 ;; This function calls:
  7823 ;;		Nothing
  7824 ;; This function is called by:
  7825 ;;		_main
  7826 ;; This function uses a non-reentrant model
  7827 ;;
  7828                           
  7829                           	psect	text17
  7830  004158                     __ptext17:
  7831                           	opt stack 0
  7832  004158                     _setupSerial:
  7833                           	opt stack 27
  7834                           
  7835                           ;my_ser.c: 4: unsigned char dummy;
  7836                           ;my_ser.c: 5: BAUDCONbits.BRG16 = 0;
  7837                           
  7838                           ;incstack = 0
  7839  004158  96B8               	bcf	4024,3,c	;volatile
  7840                           
  7841                           ;my_ser.c: 6: TXSTA = 0;
  7842  00415A  0E00               	movlw	0
  7843  00415C  6EAC               	movwf	4012,c	;volatile
  7844                           
  7845                           ;my_ser.c: 7: SPBRG = 25;
  7846  00415E  0E19               	movlw	25
  7847  004160  6EAF               	movwf	4015,c	;volatile
  7848                           
  7849                           ;my_ser.c: 8: SPBRGH = 0;
  7850  004162  0E00               	movlw	0
  7851  004164  6EB0               	movwf	4016,c	;volatile
  7852                           
  7853                           ;my_ser.c: 9: TXSTAbits.BRGH = 1;
  7854  004166  84AC               	bsf	4012,2,c	;volatile
  7855                           
  7856                           ;my_ser.c: 10: TXSTAbits.TXEN = 1;
  7857  004168  8AAC               	bsf	4012,5,c	;volatile
  7858                           
  7859                           ;my_ser.c: 12: RCSTA = 0;
  7860  00416A  0E00               	movlw	0
  7861  00416C  6EAB               	movwf	4011,c	;volatile
  7862                           
  7863                           ;my_ser.c: 13: RCSTAbits.CREN = 1;
  7864  00416E  88AB               	bsf	4011,4,c	;volatile
  7865                           
  7866                           ;my_ser.c: 14: RCSTAbits.SPEN = 1;
  7867  004170  8EAB               	bsf	4011,7,c	;volatile
  7868                           
  7869                           ;my_ser.c: 15: ;
  7870                           ;my_ser.c: 16: dummy = RCREG;
  7871  004172  CFAE F017          	movff	4014,setupSerial@dummy	;volatile
  7872                           
  7873                           ;my_ser.c: 17: dummy = RCREG;
  7874  004176  CFAE F017          	movff	4014,setupSerial@dummy	;volatile
  7875  00417A  0012               	return	
  7876  00417C                     __end_of_setupSerial:
  7877                           	opt stack 0
  7878                           tblptru	equ	0xFF8
  7879                           tblptrh	equ	0xFF7
  7880                           tblptrl	equ	0xFF6
  7881                           tablat	equ	0xFF5
  7882                           prodh	equ	0xFF4
  7883                           prodl	equ	0xFF3
  7884                           postinc0	equ	0xFEE
  7885                           wreg	equ	0xFE8
  7886                           postdec1	equ	0xFE5
  7887                           fsr1l	equ	0xFE1
  7888                           indf2	equ	0xFDF
  7889                           postinc2	equ	0xFDE
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _setupPorts *****************
  7895 ;; Defined at:
  7896 ;;		line 107 in file "pwm_asl.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  1    wreg      void 
  7903 ;; Registers used:
  7904 ;;		wreg, status,2
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;Total ram usage:        0 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:    3
  7917 ;; This function calls:
  7918 ;;		Nothing
  7919 ;; This function is called by:
  7920 ;;		_main
  7921 ;; This function uses a non-reentrant model
  7922 ;;
  7923                           
  7924                           	psect	text18
  7925  0041DE                     __ptext18:
  7926                           	opt stack 0
  7927  0041DE                     _setupPorts:
  7928                           	opt stack 27
  7929                           
  7930                           ;pwm_asl.c: 108: ADCON0 = 0;
  7931                           
  7932                           ;incstack = 0
  7933  0041DE  0E00               	movlw	0
  7934  0041E0  6EC2               	movwf	4034,c	;volatile
  7935                           
  7936                           ;pwm_asl.c: 109: ADCON1 = 0b00001100;
  7937  0041E2  0E0C               	movlw	12
  7938  0041E4  6EC1               	movwf	4033,c	;volatile
  7939                           
  7940                           ;pwm_asl.c: 116: TRISA=0x07;
  7941  0041E6  0E07               	movlw	7
  7942  0041E8  6E92               	movwf	3986,c	;volatile
  7943                           
  7944                           ;pwm_asl.c: 118: TRISB=0xF1;
  7945  0041EA  0EF1               	movlw	241
  7946  0041EC  6E93               	movwf	3987,c	;volatile
  7947                           
  7948                           ;pwm_asl.c: 119: TRISC=0x80;
  7949  0041EE  0E80               	movlw	128
  7950  0041F0  6E94               	movwf	3988,c	;volatile
  7951                           
  7952                           ;pwm_asl.c: 120: TRISD=0x00;
  7953  0041F2  0E00               	movlw	0
  7954  0041F4  6E95               	movwf	3989,c	;volatile
  7955                           
  7956                           ;pwm_asl.c: 121: TRISE=0x00;
  7957  0041F6  0E00               	movlw	0
  7958  0041F8  6E96               	movwf	3990,c	;volatile
  7959  0041FA  0012               	return		;funcret
  7960  0041FC                     __end_of_setupPorts:
  7961                           	opt stack 0
  7962                           tblptru	equ	0xFF8
  7963                           tblptrh	equ	0xFF7
  7964                           tblptrl	equ	0xFF6
  7965                           tablat	equ	0xFF5
  7966                           prodh	equ	0xFF4
  7967                           prodl	equ	0xFF3
  7968                           postinc0	equ	0xFEE
  7969                           wreg	equ	0xFE8
  7970                           postdec1	equ	0xFE5
  7971                           fsr1l	equ	0xFE1
  7972                           indf2	equ	0xFDF
  7973                           postinc2	equ	0xFDE
  7974                           fsr2h	equ	0xFDA
  7975                           fsr2l	equ	0xFD9
  7976                           status	equ	0xFD8
  7977                           
  7978 ;; *************** function _send_string_no_lib *****************
  7979 ;; Defined at:
  7980 ;;		line 47 in file "my_ser.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;  p               2   23[COMRAM] PTR unsigned char 
  7983 ;;		 -> STR_7(22), 
  7984 ;; Auto vars:     Size  Location     Type
  7985 ;;		None
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      void 
  7988 ;; Registers used:
  7989 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7995 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7999 ;;Total ram usage:        2 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    4
  8002 ;; This function calls:
  8003 ;;		_send_byte_no_lib
  8004 ;; This function is called by:
  8005 ;;		_main
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           	psect	text19
  8010  004070                     __ptext19:
  8011                           	opt stack 0
  8012  004070                     _send_string_no_lib:
  8013                           	opt stack 26
  8014                           
  8015                           ;my_ser.c: 48: while (*p) {
  8016                           
  8017                           ;incstack = 0
  8018  004070  D00A               	goto	l358
  8019  004072                     
  8020                           ;my_ser.c: 49: send_byte_no_lib(*p);
  8021  004072  C018  FFF6         	movff	send_string_no_lib@p,tblptrl
  8022  004076  C019  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  8023  00407A                     	if	0	;tblptru may be non-zero
  8024  00407A                     	endif
  8025  00407A                     	if	0	;tblptru may be non-zero
  8026  00407A                     	endif
  8027  00407A  0008               	tblrd		*
  8028  00407C  50F5               	movf	tablat,w,c
  8029  00407E  EC0B  F021         	call	_send_byte_no_lib
  8030                           
  8031                           ;my_ser.c: 50: p++;
  8032  004082  4A18               	infsnz	send_string_no_lib@p,f,c
  8033  004084  2A19               	incf	send_string_no_lib@p+1,f,c
  8034  004086                     l358:
  8035  004086  C018  FFF6         	movff	send_string_no_lib@p,tblptrl
  8036  00408A  C019  FFF7         	movff	send_string_no_lib@p+1,tblptrh
  8037  00408E                     	if	0	;tblptru may be non-zero
  8038  00408E                     	endif
  8039  00408E                     	if	0	;tblptru may be non-zero
  8040  00408E                     	endif
  8041  00408E  0008               	tblrd		*
  8042  004090  50F5               	movf	tablat,w,c
  8043  004092  0900               	iorlw	0
  8044  004094  B4D8               	btfsc	status,2,c
  8045  004096  0012               	return	
  8046  004098  D7EC               	goto	l359
  8047  00409A                     __end_of_send_string_no_lib:
  8048                           	opt stack 0
  8049                           tblptru	equ	0xFF8
  8050                           tblptrh	equ	0xFF7
  8051                           tblptrl	equ	0xFF6
  8052                           tablat	equ	0xFF5
  8053                           prodh	equ	0xFF4
  8054                           prodl	equ	0xFF3
  8055                           postinc0	equ	0xFEE
  8056                           wreg	equ	0xFE8
  8057                           postdec1	equ	0xFE5
  8058                           fsr1l	equ	0xFE1
  8059                           indf2	equ	0xFDF
  8060                           postinc2	equ	0xFDE
  8061                           fsr2h	equ	0xFDA
  8062                           fsr2l	equ	0xFD9
  8063                           status	equ	0xFD8
  8064                           
  8065 ;; *************** function _send_byte_no_lib *****************
  8066 ;; Defined at:
  8067 ;;		line 39 in file "my_ser.c"
  8068 ;; Parameters:    Size  Location     Type
  8069 ;;  c               1    wreg     unsigned char 
  8070 ;; Auto vars:     Size  Location     Type
  8071 ;;  c               1   22[COMRAM] unsigned char 
  8072 ;; Return value:  Size  Location     Type
  8073 ;;                  1    wreg      void 
  8074 ;; Registers used:
  8075 ;;		wreg
  8076 ;; Tracked objects:
  8077 ;;		On entry : 0/0
  8078 ;;		On exit  : 0/0
  8079 ;;		Unchanged: 0/0
  8080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8082 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;Total ram usage:        1 bytes
  8086 ;; Hardware stack levels used:    1
  8087 ;; Hardware stack levels required when called:    3
  8088 ;; This function calls:
  8089 ;;		Nothing
  8090 ;; This function is called by:
  8091 ;;		_send_string_no_lib
  8092 ;; This function uses a non-reentrant model
  8093 ;;
  8094                           
  8095                           	psect	text20
  8096  004216                     __ptext20:
  8097                           	opt stack 0
  8098  004216                     _send_byte_no_lib:
  8099                           	opt stack 26
  8100                           
  8101                           ;incstack = 0
  8102                           ;send_byte_no_lib@c stored from wreg
  8103  004216  6E17               	movwf	send_byte_no_lib@c,c
  8104                           
  8105                           ;my_ser.c: 40: while (!TXSTAbits.TRMT)
  8106  004218  D001               	goto	l352
  8107  00421A                     l353:
  8108  00421A  0004               	clrwdt		;# 
  8109  00421C                     l352:
  8110  00421C  A2AC               	btfss	4012,1,c	;volatile
  8111  00421E  D7FD               	goto	l353
  8112                           
  8113                           ;my_ser.c: 43: }
  8114                           ;my_ser.c: 44: TXREG = c;
  8115  004220  C017  FFAD         	movff	send_byte_no_lib@c,4013	;volatile
  8116  004224  0012               	return		;funcret
  8117  004226                     __end_of_send_byte_no_lib:
  8118                           	opt stack 0
  8119                           tblptru	equ	0xFF8
  8120                           tblptrh	equ	0xFF7
  8121                           tblptrl	equ	0xFF6
  8122                           tablat	equ	0xFF5
  8123                           prodh	equ	0xFF4
  8124                           prodl	equ	0xFF3
  8125                           postinc0	equ	0xFEE
  8126                           wreg	equ	0xFE8
  8127                           postdec1	equ	0xFE5
  8128                           fsr1l	equ	0xFE1
  8129                           indf2	equ	0xFDF
  8130                           postinc2	equ	0xFDE
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _read_adc_voltage *****************
  8136 ;; Defined at:
  8137 ;;		line 48 in file "my_adc.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  channel         1    wreg     unsigned char 
  8140 ;; Auto vars:     Size  Location     Type
  8141 ;;  channel         1   77[COMRAM] unsigned char 
  8142 ;;  voltage         4   71[COMRAM] float 
  8143 ;;  raw_value       2   75[COMRAM] int 
  8144 ;; Return value:  Size  Location     Type
  8145 ;;                  4   67[COMRAM] float 
  8146 ;; Registers used:
  8147 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8148 ;; Tracked objects:
  8149 ;;		On entry : 0/0
  8150 ;;		On exit  : 0/0
  8151 ;;		Unchanged: 0/0
  8152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8153 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8157 ;;Total ram usage:       11 bytes
  8158 ;; Hardware stack levels used:    1
  8159 ;; Hardware stack levels required when called:    4
  8160 ;; This function calls:
  8161 ;;		___fldiv
  8162 ;;		___wmul
  8163 ;;		___xxtofl
  8164 ;;		_read_adc_raw_no_lib
  8165 ;; This function is called by:
  8166 ;;		_main
  8167 ;; This function uses a non-reentrant model
  8168 ;;
  8169                           
  8170                           	psect	text21
  8171  003C44                     __ptext21:
  8172                           	opt stack 0
  8173  003C44                     _read_adc_voltage:
  8174                           	opt stack 26
  8175                           
  8176                           ;incstack = 0
  8177                           ;read_adc_voltage@channel stored from wreg
  8178  003C44  6E4E               	movwf	read_adc_voltage@channel,c
  8179                           
  8180                           ;my_adc.c: 49: int raw_value;
  8181                           ;my_adc.c: 50: float voltage;
  8182                           ;my_adc.c: 51: raw_value = read_adc_raw_no_lib(channel);
  8183  003C46  504E               	movf	read_adc_voltage@channel,w,c
  8184  003C48  ECED  F01F         	call	_read_adc_raw_no_lib
  8185  003C4C  C017  F04C         	movff	?_read_adc_raw_no_lib,read_adc_voltage@raw_value
  8186  003C50  C018  F04D         	movff	?_read_adc_raw_no_lib+1,read_adc_voltage@raw_value+1
  8187                           
  8188                           ;my_adc.c: 52: voltage = (raw_value * 5) / 1023.0;
  8189  003C54  C04C  F017         	movff	read_adc_voltage@raw_value,___wmul@multiplier
  8190  003C58  C04D  F018         	movff	read_adc_voltage@raw_value+1,___wmul@multiplier+1
  8191  003C5C  0E00               	movlw	0
  8192  003C5E  6E1A               	movwf	___wmul@multiplicand+1,c
  8193  003C60  0E05               	movlw	5
  8194  003C62  6E19               	movwf	___wmul@multiplicand,c
  8195  003C64  EC4D  F020         	call	___wmul	;wreg free
  8196  003C68  C017  F01D         	movff	?___wmul,___xxtofl@val
  8197  003C6C  C018  F01E         	movff	?___wmul+1,___xxtofl@val+1
  8198  003C70  0E00               	movlw	0
  8199  003C72  BE1E               	btfsc	___xxtofl@val+1,7,c
  8200  003C74  0EFF               	movlw	-1
  8201  003C76  6E1F               	movwf	___xxtofl@val+2,c
  8202  003C78  6E20               	movwf	___xxtofl@val+3,c
  8203  003C7A  0E01               	movlw	1
  8204  003C7C  EC7B  F019         	call	___xxtofl
  8205  003C80  C01D  F02B         	movff	?___xxtofl,___fldiv@b
  8206  003C84  C01E  F02C         	movff	?___xxtofl+1,___fldiv@b+1
  8207  003C88  C01F  F02D         	movff	?___xxtofl+2,___fldiv@b+2
  8208  003C8C  C020  F02E         	movff	?___xxtofl+3,___fldiv@b+3
  8209  003C90  0E00               	movlw	0
  8210  003C92  6E2F               	movwf	___fldiv@a,c
  8211  003C94  0EC0               	movlw	192
  8212  003C96  6E30               	movwf	___fldiv@a+1,c
  8213  003C98  0E7F               	movlw	127
  8214  003C9A  6E31               	movwf	___fldiv@a+2,c
  8215  003C9C  0E44               	movlw	68
  8216  003C9E  6E32               	movwf	___fldiv@a+3,c
  8217  003CA0  EC2A  F016         	call	___fldiv	;wreg free
  8218  003CA4  C02B  F048         	movff	?___fldiv,read_adc_voltage@voltage
  8219  003CA8  C02C  F049         	movff	?___fldiv+1,read_adc_voltage@voltage+1
  8220  003CAC  C02D  F04A         	movff	?___fldiv+2,read_adc_voltage@voltage+2
  8221  003CB0  C02E  F04B         	movff	?___fldiv+3,read_adc_voltage@voltage+3
  8222                           
  8223                           ;my_adc.c: 53: return voltage;
  8224  003CB4  C048  F044         	movff	read_adc_voltage@voltage,?_read_adc_voltage
  8225  003CB8  C049  F045         	movff	read_adc_voltage@voltage+1,?_read_adc_voltage+1
  8226  003CBC  C04A  F046         	movff	read_adc_voltage@voltage+2,?_read_adc_voltage+2
  8227  003CC0  C04B  F047         	movff	read_adc_voltage@voltage+3,?_read_adc_voltage+3
  8228  003CC4  0012               	return	
  8229  003CC6                     __end_of_read_adc_voltage:
  8230                           	opt stack 0
  8231                           tblptru	equ	0xFF8
  8232                           tblptrh	equ	0xFF7
  8233                           tblptrl	equ	0xFF6
  8234                           tablat	equ	0xFF5
  8235                           prodh	equ	0xFF4
  8236                           prodl	equ	0xFF3
  8237                           postinc0	equ	0xFEE
  8238                           wreg	equ	0xFE8
  8239                           postdec1	equ	0xFE5
  8240                           fsr1l	equ	0xFE1
  8241                           indf2	equ	0xFDF
  8242                           postinc2	equ	0xFDE
  8243                           fsr2h	equ	0xFDA
  8244                           fsr2l	equ	0xFD9
  8245                           status	equ	0xFD8
  8246                           
  8247 ;; *************** function _read_adc_raw_no_lib *****************
  8248 ;; Defined at:
  8249 ;;		line 32 in file "my_adc.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  channel         1    wreg     unsigned char 
  8252 ;; Auto vars:     Size  Location     Type
  8253 ;;  channel         1   28[COMRAM] unsigned char 
  8254 ;;  raw_value       2   26[COMRAM] int 
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  2   22[COMRAM] int 
  8257 ;; Registers used:
  8258 ;;		wreg, status,2, status,0
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8264 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;Total ram usage:        7 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:    3
  8271 ;; This function calls:
  8272 ;;		Nothing
  8273 ;; This function is called by:
  8274 ;;		_read_adc_voltage
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text22
  8279  003FDA                     __ptext22:
  8280                           	opt stack 0
  8281  003FDA                     _read_adc_raw_no_lib:
  8282                           	opt stack 26
  8283                           
  8284                           ;incstack = 0
  8285                           ;read_adc_raw_no_lib@channel stored from wreg
  8286  003FDA  6E1D               	movwf	read_adc_raw_no_lib@channel,c
  8287                           
  8288                           ;my_adc.c: 33: int raw_value;
  8289                           ;my_adc.c: 34: ADCON0bits.CHS = channel;
  8290  003FDC  C01D  F019         	movff	read_adc_raw_no_lib@channel,??_read_adc_raw_no_lib
  8291  003FE0  4619               	rlncf	??_read_adc_raw_no_lib,f,c
  8292  003FE2  4619               	rlncf	??_read_adc_raw_no_lib,f,c
  8293  003FE4  50C2               	movf	4034,w,c	;volatile
  8294  003FE6  1819               	xorwf	??_read_adc_raw_no_lib,w,c
  8295  003FE8  0BC3               	andlw	-61
  8296  003FEA  1819               	xorwf	??_read_adc_raw_no_lib,w,c
  8297  003FEC  6EC2               	movwf	4034,c	;volatile
  8298                           
  8299                           ;my_adc.c: 37: ADCON0bits.GO = 1;
  8300  003FEE  82C2               	bsf	4034,1,c	;volatile
  8301  003FF0  B2C2               	btfsc	4034,1,c	;volatile
  8302  003FF2  D7FE               	goto	l278
  8303                           
  8304                           ;my_adc.c: 41: raw_value = ADRESH << 8 | ADRESL;
  8305  003FF4  50C3               	movf	4035,w,c	;volatile
  8306  003FF6  CFC4 F019          	movff	4036,??_read_adc_raw_no_lib	;volatile
  8307  003FFA  6A1A               	clrf	(??_read_adc_raw_no_lib+1)& (0+255),c
  8308  003FFC  C019  F01A         	movff	??_read_adc_raw_no_lib,??_read_adc_raw_no_lib+1
  8309  004000  6A19               	clrf	??_read_adc_raw_no_lib,c
  8310  004002  1019               	iorwf	??_read_adc_raw_no_lib,w,c
  8311  004004  6E1B               	movwf	read_adc_raw_no_lib@raw_value,c
  8312  004006  501A               	movf	??_read_adc_raw_no_lib+1,w,c
  8313  004008  6E1C               	movwf	read_adc_raw_no_lib@raw_value+1,c
  8314                           
  8315                           ;my_adc.c: 45: return raw_value;
  8316  00400A  C01B  F017         	movff	read_adc_raw_no_lib@raw_value,?_read_adc_raw_no_lib
  8317  00400E  C01C  F018         	movff	read_adc_raw_no_lib@raw_value+1,?_read_adc_raw_no_lib+1
  8318  004012  0012               	return	
  8319  004014                     __end_of_read_adc_raw_no_lib:
  8320                           	opt stack 0
  8321                           tblptru	equ	0xFF8
  8322                           tblptrh	equ	0xFF7
  8323                           tblptrl	equ	0xFF6
  8324                           tablat	equ	0xFF5
  8325                           prodh	equ	0xFF4
  8326                           prodl	equ	0xFF3
  8327                           postinc0	equ	0xFEE
  8328                           wreg	equ	0xFE8
  8329                           postdec1	equ	0xFE5
  8330                           fsr1l	equ	0xFE1
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           fsr2h	equ	0xFDA
  8334                           fsr2l	equ	0xFD9
  8335                           status	equ	0xFD8
  8336                           
  8337 ;; *************** function ___xxtofl *****************
  8338 ;; Defined at:
  8339 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  8340 ;; Parameters:    Size  Location     Type
  8341 ;;  sign            1    wreg     unsigned char 
  8342 ;;  val             4   28[COMRAM] long 
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;  sign            1   36[COMRAM] unsigned char 
  8345 ;;  arg             4   38[COMRAM] unsigned long 
  8346 ;;  exp             1   37[COMRAM] unsigned char 
  8347 ;; Return value:  Size  Location     Type
  8348 ;;                  4   28[COMRAM] unsigned char 
  8349 ;; Registers used:
  8350 ;;		wreg, status,2, status,0
  8351 ;; Tracked objects:
  8352 ;;		On entry : 0/0
  8353 ;;		On exit  : 0/0
  8354 ;;		Unchanged: 0/0
  8355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8356 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8357 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8358 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8359 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8360 ;;Total ram usage:       14 bytes
  8361 ;; Hardware stack levels used:    1
  8362 ;; Hardware stack levels required when called:    3
  8363 ;; This function calls:
  8364 ;;		Nothing
  8365 ;; This function is called by:
  8366 ;;		_read_adc_voltage
  8367 ;;		_sprintf
  8368 ;; This function uses a non-reentrant model
  8369 ;;
  8370                           
  8371                           	psect	text23
  8372  0032F6                     __ptext23:
  8373                           	opt stack 0
  8374  0032F6                     ___xxtofl:
  8375                           	opt stack 26
  8376                           
  8377                           ;incstack = 0
  8378                           ;___xxtofl@sign stored from wreg
  8379  0032F6  6E25               	movwf	___xxtofl@sign,c
  8380  0032F8  5025               	movf	___xxtofl@sign,w,c
  8381  0032FA  A4D8               	btfss	status,2,c
  8382  0032FC  AE20               	btfss	___xxtofl@val+3,7,c
  8383  0032FE  D01A               	goto	l1131
  8384  003300  C01D  F021         	movff	___xxtofl@val,??___xxtofl
  8385  003304  C01E  F022         	movff	___xxtofl@val+1,??___xxtofl+1
  8386  003308  C01F  F023         	movff	___xxtofl@val+2,??___xxtofl+2
  8387  00330C  C020  F024         	movff	___xxtofl@val+3,??___xxtofl+3
  8388  003310  1E21               	comf	??___xxtofl,f,c
  8389  003312  1E22               	comf	??___xxtofl+1,f,c
  8390  003314  1E23               	comf	??___xxtofl+2,f,c
  8391  003316  1E24               	comf	??___xxtofl+3,f,c
  8392  003318  2A21               	incf	??___xxtofl,f,c
  8393  00331A  0E00               	movlw	0
  8394  00331C  2222               	addwfc	??___xxtofl+1,f,c
  8395  00331E  2223               	addwfc	??___xxtofl+2,f,c
  8396  003320  2224               	addwfc	??___xxtofl+3,f,c
  8397  003322  C021  F027         	movff	??___xxtofl,___xxtofl@arg
  8398  003326  C022  F028         	movff	??___xxtofl+1,___xxtofl@arg+1
  8399  00332A  C023  F029         	movff	??___xxtofl+2,___xxtofl@arg+2
  8400  00332E  C024  F02A         	movff	??___xxtofl+3,___xxtofl@arg+3
  8401  003332  D008               	goto	l1132
  8402  003334                     l1131:
  8403  003334  C01D  F027         	movff	___xxtofl@val,___xxtofl@arg
  8404  003338  C01E  F028         	movff	___xxtofl@val+1,___xxtofl@arg+1
  8405  00333C  C01F  F029         	movff	___xxtofl@val+2,___xxtofl@arg+2
  8406  003340  C020  F02A         	movff	___xxtofl@val+3,___xxtofl@arg+3
  8407  003344                     l1132:
  8408  003344  501D               	movf	___xxtofl@val,w,c
  8409  003346  101E               	iorwf	___xxtofl@val+1,w,c
  8410  003348  101F               	iorwf	___xxtofl@val+2,w,c
  8411  00334A  1020               	iorwf	___xxtofl@val+3,w,c
  8412  00334C  A4D8               	btfss	status,2,c
  8413  00334E  D009               	goto	l1133
  8414  003350  0E00               	movlw	0
  8415  003352  6E1D               	movwf	?___xxtofl,c
  8416  003354  0E00               	movlw	0
  8417  003356  6E1E               	movwf	?___xxtofl+1,c
  8418  003358  0E00               	movlw	0
  8419  00335A  6E1F               	movwf	?___xxtofl+2,c
  8420  00335C  0E00               	movlw	0
  8421  00335E  6E20               	movwf	?___xxtofl+3,c
  8422  003360  0012               	return	
  8423  003362                     l1133:
  8424  003362  0E96               	movlw	150
  8425  003364  6E26               	movwf	___xxtofl@exp,c
  8426  003366  D006               	goto	l1135
  8427  003368  2A26               	incf	___xxtofl@exp,f,c
  8428  00336A  90D8               	bcf	status,0,c
  8429  00336C  322A               	rrcf	___xxtofl@arg+3,f,c
  8430  00336E  3229               	rrcf	___xxtofl@arg+2,f,c
  8431  003370  3228               	rrcf	___xxtofl@arg+1,f,c
  8432  003372  3227               	rrcf	___xxtofl@arg,f,c
  8433  003374                     l1135:
  8434  003374  0E00               	movlw	0
  8435  003376  1427               	andwf	___xxtofl@arg,w,c
  8436  003378  6E21               	movwf	??___xxtofl& (0+255),c
  8437  00337A  0E00               	movlw	0
  8438  00337C  1428               	andwf	___xxtofl@arg+1,w,c
  8439  00337E  6E22               	movwf	(??___xxtofl+1)& (0+255),c
  8440  003380  0E00               	movlw	0
  8441  003382  1429               	andwf	___xxtofl@arg+2,w,c
  8442  003384  6E23               	movwf	(??___xxtofl+2)& (0+255),c
  8443  003386  0EFE               	movlw	254
  8444  003388  142A               	andwf	___xxtofl@arg+3,w,c
  8445  00338A  6E24               	movwf	(??___xxtofl+3)& (0+255),c
  8446  00338C  5021               	movf	??___xxtofl,w,c
  8447  00338E  1022               	iorwf	??___xxtofl+1,w,c
  8448  003390  1023               	iorwf	??___xxtofl+2,w,c
  8449  003392  1024               	iorwf	??___xxtofl+3,w,c
  8450  003394  B4D8               	btfsc	status,2,c
  8451  003396  D00D               	goto	l1138
  8452  003398  D7E7               	goto	l1136
  8453  00339A  2A26               	incf	___xxtofl@exp,f,c
  8454  00339C  0E01               	movlw	1
  8455  00339E  2627               	addwf	___xxtofl@arg,f,c
  8456  0033A0  0E00               	movlw	0
  8457  0033A2  2228               	addwfc	___xxtofl@arg+1,f,c
  8458  0033A4  2229               	addwfc	___xxtofl@arg+2,f,c
  8459  0033A6  222A               	addwfc	___xxtofl@arg+3,f,c
  8460  0033A8  90D8               	bcf	status,0,c
  8461  0033AA  322A               	rrcf	___xxtofl@arg+3,f,c
  8462  0033AC  3229               	rrcf	___xxtofl@arg+2,f,c
  8463  0033AE  3228               	rrcf	___xxtofl@arg+1,f,c
  8464  0033B0  3227               	rrcf	___xxtofl@arg,f,c
  8465  0033B2                     l1138:
  8466  0033B2  0E00               	movlw	0
  8467  0033B4  1427               	andwf	___xxtofl@arg,w,c
  8468  0033B6  6E21               	movwf	??___xxtofl& (0+255),c
  8469  0033B8  0E00               	movlw	0
  8470  0033BA  1428               	andwf	___xxtofl@arg+1,w,c
  8471  0033BC  6E22               	movwf	(??___xxtofl+1)& (0+255),c
  8472  0033BE  0E00               	movlw	0
  8473  0033C0  1429               	andwf	___xxtofl@arg+2,w,c
  8474  0033C2  6E23               	movwf	(??___xxtofl+2)& (0+255),c
  8475  0033C4  0EFF               	movlw	255
  8476  0033C6  142A               	andwf	___xxtofl@arg+3,w,c
  8477  0033C8  6E24               	movwf	(??___xxtofl+3)& (0+255),c
  8478  0033CA  5021               	movf	??___xxtofl,w,c
  8479  0033CC  1022               	iorwf	??___xxtofl+1,w,c
  8480  0033CE  1023               	iorwf	??___xxtofl+2,w,c
  8481  0033D0  1024               	iorwf	??___xxtofl+3,w,c
  8482  0033D2  B4D8               	btfsc	status,2,c
  8483  0033D4  D007               	goto	l1141
  8484  0033D6  D7E1               	goto	l1139
  8485  0033D8  0626               	decf	___xxtofl@exp,f,c
  8486  0033DA  90D8               	bcf	status,0,c
  8487  0033DC  3627               	rlcf	___xxtofl@arg,f,c
  8488  0033DE  3628               	rlcf	___xxtofl@arg+1,f,c
  8489  0033E0  3629               	rlcf	___xxtofl@arg+2,f,c
  8490  0033E2  362A               	rlcf	___xxtofl@arg+3,f,c
  8491  0033E4                     l1141:
  8492  0033E4  BE29               	btfsc	___xxtofl@arg+2,7,c
  8493  0033E6  D003               	goto	u4250
  8494  0033E8  0E02               	movlw	2
  8495  0033EA  6026               	cpfslt	___xxtofl@exp,c
  8496  0033EC  D7F5               	goto	l1142
  8497  0033EE                     u4250:
  8498  0033EE  B026               	btfsc	___xxtofl@exp,0,c
  8499  0033F0  D008               	goto	l1146
  8500  0033F2  0EFF               	movlw	255
  8501  0033F4  1627               	andwf	___xxtofl@arg,f,c
  8502  0033F6  0EFF               	movlw	255
  8503  0033F8  1628               	andwf	___xxtofl@arg+1,f,c
  8504  0033FA  0E7F               	movlw	127
  8505  0033FC  1629               	andwf	___xxtofl@arg+2,f,c
  8506  0033FE  0EFF               	movlw	255
  8507  003400  162A               	andwf	___xxtofl@arg+3,f,c
  8508  003402                     l1146:
  8509  003402  90D8               	bcf	status,0,c
  8510  003404  3226               	rrcf	___xxtofl@exp,f,c
  8511  003406  C026  F021         	movff	___xxtofl@exp,??___xxtofl
  8512  00340A  6A22               	clrf	(??___xxtofl+1)& (0+255),c
  8513  00340C  6A23               	clrf	(??___xxtofl+2)& (0+255),c
  8514  00340E  6A24               	clrf	(??___xxtofl+3)& (0+255),c
  8515  003410  C021  F024         	movff	??___xxtofl,??___xxtofl+3
  8516  003414  6A23               	clrf	??___xxtofl+2,c
  8517  003416  6A22               	clrf	??___xxtofl+1,c
  8518  003418  6A21               	clrf	??___xxtofl,c
  8519  00341A  5021               	movf	??___xxtofl,w,c
  8520  00341C  1227               	iorwf	___xxtofl@arg,f,c
  8521  00341E  5022               	movf	??___xxtofl+1,w,c
  8522  003420  1228               	iorwf	___xxtofl@arg+1,f,c
  8523  003422  5023               	movf	??___xxtofl+2,w,c
  8524  003424  1229               	iorwf	___xxtofl@arg+2,f,c
  8525  003426  5024               	movf	??___xxtofl+3,w,c
  8526  003428  122A               	iorwf	___xxtofl@arg+3,f,c
  8527  00342A  5025               	movf	___xxtofl@sign,w,c
  8528  00342C  A4D8               	btfss	status,2,c
  8529  00342E  AE20               	btfss	___xxtofl@val+3,7,c
  8530  003430  D001               	goto	l1147
  8531  003432  8E2A               	bsf	___xxtofl@arg+3,7,c
  8532  003434                     l1147:
  8533  003434  C027  F01D         	movff	___xxtofl@arg,?___xxtofl
  8534  003438  C028  F01E         	movff	___xxtofl@arg+1,?___xxtofl+1
  8535  00343C  C029  F01F         	movff	___xxtofl@arg+2,?___xxtofl+2
  8536  003440  C02A  F020         	movff	___xxtofl@arg+3,?___xxtofl+3
  8537  003444  0012               	return	
  8538  003446                     __end_of___xxtofl:
  8539                           	opt stack 0
  8540                           tblptru	equ	0xFF8
  8541                           tblptrh	equ	0xFF7
  8542                           tblptrl	equ	0xFF6
  8543                           tablat	equ	0xFF5
  8544                           prodh	equ	0xFF4
  8545                           prodl	equ	0xFF3
  8546                           postinc0	equ	0xFEE
  8547                           wreg	equ	0xFE8
  8548                           postdec1	equ	0xFE5
  8549                           fsr1l	equ	0xFE1
  8550                           indf2	equ	0xFDF
  8551                           postinc2	equ	0xFDE
  8552                           fsr2h	equ	0xFDA
  8553                           fsr2l	equ	0xFD9
  8554                           status	equ	0xFD8
  8555                           
  8556 ;; *************** function ___wmul *****************
  8557 ;; Defined at:
  8558 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
  8559 ;; Parameters:    Size  Location     Type
  8560 ;;  multiplier      2   22[COMRAM] unsigned int 
  8561 ;;  multiplicand    2   24[COMRAM] unsigned int 
  8562 ;; Auto vars:     Size  Location     Type
  8563 ;;  product         2   26[COMRAM] unsigned int 
  8564 ;; Return value:  Size  Location     Type
  8565 ;;                  2   22[COMRAM] unsigned int 
  8566 ;; Registers used:
  8567 ;;		wreg, status,2, status,0, prodl, prodh
  8568 ;; Tracked objects:
  8569 ;;		On entry : 0/0
  8570 ;;		On exit  : 0/0
  8571 ;;		Unchanged: 0/0
  8572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8573 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8576 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8577 ;;Total ram usage:        6 bytes
  8578 ;; Hardware stack levels used:    1
  8579 ;; Hardware stack levels required when called:    3
  8580 ;; This function calls:
  8581 ;;		Nothing
  8582 ;; This function is called by:
  8583 ;;		_read_adc_voltage
  8584 ;;		_sprintf
  8585 ;; This function uses a non-reentrant model
  8586 ;;
  8587                           
  8588                           	psect	text24
  8589  00409A                     __ptext24:
  8590                           	opt stack 0
  8591  00409A                     ___wmul:
  8592                           	opt stack 26
  8593                           
  8594                           ;incstack = 0
  8595  00409A  5017               	movf	___wmul@multiplier,w,c
  8596  00409C  0219               	mulwf	___wmul@multiplicand,c
  8597  00409E  CFF3 F01B          	movff	prodl,___wmul@product
  8598  0040A2  CFF4 F01C          	movff	prodh,___wmul@product+1
  8599  0040A6  5017               	movf	___wmul@multiplier,w,c
  8600  0040A8  021A               	mulwf	___wmul@multiplicand+1,c
  8601  0040AA  50F3               	movf	prodl,w,c
  8602  0040AC  261C               	addwf	___wmul@product+1,f,c
  8603  0040AE  5018               	movf	___wmul@multiplier+1,w,c
  8604  0040B0  0219               	mulwf	___wmul@multiplicand,c
  8605  0040B2  50F3               	movf	prodl,w,c
  8606  0040B4  261C               	addwf	___wmul@product+1,f,c
  8607  0040B6  C01B  F017         	movff	___wmul@product,?___wmul
  8608  0040BA  C01C  F018         	movff	___wmul@product+1,?___wmul+1
  8609  0040BE  0012               	return	
  8610  0040C0                     __end_of___wmul:
  8611                           	opt stack 0
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           postinc0	equ	0xFEE
  8619                           wreg	equ	0xFE8
  8620                           postdec1	equ	0xFE5
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           fsr2h	equ	0xFDA
  8625                           fsr2l	equ	0xFD9
  8626                           status	equ	0xFD8
  8627                           
  8628 ;; *************** function ___fldiv *****************
  8629 ;; Defined at:
  8630 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  b               4   42[COMRAM] unsigned int 
  8633 ;;  a               4   46[COMRAM] unsigned int 
  8634 ;; Auto vars:     Size  Location     Type
  8635 ;;  grs             4   61[COMRAM] unsigned long 
  8636 ;;  rem             4   55[COMRAM] unsigned long 
  8637 ;;  new_exp         2   59[COMRAM] int 
  8638 ;;  aexp            1   66[COMRAM] unsigned char 
  8639 ;;  bexp            1   65[COMRAM] unsigned char 
  8640 ;;  sign            1   54[COMRAM] unsigned char 
  8641 ;; Return value:  Size  Location     Type
  8642 ;;                  4   42[COMRAM] unsigned char 
  8643 ;; Registers used:
  8644 ;;		wreg, status,2, status,0
  8645 ;; Tracked objects:
  8646 ;;		On entry : 0/0
  8647 ;;		On exit  : 0/0
  8648 ;;		Unchanged: 0/0
  8649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8650 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8651 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;Total ram usage:       25 bytes
  8655 ;; Hardware stack levels used:    1
  8656 ;; Hardware stack levels required when called:    3
  8657 ;; This function calls:
  8658 ;;		Nothing
  8659 ;; This function is called by:
  8660 ;;		_main
  8661 ;;		_read_adc_voltage
  8662 ;;		_set_pwm1_percent
  8663 ;;		_set_pwm1_voltage
  8664 ;;		_set_pwm1_general
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text25
  8669  002C54                     __ptext25:
  8670                           	opt stack 0
  8671  002C54                     ___fldiv:
  8672                           	opt stack 26
  8673                           
  8674                           ;incstack = 0
  8675  002C54  502E               	movf	___fldiv@b+3,w,c
  8676  002C56  0B80               	andlw	128
  8677  002C58  6E37               	movwf	___fldiv@sign,c
  8678  002C5A  502E               	movf	___fldiv@b+3,w,c
  8679  002C5C  242E               	addwf	___fldiv@b+3,w,c
  8680  002C5E  6E42               	movwf	___fldiv@bexp,c
  8681  002C60  BE2D               	btfsc	___fldiv@b+2,7,c
  8682  002C62  8042               	bsf	___fldiv@bexp,0,c
  8683  002C64  5042               	movf	___fldiv@bexp,w,c
  8684  002C66  B4D8               	btfsc	status,2,c
  8685  002C68  D00D               	goto	l1069
  8686  002C6A  2842               	incf	___fldiv@bexp,w,c
  8687  002C6C  A4D8               	btfss	status,2,c
  8688  002C6E  D008               	goto	l1070
  8689  002C70  0E00               	movlw	0
  8690  002C72  6E2B               	movwf	___fldiv@b,c
  8691  002C74  0E00               	movlw	0
  8692  002C76  6E2C               	movwf	___fldiv@b+1,c
  8693  002C78  0E00               	movlw	0
  8694  002C7A  6E2D               	movwf	___fldiv@b+2,c
  8695  002C7C  0E00               	movlw	0
  8696  002C7E  6E2E               	movwf	___fldiv@b+3,c
  8697  002C80                     l1070:
  8698  002C80  8E2D               	bsf	___fldiv@b+2,7,c
  8699  002C82  D006               	goto	L9
  8700  002C84                     l1069:
  8701  002C84  0E00               	movlw	0
  8702  002C86  6E2B               	movwf	___fldiv@b,c
  8703  002C88  0E00               	movlw	0
  8704  002C8A  6E2C               	movwf	___fldiv@b+1,c
  8705  002C8C  0E00               	movlw	0
  8706  002C8E  6E2D               	movwf	___fldiv@b+2,c
  8707  002C90                     L9:
  8708  002C90  0E00               	movlw	0
  8709  002C92  6E2E               	movwf	___fldiv@b+3,c
  8710  002C94  5032               	movf	___fldiv@a+3,w,c
  8711  002C96  0B80               	andlw	128
  8712  002C98  1A37               	xorwf	___fldiv@sign,f,c
  8713  002C9A  5032               	movf	___fldiv@a+3,w,c
  8714  002C9C  2432               	addwf	___fldiv@a+3,w,c
  8715  002C9E  6E43               	movwf	___fldiv@aexp,c
  8716  002CA0  BE31               	btfsc	___fldiv@a+2,7,c
  8717  002CA2  8043               	bsf	___fldiv@aexp,0,c
  8718  002CA4  5043               	movf	___fldiv@aexp,w,c
  8719  002CA6  B4D8               	btfsc	status,2,c
  8720  002CA8  D00D               	goto	l1073
  8721  002CAA  2843               	incf	___fldiv@aexp,w,c
  8722  002CAC  A4D8               	btfss	status,2,c
  8723  002CAE  D008               	goto	l1074
  8724  002CB0  0E00               	movlw	0
  8725  002CB2  6E2F               	movwf	___fldiv@a,c
  8726  002CB4  0E00               	movlw	0
  8727  002CB6  6E30               	movwf	___fldiv@a+1,c
  8728  002CB8  0E00               	movlw	0
  8729  002CBA  6E31               	movwf	___fldiv@a+2,c
  8730  002CBC  0E00               	movlw	0
  8731  002CBE  6E32               	movwf	___fldiv@a+3,c
  8732  002CC0                     l1074:
  8733  002CC0  8E31               	bsf	___fldiv@a+2,7,c
  8734  002CC2  D006               	goto	L10
  8735  002CC4                     l1073:
  8736  002CC4  0E00               	movlw	0
  8737  002CC6  6E2F               	movwf	___fldiv@a,c
  8738  002CC8  0E00               	movlw	0
  8739  002CCA  6E30               	movwf	___fldiv@a+1,c
  8740  002CCC  0E00               	movlw	0
  8741  002CCE  6E31               	movwf	___fldiv@a+2,c
  8742  002CD0                     L10:
  8743  002CD0  0E00               	movlw	0
  8744  002CD2  6E32               	movwf	___fldiv@a+3,c
  8745  002CD4  502F               	movf	___fldiv@a,w,c
  8746  002CD6  1030               	iorwf	___fldiv@a+1,w,c
  8747  002CD8  1031               	iorwf	___fldiv@a+2,w,c
  8748  002CDA  1032               	iorwf	___fldiv@a+3,w,c
  8749  002CDC  A4D8               	btfss	status,2,c
  8750  002CDE  D015               	goto	l1076
  8751  002CE0  0E00               	movlw	0
  8752  002CE2  6E2B               	movwf	___fldiv@b,c
  8753  002CE4  0E00               	movlw	0
  8754  002CE6  6E2C               	movwf	___fldiv@b+1,c
  8755  002CE8  0E00               	movlw	0
  8756  002CEA  6E2D               	movwf	___fldiv@b+2,c
  8757  002CEC  0E00               	movlw	0
  8758  002CEE  6E2E               	movwf	___fldiv@b+3,c
  8759  002CF0  0E80               	movlw	128
  8760  002CF2  122D               	iorwf	___fldiv@b+2,f,c
  8761  002CF4  0E7F               	movlw	127
  8762  002CF6  122E               	iorwf	___fldiv@b+3,f,c
  8763  002CF8  C02B  F02B         	movff	___fldiv@b,?___fldiv
  8764  002CFC  C02C  F02C         	movff	___fldiv@b+1,?___fldiv+1
  8765  002D00  C02D  F02D         	movff	___fldiv@b+2,?___fldiv+2
  8766  002D04  C02E  F02E         	movff	___fldiv@b+3,?___fldiv+3
  8767  002D08  0012               	return	
  8768  002D0A                     l1076:
  8769  002D0A  5042               	movf	___fldiv@bexp,w,c
  8770  002D0C  A4D8               	btfss	status,2,c
  8771  002D0E  D011               	goto	l1078
  8772  002D10  0E00               	movlw	0
  8773  002D12  6E2B               	movwf	___fldiv@b,c
  8774  002D14  0E00               	movlw	0
  8775  002D16  6E2C               	movwf	___fldiv@b+1,c
  8776  002D18  0E00               	movlw	0
  8777  002D1A  6E2D               	movwf	___fldiv@b+2,c
  8778  002D1C  0E00               	movlw	0
  8779  002D1E  6E2E               	movwf	___fldiv@b+3,c
  8780  002D20  C02B  F02B         	movff	___fldiv@b,?___fldiv
  8781  002D24  C02C  F02C         	movff	___fldiv@b+1,?___fldiv+1
  8782  002D28  C02D  F02D         	movff	___fldiv@b+2,?___fldiv+2
  8783  002D2C  C02E  F02E         	movff	___fldiv@b+3,?___fldiv+3
  8784  002D30  0012               	return	
  8785  002D32                     l1078:
  8786  002D32  5043               	movf	___fldiv@aexp,w,c
  8787  002D34  6E33               	movwf	??___fldiv& (0+255),c
  8788  002D36  6A34               	clrf	(??___fldiv+1)& (0+255),c
  8789  002D38  1E33               	comf	??___fldiv,f,c
  8790  002D3A  1E34               	comf	??___fldiv+1,f,c
  8791  002D3C  4A33               	infsnz	??___fldiv,f,c
  8792  002D3E  2A34               	incf	??___fldiv+1,f,c
  8793  002D40  5042               	movf	___fldiv@bexp,w,c
  8794  002D42  6E35               	movwf	(??___fldiv+2)& (0+255),c
  8795  002D44  6A36               	clrf	(??___fldiv+3)& (0+255),c
  8796  002D46  5033               	movf	??___fldiv,w,c
  8797  002D48  2635               	addwf	??___fldiv+2,f,c
  8798  002D4A  5034               	movf	??___fldiv+1,w,c
  8799  002D4C  2236               	addwfc	??___fldiv+3,f,c
  8800  002D4E  0E7F               	movlw	127
  8801  002D50  2435               	addwf	??___fldiv+2,w,c
  8802  002D52  6E3C               	movwf	___fldiv@new_exp,c
  8803  002D54  0E00               	movlw	0
  8804  002D56  2036               	addwfc	??___fldiv+3,w,c
  8805  002D58  6E3D               	movwf	___fldiv@new_exp+1,c
  8806  002D5A  C02B  F038         	movff	___fldiv@b,___fldiv@rem
  8807  002D5E  C02C  F039         	movff	___fldiv@b+1,___fldiv@rem+1
  8808  002D62  C02D  F03A         	movff	___fldiv@b+2,___fldiv@rem+2
  8809  002D66  C02E  F03B         	movff	___fldiv@b+3,___fldiv@rem+3
  8810  002D6A  0E00               	movlw	0
  8811  002D6C  6E2B               	movwf	___fldiv@b,c
  8812  002D6E  0E00               	movlw	0
  8813  002D70  6E2C               	movwf	___fldiv@b+1,c
  8814  002D72  0E00               	movlw	0
  8815  002D74  6E2D               	movwf	___fldiv@b+2,c
  8816  002D76  0E00               	movlw	0
  8817  002D78  6E2E               	movwf	___fldiv@b+3,c
  8818  002D7A  0E00               	movlw	0
  8819  002D7C  6E3E               	movwf	___fldiv@grs,c
  8820  002D7E  0E00               	movlw	0
  8821  002D80  6E3F               	movwf	___fldiv@grs+1,c
  8822  002D82  0E00               	movlw	0
  8823  002D84  6E40               	movwf	___fldiv@grs+2,c
  8824  002D86  0E00               	movlw	0
  8825  002D88  6E41               	movwf	___fldiv@grs+3,c
  8826  002D8A  0E00               	movlw	0
  8827  002D8C  6E43               	movwf	___fldiv@aexp,c
  8828  002D8E  D028               	goto	l1079
  8829  002D90  5043               	movf	___fldiv@aexp,w,c
  8830  002D92  B4D8               	btfsc	status,2,c
  8831  002D94  D011               	goto	l1081
  8832  002D96  90D8               	bcf	status,0,c
  8833  002D98  3638               	rlcf	___fldiv@rem,f,c
  8834  002D9A  3639               	rlcf	___fldiv@rem+1,f,c
  8835  002D9C  363A               	rlcf	___fldiv@rem+2,f,c
  8836  002D9E  363B               	rlcf	___fldiv@rem+3,f,c
  8837  002DA0  90D8               	bcf	status,0,c
  8838  002DA2  362B               	rlcf	___fldiv@b,f,c
  8839  002DA4  362C               	rlcf	___fldiv@b+1,f,c
  8840  002DA6  362D               	rlcf	___fldiv@b+2,f,c
  8841  002DA8  362E               	rlcf	___fldiv@b+3,f,c
  8842  002DAA  BE41               	btfsc	___fldiv@grs+3,7,c
  8843  002DAC  802B               	bsf	___fldiv@b,0,c
  8844  002DAE  90D8               	bcf	status,0,c
  8845  002DB0  363E               	rlcf	___fldiv@grs,f,c
  8846  002DB2  363F               	rlcf	___fldiv@grs+1,f,c
  8847  002DB4  3640               	rlcf	___fldiv@grs+2,f,c
  8848  002DB6  3641               	rlcf	___fldiv@grs+3,f,c
  8849  002DB8                     l1081:
  8850  002DB8  502F               	movf	___fldiv@a,w,c
  8851  002DBA  5C38               	subwf	___fldiv@rem,w,c
  8852  002DBC  5030               	movf	___fldiv@a+1,w,c
  8853  002DBE  5839               	subwfb	___fldiv@rem+1,w,c
  8854  002DC0  5031               	movf	___fldiv@a+2,w,c
  8855  002DC2  583A               	subwfb	___fldiv@rem+2,w,c
  8856  002DC4  5032               	movf	___fldiv@a+3,w,c
  8857  002DC6  583B               	subwfb	___fldiv@rem+3,w,c
  8858  002DC8  A0D8               	btfss	status,0,c
  8859  002DCA  D009               	goto	l1083
  8860  002DCC  8C41               	bsf	___fldiv@grs+3,6,c
  8861  002DCE  502F               	movf	___fldiv@a,w,c
  8862  002DD0  5E38               	subwf	___fldiv@rem,f,c
  8863  002DD2  5030               	movf	___fldiv@a+1,w,c
  8864  002DD4  5A39               	subwfb	___fldiv@rem+1,f,c
  8865  002DD6  5031               	movf	___fldiv@a+2,w,c
  8866  002DD8  5A3A               	subwfb	___fldiv@rem+2,f,c
  8867  002DDA  5032               	movf	___fldiv@a+3,w,c
  8868  002DDC  5A3B               	subwfb	___fldiv@rem+3,f,c
  8869  002DDE                     l1083:
  8870  002DDE  2A43               	incf	___fldiv@aexp,f,c
  8871  002DE0                     l1079:
  8872  002DE0  0E19               	movlw	25
  8873  002DE2  6443               	cpfsgt	___fldiv@aexp,c
  8874  002DE4  D7D5               	goto	l1080
  8875  002DE6  5038               	movf	___fldiv@rem,w,c
  8876  002DE8  1039               	iorwf	___fldiv@rem+1,w,c
  8877  002DEA  103A               	iorwf	___fldiv@rem+2,w,c
  8878  002DEC  103B               	iorwf	___fldiv@rem+3,w,c
  8879  002DEE  B4D8               	btfsc	status,2,c
  8880  002DF0  D011               	goto	l1086
  8881  002DF2  803E               	bsf	___fldiv@grs,0,c
  8882  002DF4  D00F               	goto	l1086
  8883  002DF6  90D8               	bcf	status,0,c
  8884  002DF8  362B               	rlcf	___fldiv@b,f,c
  8885  002DFA  362C               	rlcf	___fldiv@b+1,f,c
  8886  002DFC  362D               	rlcf	___fldiv@b+2,f,c
  8887  002DFE  362E               	rlcf	___fldiv@b+3,f,c
  8888  002E00  BE41               	btfsc	___fldiv@grs+3,7,c
  8889  002E02  802B               	bsf	___fldiv@b,0,c
  8890  002E04  90D8               	bcf	status,0,c
  8891  002E06  363E               	rlcf	___fldiv@grs,f,c
  8892  002E08  363F               	rlcf	___fldiv@grs+1,f,c
  8893  002E0A  3640               	rlcf	___fldiv@grs+2,f,c
  8894  002E0C  3641               	rlcf	___fldiv@grs+3,f,c
  8895  002E0E  063C               	decf	___fldiv@new_exp,f,c
  8896  002E10  A0D8               	btfss	status,0,c
  8897  002E12  063D               	decf	___fldiv@new_exp+1,f,c
  8898  002E14                     l1086:
  8899  002E14  AE2D               	btfss	___fldiv@b+2,7,c
  8900  002E16  D7EF               	goto	l1087
  8901  002E18  0E00               	movlw	0
  8902  002E1A  6E43               	movwf	___fldiv@aexp,c
  8903  002E1C  AE41               	btfss	___fldiv@grs+3,7,c
  8904  002E1E  D016               	goto	l1093
  8905  002E20  0EFF               	movlw	255
  8906  002E22  143E               	andwf	___fldiv@grs,w,c
  8907  002E24  6E33               	movwf	??___fldiv& (0+255),c
  8908  002E26  0EFF               	movlw	255
  8909  002E28  143F               	andwf	___fldiv@grs+1,w,c
  8910  002E2A  6E34               	movwf	(??___fldiv+1)& (0+255),c
  8911  002E2C  0EFF               	movlw	255
  8912  002E2E  1440               	andwf	___fldiv@grs+2,w,c
  8913  002E30  6E35               	movwf	(??___fldiv+2)& (0+255),c
  8914  002E32  0E7F               	movlw	127
  8915  002E34  1441               	andwf	___fldiv@grs+3,w,c
  8916  002E36  6E36               	movwf	(??___fldiv+3)& (0+255),c
  8917  002E38  5033               	movf	??___fldiv,w,c
  8918  002E3A  1034               	iorwf	??___fldiv+1,w,c
  8919  002E3C  1035               	iorwf	??___fldiv+2,w,c
  8920  002E3E  1036               	iorwf	??___fldiv+3,w,c
  8921  002E40  A4D8               	btfss	status,2,c
  8922  002E42  D002               	goto	u3940
  8923  002E44  A02B               	btfss	___fldiv@b,0,c
  8924  002E46  D002               	goto	l1093
  8925  002E48                     u3940:
  8926  002E48  0E01               	movlw	1
  8927  002E4A  6E43               	movwf	___fldiv@aexp,c
  8928  002E4C                     l1093:
  8929  002E4C  5043               	movf	___fldiv@aexp,w,c
  8930  002E4E  B4D8               	btfsc	status,2,c
  8931  002E50  D01F               	goto	l1095
  8932  002E52  0E01               	movlw	1
  8933  002E54  262B               	addwf	___fldiv@b,f,c
  8934  002E56  0E00               	movlw	0
  8935  002E58  222C               	addwfc	___fldiv@b+1,f,c
  8936  002E5A  222D               	addwfc	___fldiv@b+2,f,c
  8937  002E5C  222E               	addwfc	___fldiv@b+3,f,c
  8938  002E5E  A02E               	btfss	___fldiv@b+3,0,c
  8939  002E60  D017               	goto	l1095
  8940  002E62  C02B  F033         	movff	___fldiv@b,??___fldiv
  8941  002E66  C02C  F034         	movff	___fldiv@b+1,??___fldiv+1
  8942  002E6A  C02D  F035         	movff	___fldiv@b+2,??___fldiv+2
  8943  002E6E  C02E  F036         	movff	___fldiv@b+3,??___fldiv+3
  8944  002E72  3436               	rlcf	??___fldiv+3,w,c
  8945  002E74  3236               	rrcf	??___fldiv+3,f,c
  8946  002E76  3235               	rrcf	??___fldiv+2,f,c
  8947  002E78  3234               	rrcf	??___fldiv+1,f,c
  8948  002E7A  3233               	rrcf	??___fldiv,f,c
  8949  002E7C  C033  F02B         	movff	??___fldiv,___fldiv@b
  8950  002E80  C034  F02C         	movff	??___fldiv+1,___fldiv@b+1
  8951  002E84  C035  F02D         	movff	??___fldiv+2,___fldiv@b+2
  8952  002E88  C036  F02E         	movff	??___fldiv+3,___fldiv@b+3
  8953  002E8C  4A3C               	infsnz	___fldiv@new_exp,f,c
  8954  002E8E  2A3D               	incf	___fldiv@new_exp+1,f,c
  8955  002E90                     l1095:
  8956  002E90  BE3D               	btfsc	___fldiv@new_exp+1,7,c
  8957  002E92  D010               	goto	l1096
  8958  002E94  503D               	movf	___fldiv@new_exp+1,w,c
  8959  002E96  E103               	bnz	u3970
  8960  002E98  283C               	incf	___fldiv@new_exp,w,c
  8961  002E9A  A0D8               	btfss	status,0,c
  8962  002E9C  D00B               	goto	l1096
  8963  002E9E                     u3970:
  8964  002E9E  0E00               	movlw	0
  8965  002EA0  6E3D               	movwf	___fldiv@new_exp+1,c
  8966  002EA2  683C               	setf	___fldiv@new_exp,c
  8967  002EA4  0E00               	movlw	0
  8968  002EA6  6E2B               	movwf	___fldiv@b,c
  8969  002EA8  0E00               	movlw	0
  8970  002EAA  6E2C               	movwf	___fldiv@b+1,c
  8971  002EAC  0E00               	movlw	0
  8972  002EAE  6E2D               	movwf	___fldiv@b+2,c
  8973  002EB0  0E00               	movlw	0
  8974  002EB2  6E2E               	movwf	___fldiv@b+3,c
  8975  002EB4                     l1096:
  8976  002EB4  BE3D               	btfsc	___fldiv@new_exp+1,7,c
  8977  002EB6  D005               	goto	u3980
  8978  002EB8  503D               	movf	___fldiv@new_exp+1,w,c
  8979  002EBA  E111               	bnz	l3955
  8980  002EBC  043C               	decf	___fldiv@new_exp,w,c
  8981  002EBE  B0D8               	btfsc	status,0,c
  8982  002EC0  D00E               	goto	l1097
  8983  002EC2                     u3980:
  8984  002EC2  0E00               	movlw	0
  8985  002EC4  6E3D               	movwf	___fldiv@new_exp+1,c
  8986  002EC6  0E00               	movlw	0
  8987  002EC8  6E3C               	movwf	___fldiv@new_exp,c
  8988  002ECA  0E00               	movlw	0
  8989  002ECC  6E2B               	movwf	___fldiv@b,c
  8990  002ECE  0E00               	movlw	0
  8991  002ED0  6E2C               	movwf	___fldiv@b+1,c
  8992  002ED2  0E00               	movlw	0
  8993  002ED4  6E2D               	movwf	___fldiv@b+2,c
  8994  002ED6  0E00               	movlw	0
  8995  002ED8  6E2E               	movwf	___fldiv@b+3,c
  8996  002EDA  0E00               	movlw	0
  8997  002EDC  6E37               	movwf	___fldiv@sign,c
  8998  002EDE                     l1097:
  8999  002EDE                     l3955:
  9000  002EDE  C03C  F042         	movff	___fldiv@new_exp,___fldiv@bexp
  9001  002EE2  A042               	btfss	___fldiv@bexp,0,c
  9002  002EE4  D002               	goto	l1098
  9003  002EE6  8E2D               	bsf	___fldiv@b+2,7,c
  9004  002EE8  D001               	goto	l1099
  9005  002EEA                     l1098:
  9006  002EEA  9E2D               	bcf	___fldiv@b+2,7,c
  9007  002EEC                     l1099:
  9008  002EEC  90D8               	bcf	status,0,c
  9009  002EEE  3042               	rrcf	___fldiv@bexp,w,c
  9010  002EF0  6E2E               	movwf	___fldiv@b+3,c
  9011  002EF2  5037               	movf	___fldiv@sign,w,c
  9012  002EF4  122E               	iorwf	___fldiv@b+3,f,c
  9013  002EF6  C02B  F02B         	movff	___fldiv@b,?___fldiv
  9014  002EFA  C02C  F02C         	movff	___fldiv@b+1,?___fldiv+1
  9015  002EFE  C02D  F02D         	movff	___fldiv@b+2,?___fldiv+2
  9016  002F02  C02E  F02E         	movff	___fldiv@b+3,?___fldiv+3
  9017  002F06  0012               	return	
  9018  002F08                     __end_of___fldiv:
  9019                           	opt stack 0
  9020                           tblptru	equ	0xFF8
  9021                           tblptrh	equ	0xFF7
  9022                           tblptrl	equ	0xFF6
  9023                           tablat	equ	0xFF5
  9024                           prodh	equ	0xFF4
  9025                           prodl	equ	0xFF3
  9026                           postinc0	equ	0xFEE
  9027                           wreg	equ	0xFE8
  9028                           postdec1	equ	0xFE5
  9029                           fsr1l	equ	0xFE1
  9030                           indf2	equ	0xFDF
  9031                           postinc2	equ	0xFDE
  9032                           fsr2h	equ	0xFDA
  9033                           fsr2l	equ	0xFD9
  9034                           status	equ	0xFD8
  9035                           
  9036 ;; *************** function _lcd_puts *****************
  9037 ;; Defined at:
  9038 ;;		line 120 in file "lcd_x8.c"
  9039 ;; Parameters:    Size  Location     Type
  9040 ;;  s               2   36[COMRAM] PTR unsigned char 
  9041 ;;		 -> STR_8(2), main@Buffer(32), 
  9042 ;; Auto vars:     Size  Location     Type
  9043 ;;		None
  9044 ;; Return value:  Size  Location     Type
  9045 ;;                  1    wreg      void 
  9046 ;; Registers used:
  9047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  9048 ;; Tracked objects:
  9049 ;;		On entry : 0/0
  9050 ;;		On exit  : 0/0
  9051 ;;		Unchanged: 0/0
  9052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9053 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9056 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9057 ;;Total ram usage:        2 bytes
  9058 ;; Hardware stack levels used:    1
  9059 ;; Hardware stack levels required when called:    8
  9060 ;; This function calls:
  9061 ;;		_lcd_putc
  9062 ;; This function is called by:
  9063 ;;		_main
  9064 ;; This function uses a non-reentrant model
  9065 ;;
  9066                           
  9067                           	psect	text26
  9068  003E5C                     __ptext26:
  9069                           	opt stack 0
  9070  003E5C                     _lcd_puts:
  9071                           	opt stack 22
  9072                           
  9073                           ;lcd_x8.c: 121: while (*s) {
  9074                           
  9075                           ;incstack = 0
  9076  003E5C  D015               	goto	l252
  9077  003E5E                     
  9078                           ;lcd_x8.c: 122: lcd_putc(*s);
  9079  003E5E  C025  FFF6         	movff	lcd_puts@s,tblptrl
  9080  003E62  C026  FFF7         	movff	lcd_puts@s+1,tblptrh
  9081  003E66  0E00               	movlw	low (__smallconst shr (0+16))
  9082  003E68  6EF8               	movwf	tblptru,c
  9083  003E6A  0E0F               	movlw	(high __ramtop+-1)
  9084  003E6C  64F7               	cpfsgt	tblptrh,c
  9085  003E6E  D003               	bra	u5127
  9086  003E70  0008               	tblrd		*
  9087  003E72  50F5               	movf	tablat,w,c
  9088  003E74  D005               	bra	u5120
  9089  003E76                     u5127:
  9090  003E76  CFF6 FFD9          	movff	tblptrl,fsr2l
  9091  003E7A  CFF7 FFDA          	movff	tblptrh,fsr2h
  9092  003E7E  50DF               	movf	indf2,w,c
  9093  003E80                     u5120:
  9094  003E80  EC59  F01F         	call	_lcd_putc
  9095                           
  9096                           ;lcd_x8.c: 123: s++;
  9097  003E84  4A25               	infsnz	lcd_puts@s,f,c
  9098  003E86  2A26               	incf	lcd_puts@s+1,f,c
  9099  003E88                     l252:
  9100  003E88  C025  FFF6         	movff	lcd_puts@s,tblptrl
  9101  003E8C  C026  FFF7         	movff	lcd_puts@s+1,tblptrh
  9102  003E90  0E00               	movlw	low (__smallconst shr (0+16))
  9103  003E92  6EF8               	movwf	tblptru,c
  9104  003E94  0E0F               	movlw	(high __ramtop+-1)
  9105  003E96  64F7               	cpfsgt	tblptrh,c
  9106  003E98  D003               	bra	u5137
  9107  003E9A  0008               	tblrd		*
  9108  003E9C  50F5               	movf	tablat,w,c
  9109  003E9E  D005               	bra	u5130
  9110  003EA0                     u5137:
  9111  003EA0  CFF6 FFD9          	movff	tblptrl,fsr2l
  9112  003EA4  CFF7 FFDA          	movff	tblptrh,fsr2h
  9113  003EA8  50DF               	movf	indf2,w,c
  9114  003EAA                     u5130:
  9115  003EAA  0900               	iorlw	0
  9116  003EAC  B4D8               	btfsc	status,2,c
  9117  003EAE  0012               	return	
  9118  003EB0  D7D6               	goto	l253
  9119  003EB2                     __end_of_lcd_puts:
  9120                           	opt stack 0
  9121                           tblptru	equ	0xFF8
  9122                           tblptrh	equ	0xFF7
  9123                           tblptrl	equ	0xFF6
  9124                           tablat	equ	0xFF5
  9125                           prodh	equ	0xFF4
  9126                           prodl	equ	0xFF3
  9127                           postinc0	equ	0xFEE
  9128                           wreg	equ	0xFE8
  9129                           postdec1	equ	0xFE5
  9130                           fsr1l	equ	0xFE1
  9131                           indf2	equ	0xFDF
  9132                           postinc2	equ	0xFDE
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function _lcd_putc *****************
  9138 ;; Defined at:
  9139 ;;		line 106 in file "lcd_x8.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  c               1    wreg     unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;  c               1   35[COMRAM] unsigned char 
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      void 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;Total ram usage:        1 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    7
  9160 ;; This function calls:
  9161 ;;		_delay_ms
  9162 ;;		_lcd_gotoxy
  9163 ;;		_lcd_send_byte
  9164 ;; This function is called by:
  9165 ;;		_main
  9166 ;;		_lcd_puts
  9167 ;; This function uses a non-reentrant model
  9168 ;;
  9169                           
  9170                           	psect	text27
  9171  003EB2                     __ptext27:
  9172                           	opt stack 0
  9173  003EB2                     _lcd_putc:
  9174                           	opt stack 22
  9175                           
  9176                           ;incstack = 0
  9177                           ;lcd_putc@c stored from wreg
  9178  003EB2  6E24               	movwf	lcd_putc@c,c
  9179                           
  9180                           ;lcd_x8.c: 107: switch (c) {
  9181  003EB4  D01E               	goto	l243
  9182  003EB6  0E01               	movlw	1
  9183  003EB8  6E1F               	movwf	lcd_send_byte@n,c
  9184  003EBA  0E00               	movlw	0
  9185  003EBC  ECA8  F01F         	call	_lcd_send_byte
  9186                           
  9187                           ;lcd_x8.c: 109: delay_ms(2);
  9188  003EC0  0E00               	movlw	0
  9189  003EC2  6E18               	movwf	delay_ms@n+1,c
  9190  003EC4  0E02               	movlw	2
  9191  003EC6  6E17               	movwf	delay_ms@n,c
  9192  003EC8  EC60  F020         	call	_delay_ms	;wreg free
  9193                           
  9194                           ;lcd_x8.c: 110: break;
  9195  003ECC  0012               	return	
  9196  003ECE  0E02               	movlw	2
  9197  003ED0  6E21               	movwf	lcd_gotoxy@y,c
  9198  003ED2  0E01               	movlw	1
  9199  003ED4  ECCC  F01F         	call	_lcd_gotoxy
  9200                           
  9201                           ;lcd_x8.c: 112: break;
  9202  003ED8  0012               	return	
  9203  003EDA  0E10               	movlw	16
  9204  003EDC  6E1F               	movwf	lcd_send_byte@n,c
  9205  003EDE  0E00               	movlw	0
  9206  003EE0  ECA8  F01F         	call	_lcd_send_byte
  9207                           
  9208                           ;lcd_x8.c: 114: break;
  9209  003EE4  0012               	return	
  9210  003EE6  C024  F01F         	movff	lcd_putc@c,lcd_send_byte@n
  9211  003EEA  0E01               	movlw	1
  9212  003EEC  ECA8  F01F         	call	_lcd_send_byte
  9213                           
  9214                           ;lcd_x8.c: 117: }
  9215                           
  9216                           ;lcd_x8.c: 116: break;
  9217  003EF0  0012               	return	
  9218  003EF2                     l243:
  9219  003EF2  5024               	movf	lcd_putc@c,w,c
  9220                           
  9221                           ; Switch size 1, requested type "space"
  9222                           ; Number of cases is 3, Range of values is 8 to 12
  9223                           ; switch strategies available:
  9224                           ; Name         Instructions Cycles
  9225                           ; simple_byte           10     6 (average)
  9226                           ;	Chosen strategy is simple_byte
  9227  003EF4  0A08               	xorlw	8	; case 8
  9228  003EF6  B4D8               	btfsc	status,2,c
  9229  003EF8  D7F0               	goto	l247
  9230  003EFA  0A02               	xorlw	2	; case 10
  9231  003EFC  B4D8               	btfsc	status,2,c
  9232  003EFE  D7E7               	goto	l246
  9233  003F00  0A06               	xorlw	6	; case 12
  9234  003F02  B4D8               	btfsc	status,2,c
  9235  003F04  D7D8               	goto	l244
  9236  003F06  D7EF               	goto	l248
  9237  003F08                     __end_of_lcd_putc:
  9238                           	opt stack 0
  9239                           tblptru	equ	0xFF8
  9240                           tblptrh	equ	0xFF7
  9241                           tblptrl	equ	0xFF6
  9242                           tablat	equ	0xFF5
  9243                           prodh	equ	0xFF4
  9244                           prodl	equ	0xFF3
  9245                           postinc0	equ	0xFEE
  9246                           wreg	equ	0xFE8
  9247                           postdec1	equ	0xFE5
  9248                           fsr1l	equ	0xFE1
  9249                           indf2	equ	0xFDF
  9250                           postinc2	equ	0xFDE
  9251                           fsr2h	equ	0xFDA
  9252                           fsr2l	equ	0xFD9
  9253                           status	equ	0xFD8
  9254                           
  9255 ;; *************** function _lcd_gotoxy *****************
  9256 ;; Defined at:
  9257 ;;		line 89 in file "lcd_x8.c"
  9258 ;; Parameters:    Size  Location     Type
  9259 ;;  x               1    wreg     unsigned char 
  9260 ;;  y               1   32[COMRAM] unsigned char 
  9261 ;; Auto vars:     Size  Location     Type
  9262 ;;  x               1   33[COMRAM] unsigned char 
  9263 ;;  address         1   34[COMRAM] unsigned char 
  9264 ;; Return value:  Size  Location     Type
  9265 ;;                  1    wreg      void 
  9266 ;; Registers used:
  9267 ;;		wreg, status,2, status,0, cstack
  9268 ;; Tracked objects:
  9269 ;;		On entry : 0/0
  9270 ;;		On exit  : 0/0
  9271 ;;		Unchanged: 0/0
  9272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9273 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9274 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9276 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9277 ;;Total ram usage:        3 bytes
  9278 ;; Hardware stack levels used:    1
  9279 ;; Hardware stack levels required when called:    6
  9280 ;; This function calls:
  9281 ;;		_lcd_send_byte
  9282 ;; This function is called by:
  9283 ;;		_main
  9284 ;;		_lcd_putc
  9285 ;; This function uses a non-reentrant model
  9286 ;;
  9287                           
  9288                           	psect	text28
  9289  003F98                     __ptext28:
  9290                           	opt stack 0
  9291  003F98                     _lcd_gotoxy:
  9292                           	opt stack 22
  9293                           
  9294                           ;incstack = 0
  9295                           ;lcd_gotoxy@x stored from wreg
  9296  003F98  6E22               	movwf	lcd_gotoxy@x,c
  9297                           
  9298                           ;lcd_x8.c: 90: unsigned char address;
  9299                           ;lcd_x8.c: 92: switch (y) {
  9300  003F9A  D009               	goto	l234
  9301  003F9C  0E80               	movlw	128
  9302  003F9E  D005               	goto	L13
  9303  003FA0  0EC0               	movlw	192
  9304  003FA2  D003               	goto	L13
  9305  003FA4  0E90               	movlw	144
  9306  003FA6  D001               	goto	L13
  9307  003FA8  0ED0               	movlw	208
  9308  003FAA                     L13:
  9309  003FAA  6E23               	movwf	lcd_gotoxy@address,c
  9310                           
  9311                           ;lcd_x8.c: 101: }
  9312                           
  9313                           ;lcd_x8.c: 100: break;
  9314  003FAC  D00D               	goto	l236
  9315  003FAE                     l234:
  9316  003FAE  5021               	movf	lcd_gotoxy@y,w,c
  9317                           
  9318                           ; Switch size 1, requested type "space"
  9319                           ; Number of cases is 4, Range of values is 1 to 4
  9320                           ; switch strategies available:
  9321                           ; Name         Instructions Cycles
  9322                           ; simple_byte           13     7 (average)
  9323                           ;	Chosen strategy is simple_byte
  9324  003FB0  0A01               	xorlw	1	; case 1
  9325  003FB2  B4D8               	btfsc	status,2,c
  9326  003FB4  D7F3               	goto	l235
  9327  003FB6  0A03               	xorlw	3	; case 2
  9328  003FB8  B4D8               	btfsc	status,2,c
  9329  003FBA  D7F2               	goto	l237
  9330  003FBC  0A01               	xorlw	1	; case 3
  9331  003FBE  B4D8               	btfsc	status,2,c
  9332  003FC0  D7F1               	goto	l238
  9333  003FC2  0A07               	xorlw	7	; case 4
  9334  003FC4  B4D8               	btfsc	status,2,c
  9335  003FC6  D7F0               	goto	l239
  9336  003FC8                     l236:
  9337                           
  9338                           ;lcd_x8.c: 102: address += x - 1;
  9339  003FC8  0422               	decf	lcd_gotoxy@x,w,c
  9340  003FCA  2623               	addwf	lcd_gotoxy@address,f,c
  9341                           
  9342                           ;lcd_x8.c: 103: lcd_send_byte(0, (unsigned char) (0x80 | address));
  9343  003FCC  5023               	movf	lcd_gotoxy@address,w,c
  9344  003FCE  0980               	iorlw	128
  9345  003FD0  6E1F               	movwf	lcd_send_byte@n,c
  9346  003FD2  0E00               	movlw	0
  9347  003FD4  ECA8  F01F         	call	_lcd_send_byte
  9348  003FD8  0012               	return		;funcret
  9349  003FDA                     __end_of_lcd_gotoxy:
  9350                           	opt stack 0
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           postinc0	equ	0xFEE
  9358                           wreg	equ	0xFE8
  9359                           postdec1	equ	0xFE5
  9360                           fsr1l	equ	0xFE1
  9361                           indf2	equ	0xFDF
  9362                           postinc2	equ	0xFDE
  9363                           fsr2h	equ	0xFDA
  9364                           fsr2l	equ	0xFD9
  9365                           status	equ	0xFD8
  9366                           
  9367 ;; *************** function _lcd_init *****************
  9368 ;; Defined at:
  9369 ;;		line 56 in file "lcd_x8.c"
  9370 ;; Parameters:    Size  Location     Type
  9371 ;;		None
  9372 ;; Auto vars:     Size  Location     Type
  9373 ;;  i               1   32[COMRAM] unsigned char 
  9374 ;; Return value:  Size  Location     Type
  9375 ;;                  1    wreg      void 
  9376 ;; Registers used:
  9377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9378 ;; Tracked objects:
  9379 ;;		On entry : 0/0
  9380 ;;		On exit  : 0/0
  9381 ;;		Unchanged: 0/0
  9382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9386 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9387 ;;Total ram usage:        1 bytes
  9388 ;; Hardware stack levels used:    1
  9389 ;; Hardware stack levels required when called:    6
  9390 ;; This function calls:
  9391 ;;		_delay_ms
  9392 ;;		_lcd_send_byte
  9393 ;;		_lcd_send_nibble
  9394 ;; This function is called by:
  9395 ;;		_main
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           	psect	text29
  9400  003D9C                     __ptext29:
  9401                           	opt stack 0
  9402  003D9C                     _lcd_init:
  9403                           	opt stack 24
  9404                           
  9405                           ;lcd_x8.c: 58: unsigned char i;
  9406                           ;lcd_x8.c: 61: PORTEbits.RE2 = 0;
  9407                           
  9408                           ;incstack = 0
  9409  003D9C  9484               	bcf	3972,2,c	;volatile
  9410                           
  9411                           ;lcd_x8.c: 63: PORTEbits.RE1 = 0;
  9412  003D9E  9284               	bcf	3972,1,c	;volatile
  9413                           
  9414                           ;lcd_x8.c: 65: delay_ms(25);
  9415  003DA0  0E00               	movlw	0
  9416  003DA2  6E18               	movwf	delay_ms@n+1,c
  9417  003DA4  0E19               	movlw	25
  9418  003DA6  6E17               	movwf	delay_ms@n,c
  9419  003DA8  EC60  F020         	call	_delay_ms	;wreg free
  9420                           
  9421                           ;lcd_x8.c: 66: for (i = 1; i <= 3; ++i) {
  9422  003DAC  0E01               	movlw	1
  9423  003DAE  6E21               	movwf	lcd_init@i,c
  9424  003DB0                     l4273:
  9425  003DB0  0E03               	movlw	3
  9426  003DB2  6421               	cpfsgt	lcd_init@i,c
  9427  003DB4  D001               	goto	l227
  9428  003DB6  D00B               	goto	u4580
  9429  003DB8                     l227:
  9430                           
  9431                           ;lcd_x8.c: 67: lcd_send_nibble(3);
  9432  003DB8  0E03               	movlw	3
  9433  003DBA  ECBE  F020         	call	_lcd_send_nibble
  9434                           
  9435                           ;lcd_x8.c: 69: delay_ms(6);
  9436  003DBE  0E00               	movlw	0
  9437  003DC0  6E18               	movwf	delay_ms@n+1,c
  9438  003DC2  0E06               	movlw	6
  9439  003DC4  6E17               	movwf	delay_ms@n,c
  9440  003DC6  EC60  F020         	call	_delay_ms	;wreg free
  9441  003DCA  2A21               	incf	lcd_init@i,f,c
  9442  003DCC  D7F1               	goto	l4273
  9443  003DCE                     u4580:
  9444                           
  9445                           ;lcd_x8.c: 70: }
  9446                           ;lcd_x8.c: 72: lcd_send_nibble(2);
  9447  003DCE  0E02               	movlw	2
  9448  003DD0  ECBE  F020         	call	_lcd_send_nibble
  9449                           
  9450                           ;lcd_x8.c: 74: for (i = 0; i <= 3; ++i)
  9451  003DD4  0E00               	movlw	0
  9452  003DD6  6E21               	movwf	lcd_init@i,c
  9453  003DD8                     l4287:
  9454  003DD8  0E03               	movlw	3
  9455  003DDA  6421               	cpfsgt	lcd_init@i,c
  9456  003DDC  D001               	goto	l229
  9457  003DDE  0012               	return	
  9458  003DE0                     l229:
  9459                           
  9460                           ;lcd_x8.c: 75: lcd_send_byte(0, LCD_INIT_STRING[i]);
  9461  003DE0  5021               	movf	lcd_init@i,w,c
  9462  003DE2  0D01               	mullw	1
  9463  003DE4  0EDB               	movlw	low _LCD_INIT_STRING
  9464  003DE6  24F3               	addwf	prodl,w,c
  9465  003DE8  6ED9               	movwf	fsr2l,c
  9466  003DEA  0E00               	movlw	high _LCD_INIT_STRING
  9467  003DEC  20F4               	addwfc	prodh,w,c
  9468  003DEE  6EDA               	movwf	fsr2h,c
  9469  003DF0  50DF               	movf	indf2,w,c
  9470  003DF2  6E1F               	movwf	lcd_send_byte@n,c
  9471  003DF4  0E00               	movlw	0
  9472  003DF6  ECA8  F01F         	call	_lcd_send_byte
  9473  003DFA  2A21               	incf	lcd_init@i,f,c
  9474  003DFC  D7ED               	goto	l4287
  9475  003DFE                     __end_of_lcd_init:
  9476                           	opt stack 0
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           postinc0	equ	0xFEE
  9484                           wreg	equ	0xFE8
  9485                           postdec1	equ	0xFE5
  9486                           fsr1l	equ	0xFE1
  9487                           indf2	equ	0xFDF
  9488                           postinc2	equ	0xFDE
  9489                           fsr2h	equ	0xFDA
  9490                           fsr2l	equ	0xFD9
  9491                           status	equ	0xFD8
  9492                           
  9493 ;; *************** function _lcd_send_byte *****************
  9494 ;; Defined at:
  9495 ;;		line 39 in file "lcd_x8.c"
  9496 ;; Parameters:    Size  Location     Type
  9497 ;;  cm_data         1    wreg     unsigned char 
  9498 ;;  n               1   30[COMRAM] unsigned char 
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;  cm_data         1   31[COMRAM] unsigned char 
  9501 ;; Return value:  Size  Location     Type
  9502 ;;                  1    wreg      void 
  9503 ;; Registers used:
  9504 ;;		wreg, status,2, status,0, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9510 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9513 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9514 ;;Total ram usage:        2 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    5
  9517 ;; This function calls:
  9518 ;;		_delay_cycles
  9519 ;;		_delay_ms
  9520 ;;		_lcd_send_nibble
  9521 ;; This function is called by:
  9522 ;;		_lcd_init
  9523 ;;		_lcd_gotoxy
  9524 ;;		_lcd_putc
  9525 ;;		_Lcd_Shift_Right
  9526 ;;		_Lcd_Shift_Left
  9527 ;; This function uses a non-reentrant model
  9528 ;;
  9529                           
  9530                           	psect	text30
  9531  003F50                     __ptext30:
  9532                           	opt stack 0
  9533  003F50                     _lcd_send_byte:
  9534                           	opt stack 23
  9535                           
  9536                           ;incstack = 0
  9537                           ;lcd_send_byte@cm_data stored from wreg
  9538  003F50  6E20               	movwf	lcd_send_byte@cm_data,c
  9539                           
  9540                           ;lcd_x8.c: 43: PORTEbits.RE2 = cm_data;
  9541  003F52  B020               	btfsc	lcd_send_byte@cm_data,0,c
  9542  003F54  D002               	bra	u2785
  9543  003F56  9484               	bcf	3972,2,c	;volatile
  9544  003F58  D001               	bra	u2786
  9545  003F5A                     u2785:
  9546  003F5A  8484               	bsf	3972,2,c	;volatile
  9547  003F5C                     u2786:
  9548                           
  9549                           ;lcd_x8.c: 44: delay_cycles(1);
  9550  003F5C  0E01               	movlw	1
  9551  003F5E  EC21  F020         	call	_delay_cycles
  9552                           
  9553                           ;lcd_x8.c: 46: delay_cycles(1);
  9554  003F62  0E01               	movlw	1
  9555  003F64  EC21  F020         	call	_delay_cycles
  9556                           
  9557                           ;lcd_x8.c: 47: PORTEbits.RE1 = 0;
  9558  003F68  9284               	bcf	3972,1,c	;volatile
  9559                           
  9560                           ;lcd_x8.c: 48: lcd_send_nibble(n >> 4);
  9561  003F6A  381F               	swapf	lcd_send_byte@n,w,c
  9562  003F6C  0B0F               	andlw	15
  9563  003F6E  ECBE  F020         	call	_lcd_send_nibble
  9564                           
  9565                           ;lcd_x8.c: 49: lcd_send_nibble(n & 0x0f);
  9566  003F72  501F               	movf	lcd_send_byte@n,w,c
  9567  003F74  0B0F               	andlw	15
  9568  003F76  ECBE  F020         	call	_lcd_send_nibble
  9569                           
  9570                           ;lcd_x8.c: 50: if (cm_data) _delaywdt((unsigned long)((200)*(4000000UL/4000000.0)));
  9571  003F7A  5020               	movf	lcd_send_byte@cm_data,w,c
  9572  003F7C  B4D8               	btfsc	status,2,c
  9573  003F7E  D005               	goto	l222
  9574  003F80  0E32               	movlw	50
  9575  003F82                     u6947:
  9576  003F82  0004               	clrwdt	
  9577  003F84  2EE8               	decfsz	wreg,f,c
  9578  003F86  D7FD               	bra	u6947
  9579  003F88  0012               	return	
  9580  003F8A                     l222:
  9581                           
  9582                           ;lcd_x8.c: 51: else
  9583                           ;lcd_x8.c: 52: delay_ms(2);
  9584  003F8A  0E00               	movlw	0
  9585  003F8C  6E18               	movwf	delay_ms@n+1,c
  9586  003F8E  0E02               	movlw	2
  9587  003F90  6E17               	movwf	delay_ms@n,c
  9588  003F92  EC60  F020         	call	_delay_ms	;wreg free
  9589  003F96  0012               	return	
  9590  003F98                     __end_of_lcd_send_byte:
  9591                           	opt stack 0
  9592                           tblptru	equ	0xFF8
  9593                           tblptrh	equ	0xFF7
  9594                           tblptrl	equ	0xFF6
  9595                           tablat	equ	0xFF5
  9596                           prodh	equ	0xFF4
  9597                           prodl	equ	0xFF3
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           postdec1	equ	0xFE5
  9601                           fsr1l	equ	0xFE1
  9602                           indf2	equ	0xFDF
  9603                           postinc2	equ	0xFDE
  9604                           fsr2h	equ	0xFDA
  9605                           fsr2l	equ	0xFD9
  9606                           status	equ	0xFD8
  9607                           
  9608 ;; *************** function _lcd_send_nibble *****************
  9609 ;; Defined at:
  9610 ;;		line 29 in file "lcd_x8.c"
  9611 ;; Parameters:    Size  Location     Type
  9612 ;;  n               1    wreg     unsigned char 
  9613 ;; Auto vars:     Size  Location     Type
  9614 ;;  n               1   29[COMRAM] unsigned char 
  9615 ;; Return value:  Size  Location     Type
  9616 ;;                  1    wreg      void 
  9617 ;; Registers used:
  9618 ;;		wreg, status,2, status,0, cstack
  9619 ;; Tracked objects:
  9620 ;;		On entry : 0/0
  9621 ;;		On exit  : 0/0
  9622 ;;		Unchanged: 0/0
  9623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9625 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9626 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9627 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9628 ;;Total ram usage:        2 bytes
  9629 ;; Hardware stack levels used:    1
  9630 ;; Hardware stack levels required when called:    4
  9631 ;; This function calls:
  9632 ;;		_delay_cycles
  9633 ;; This function is called by:
  9634 ;;		_lcd_send_byte
  9635 ;;		_lcd_init
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           	psect	text31
  9640  00417C                     __ptext31:
  9641                           	opt stack 0
  9642  00417C                     _lcd_send_nibble:
  9643                           	opt stack 23
  9644                           
  9645                           ;incstack = 0
  9646                           ;lcd_send_nibble@n stored from wreg
  9647  00417C  6E1E               	movwf	lcd_send_nibble@n,c
  9648                           
  9649                           ;lcd_x8.c: 31: lcd.data = n;
  9650  00417E  C01E  F01D         	movff	lcd_send_nibble@n,??_lcd_send_nibble
  9651  004182  3A1D               	swapf	??_lcd_send_nibble,f,c
  9652  004184  5083               	movf	3971,w,c
  9653  004186  181D               	xorwf	??_lcd_send_nibble,w,c
  9654  004188  0B0F               	andlw	-241
  9655  00418A  181D               	xorwf	??_lcd_send_nibble,w,c
  9656  00418C  6E83               	movwf	3971,c
  9657                           
  9658                           ;lcd_x8.c: 33: delay_cycles(1);
  9659  00418E  0E01               	movlw	1
  9660  004190  EC21  F020         	call	_delay_cycles
  9661                           
  9662                           ;lcd_x8.c: 34: PORTEbits.RE1 = 1;
  9663  004194  8284               	bsf	3972,1,c	;volatile
  9664                           
  9665                           ;lcd_x8.c: 35: _delaywdt((unsigned long)((2)*(4000000UL/4000000.0)));
  9666  004196  0004               	clrwdt	
  9667  004198  F000               	nop		;2 cycle nop
  9668                           
  9669                           ;lcd_x8.c: 36: PORTEbits.RE1 = 0;
  9670  00419A  9284               	bcf	3972,1,c	;volatile
  9671  00419C  0012               	return		;funcret
  9672  00419E                     __end_of_lcd_send_nibble:
  9673                           	opt stack 0
  9674                           tblptru	equ	0xFF8
  9675                           tblptrh	equ	0xFF7
  9676                           tblptrl	equ	0xFF6
  9677                           tablat	equ	0xFF5
  9678                           prodh	equ	0xFF4
  9679                           prodl	equ	0xFF3
  9680                           postinc0	equ	0xFEE
  9681                           wreg	equ	0xFE8
  9682                           postdec1	equ	0xFE5
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           fsr2h	equ	0xFDA
  9687                           fsr2l	equ	0xFD9
  9688                           status	equ	0xFD8
  9689                           
  9690 ;; *************** function _delay_cycles *****************
  9691 ;; Defined at:
  9692 ;;		line 20 in file "lcd_x8.c"
  9693 ;; Parameters:    Size  Location     Type
  9694 ;;  n               1    wreg     unsigned char 
  9695 ;; Auto vars:     Size  Location     Type
  9696 ;;  n               1   25[COMRAM] unsigned char 
  9697 ;;  x               2   26[COMRAM] int 
  9698 ;; Return value:  Size  Location     Type
  9699 ;;                  1    wreg      void 
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;Total ram usage:        6 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    3
  9714 ;; This function calls:
  9715 ;;		Nothing
  9716 ;; This function is called by:
  9717 ;;		_lcd_send_nibble
  9718 ;;		_lcd_send_byte
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text32
  9723  004042                     __ptext32:
  9724                           	opt stack 0
  9725  004042                     _delay_cycles:
  9726                           	opt stack 23
  9727                           
  9728                           ;incstack = 0
  9729                           ;delay_cycles@n stored from wreg
  9730  004042  6E1A               	movwf	delay_cycles@n,c
  9731                           
  9732                           ;lcd_x8.c: 21: int x;
  9733                           ;lcd_x8.c: 22: for (x = 0; x <= n; x++) {
  9734  004044  0E00               	movlw	0
  9735  004046  6E1C               	movwf	delay_cycles@x+1,c
  9736  004048  0E00               	movlw	0
  9737  00404A  6E1B               	movwf	delay_cycles@x,c
  9738  00404C  D003               	goto	l213
  9739  00404E                     l214:
  9740  00404E  0004               	clrwdt		;# 
  9741  004050  4A1B               	infsnz	delay_cycles@x,f,c
  9742  004052  2A1C               	incf	delay_cycles@x+1,f,c
  9743  004054                     l213:
  9744  004054  501A               	movf	delay_cycles@n,w,c
  9745  004056  6E17               	movwf	??_delay_cycles& (0+255),c
  9746  004058  6A18               	clrf	(??_delay_cycles+1)& (0+255),c
  9747  00405A  501B               	movf	delay_cycles@x,w,c
  9748  00405C  5C17               	subwf	??_delay_cycles,w,c
  9749  00405E  5018               	movf	??_delay_cycles+1,w,c
  9750  004060  0A80               	xorlw	128
  9751  004062  6E19               	movwf	(??_delay_cycles+2)& (0+255),c
  9752  004064  501C               	movf	delay_cycles@x+1,w,c
  9753  004066  0A80               	xorlw	128
  9754  004068  5819               	subwfb	(??_delay_cycles+2)& (0+255),w,c
  9755  00406A  A0D8               	btfss	status,0,c
  9756  00406C  0012               	return	
  9757  00406E  D7EF               	goto	l214
  9758  004070                     __end_of_delay_cycles:
  9759                           	opt stack 0
  9760                           tblptru	equ	0xFF8
  9761                           tblptrh	equ	0xFF7
  9762                           tblptrl	equ	0xFF6
  9763                           tablat	equ	0xFF5
  9764                           prodh	equ	0xFF4
  9765                           prodl	equ	0xFF3
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           postdec1	equ	0xFE5
  9769                           fsr1l	equ	0xFE1
  9770                           indf2	equ	0xFDF
  9771                           postinc2	equ	0xFDE
  9772                           fsr2h	equ	0xFDA
  9773                           fsr2l	equ	0xFD9
  9774                           status	equ	0xFD8
  9775                           
  9776 ;; *************** function _delay_ms *****************
  9777 ;; Defined at:
  9778 ;;		line 12 in file "lcd_x8.c"
  9779 ;; Parameters:    Size  Location     Type
  9780 ;;  n               2   22[COMRAM] unsigned int 
  9781 ;; Auto vars:     Size  Location     Type
  9782 ;;  x               2   24[COMRAM] int 
  9783 ;; Return value:  Size  Location     Type
  9784 ;;                  1    wreg      void 
  9785 ;; Registers used:
  9786 ;;		wreg, status,2, status,0
  9787 ;; Tracked objects:
  9788 ;;		On entry : 0/0
  9789 ;;		On exit  : 0/0
  9790 ;;		Unchanged: 0/0
  9791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9792 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9795 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9796 ;;Total ram usage:        4 bytes
  9797 ;; Hardware stack levels used:    1
  9798 ;; Hardware stack levels required when called:    3
  9799 ;; This function calls:
  9800 ;;		Nothing
  9801 ;; This function is called by:
  9802 ;;		_lcd_send_byte
  9803 ;;		_lcd_init
  9804 ;;		_lcd_putc
  9805 ;; This function uses a non-reentrant model
  9806 ;;
  9807                           
  9808                           	psect	text33
  9809  0040C0                     __ptext33:
  9810                           	opt stack 0
  9811  0040C0                     _delay_ms:
  9812                           	opt stack 24
  9813                           
  9814                           ;lcd_x8.c: 13: int x;
  9815                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
  9816                           
  9817                           ;incstack = 0
  9818  0040C0  0E00               	movlw	0
  9819  0040C2  6E1A               	movwf	delay_ms@x+1,c
  9820  0040C4  0E00               	movlw	0
  9821  0040C6  6E19               	movwf	delay_ms@x,c
  9822  0040C8  D007               	goto	l207
  9823  0040CA                     
  9824                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
  9825  0040CA  0EC8               	movlw	200
  9826  0040CC                     u6957:
  9827  0040CC  0004               	clrwdt	
  9828  0040CE  0004               	clrwdt	
  9829  0040D0  2EE8               	decfsz	wreg,f,c
  9830  0040D2  D7FC               	bra	u6957
  9831  0040D4  4A19               	infsnz	delay_ms@x,f,c
  9832  0040D6  2A1A               	incf	delay_ms@x+1,f,c
  9833  0040D8                     l207:
  9834  0040D8  5019               	movf	delay_ms@x,w,c
  9835  0040DA  5C17               	subwf	delay_ms@n,w,c
  9836  0040DC  501A               	movf	delay_ms@x+1,w,c
  9837  0040DE  5818               	subwfb	delay_ms@n+1,w,c
  9838  0040E0  A0D8               	btfss	status,0,c
  9839  0040E2  0012               	return	
  9840  0040E4  D7F2               	goto	l208
  9841  0040E6                     __end_of_delay_ms:
  9842                           	opt stack 0
  9843                           tblptru	equ	0xFF8
  9844                           tblptrh	equ	0xFF7
  9845                           tblptrl	equ	0xFF6
  9846                           tablat	equ	0xFF5
  9847                           prodh	equ	0xFF4
  9848                           prodl	equ	0xFF3
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           postdec1	equ	0xFE5
  9852                           fsr1l	equ	0xFE1
  9853                           indf2	equ	0xFDF
  9854                           postinc2	equ	0xFDE
  9855                           fsr2h	equ	0xFDA
  9856                           fsr2l	equ	0xFD9
  9857                           status	equ	0xFD8
  9858                           
  9859 ;; *************** function _init_adc_no_lib *****************
  9860 ;; Defined at:
  9861 ;;		line 11 in file "my_adc.c"
  9862 ;; Parameters:    Size  Location     Type
  9863 ;;		None
  9864 ;; Auto vars:     Size  Location     Type
  9865 ;;		None
  9866 ;; Return value:  Size  Location     Type
  9867 ;;                  1    wreg      void 
  9868 ;; Registers used:
  9869 ;;		wreg, status,2
  9870 ;; Tracked objects:
  9871 ;;		On entry : 0/0
  9872 ;;		On exit  : 0/0
  9873 ;;		Unchanged: 0/0
  9874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9877 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9878 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;Total ram usage:        0 bytes
  9880 ;; Hardware stack levels used:    1
  9881 ;; Hardware stack levels required when called:    3
  9882 ;; This function calls:
  9883 ;;		Nothing
  9884 ;; This function is called by:
  9885 ;;		_main
  9886 ;; This function uses a non-reentrant model
  9887 ;;
  9888                           
  9889                           	psect	text34
  9890  004226                     __ptext34:
  9891                           	opt stack 0
  9892  004226                     _init_adc_no_lib:
  9893                           	opt stack 27
  9894                           
  9895                           ;my_adc.c: 14: ADCON0 = 0;
  9896                           
  9897                           ;incstack = 0
  9898  004226  0E00               	movlw	0
  9899  004228  6EC2               	movwf	4034,c	;volatile
  9900                           
  9901                           ;my_adc.c: 15: ADCON0bits.ADON = 1;
  9902  00422A  80C2               	bsf	4034,0,c	;volatile
  9903                           
  9904                           ;my_adc.c: 18: ADCON2 = 0b10001001;
  9905  00422C  0E89               	movlw	137
  9906  00422E  6EC0               	movwf	4032,c	;volatile
  9907  004230  0012               	return		;funcret
  9908  004232                     __end_of_init_adc_no_lib:
  9909                           	opt stack 0
  9910                           tblptru	equ	0xFF8
  9911                           tblptrh	equ	0xFF7
  9912                           tblptrl	equ	0xFF6
  9913                           tablat	equ	0xFF5
  9914                           prodh	equ	0xFF4
  9915                           prodl	equ	0xFF3
  9916                           postinc0	equ	0xFEE
  9917                           wreg	equ	0xFE8
  9918                           postdec1	equ	0xFE5
  9919                           fsr1l	equ	0xFE1
  9920                           indf2	equ	0xFDF
  9921                           postinc2	equ	0xFDE
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926 ;; *************** function _initTimers01 *****************
  9927 ;; Defined at:
  9928 ;;		line 161 in file "pwm_asl.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;		None
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;		None
  9933 ;; Return value:  Size  Location     Type
  9934 ;;                  1    wreg      void 
  9935 ;; Registers used:
  9936 ;;		wreg, status,2, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;Total ram usage:        0 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    4
  9949 ;; This function calls:
  9950 ;;		_reloadTimer1
  9951 ;; This function is called by:
  9952 ;;		_main
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text35
  9957  0041FC                     __ptext35:
  9958                           	opt stack 0
  9959  0041FC                     _initTimers01:
  9960                           	opt stack 26
  9961                           
  9962                           ;pwm_asl.c: 166: T1CON = 0 ;
  9963                           
  9964                           ;incstack = 0
  9965  0041FC  0E00               	movlw	0
  9966  0041FE  6ECD               	movwf	4045,c	;volatile
  9967                           
  9968                           ;pwm_asl.c: 169: T1CON = 0x30 ;
  9969  004200  0E30               	movlw	48
  9970  004202  6ECD               	movwf	4045,c	;volatile
  9971                           
  9972                           ;pwm_asl.c: 172: reloadTimer1();
  9973  004204  EC19  F021         	call	_reloadTimer1	;wreg free
  9974                           
  9975                           ;pwm_asl.c: 176: PIE1bits.TMR1IE = 1;
  9976  004208  809D               	bsf	3997,0,c	;volatile
  9977                           
  9978                           ;pwm_asl.c: 178: PIR1 =0;
  9979  00420A  0E00               	movlw	0
  9980  00420C  6E9E               	movwf	3998,c	;volatile
  9981                           
  9982                           ;pwm_asl.c: 180: PIE2 =0;
  9983  00420E  0E00               	movlw	0
  9984  004210  6EA0               	movwf	4000,c	;volatile
  9985                           
  9986                           ;pwm_asl.c: 189: T1CONbits.TMR1ON = 1;
  9987  004212  80CD               	bsf	4045,0,c	;volatile
  9988  004214  0012               	return		;funcret
  9989  004216                     __end_of_initTimers01:
  9990                           	opt stack 0
  9991                           tblptru	equ	0xFF8
  9992                           tblptrh	equ	0xFF7
  9993                           tblptrl	equ	0xFF6
  9994                           tablat	equ	0xFF5
  9995                           prodh	equ	0xFF4
  9996                           prodl	equ	0xFF3
  9997                           postinc0	equ	0xFEE
  9998                           wreg	equ	0xFE8
  9999                           postdec1	equ	0xFE5
 10000                           fsr1l	equ	0xFE1
 10001                           indf2	equ	0xFDF
 10002                           postinc2	equ	0xFDE
 10003                           fsr2h	equ	0xFDA
 10004                           fsr2l	equ	0xFD9
 10005                           status	equ	0xFD8
 10006                           
 10007 ;; *************** function _reloadTimer1 *****************
 10008 ;; Defined at:
 10009 ;;		line 155 in file "pwm_asl.c"
 10010 ;; Parameters:    Size  Location     Type
 10011 ;;		None
 10012 ;; Auto vars:     Size  Location     Type
 10013 ;;		None
 10014 ;; Return value:  Size  Location     Type
 10015 ;;                  1    wreg      void 
 10016 ;; Registers used:
 10017 ;;		wreg, status,2
 10018 ;; Tracked objects:
 10019 ;;		On entry : 0/0
 10020 ;;		On exit  : 0/0
 10021 ;;		Unchanged: 0/0
 10022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10024 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10026 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10027 ;;Total ram usage:        0 bytes
 10028 ;; Hardware stack levels used:    1
 10029 ;; Hardware stack levels required when called:    3
 10030 ;; This function calls:
 10031 ;;		Nothing
 10032 ;; This function is called by:
 10033 ;;		_initTimers01
 10034 ;; This function uses a non-reentrant model
 10035 ;;
 10036                           
 10037                           	psect	text36
 10038  004232                     __ptext36:
 10039                           	opt stack 0
 10040  004232                     _reloadTimer1:
 10041                           	opt stack 26
 10042                           
 10043                           ;pwm_asl.c: 157: TMR1H = (unsigned char) ((start_t1 >> 8) & 0x00FF);
 10044                           
 10045                           ;incstack = 0
 10046  004232  0101               	movlb	1	; () banked
 10047  004234  515F               	movf	(_start_t1+1)& (0+255),w,b
 10048  004236  6ECF               	movwf	4047,c	;volatile
 10049                           
 10050                           ; BSR set to: 1
 10051                           ;pwm_asl.c: 158: TMR1L = (unsigned char)(start_t1 & 0x00FF );
 10052  004238  C15E  FFCE         	movff	_start_t1,4046	;volatile
 10053                           
 10054                           ; BSR set to: 1
 10055  00423C  0012               	return		;funcret
 10056  00423E                     __end_of_reloadTimer1:
 10057                           	opt stack 0
 10058                           tblptru	equ	0xFF8
 10059                           tblptrh	equ	0xFF7
 10060                           tblptrl	equ	0xFF6
 10061                           tablat	equ	0xFF5
 10062                           prodh	equ	0xFF4
 10063                           prodl	equ	0xFF3
 10064                           postinc0	equ	0xFEE
 10065                           wreg	equ	0xFE8
 10066                           postdec1	equ	0xFE5
 10067                           fsr1l	equ	0xFE1
 10068                           indf2	equ	0xFDF
 10069                           postinc2	equ	0xFDE
 10070                           fsr2h	equ	0xFDA
 10071                           fsr2l	equ	0xFD9
 10072                           status	equ	0xFD8
 10073                           
 10074 ;; *************** function _initTimers00 *****************
 10075 ;; Defined at:
 10076 ;;		line 125 in file "pwm_asl.c"
 10077 ;; Parameters:    Size  Location     Type
 10078 ;;		None
 10079 ;; Auto vars:     Size  Location     Type
 10080 ;;		None
 10081 ;; Return value:  Size  Location     Type
 10082 ;;                  1    wreg      void 
 10083 ;; Registers used:
 10084 ;;		wreg, status,2
 10085 ;; Tracked objects:
 10086 ;;		On entry : 0/0
 10087 ;;		On exit  : 0/0
 10088 ;;		Unchanged: 0/0
 10089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10094 ;;Total ram usage:        0 bytes
 10095 ;; Hardware stack levels used:    1
 10096 ;; Hardware stack levels required when called:    3
 10097 ;; This function calls:
 10098 ;;		Nothing
 10099 ;; This function is called by:
 10100 ;;		_main
 10101 ;; This function uses a non-reentrant model
 10102 ;;
 10103                           
 10104                           	psect	text37
 10105  00419E                     __ptext37:
 10106                           	opt stack 0
 10107  00419E                     _initTimers00:
 10108                           	opt stack 27
 10109                           
 10110                           ;pwm_asl.c: 126: T0CON = 0;
 10111                           
 10112                           ; BSR set to: 1
 10113                           ;incstack = 0
 10114  00419E  0E00               	movlw	0
 10115  0041A0  6ED5               	movwf	4053,c	;volatile
 10116                           
 10117                           ;pwm_asl.c: 127: T0CONbits.T0CS = 0;
 10118  0041A2  9AD5               	bcf	4053,5,c	;volatile
 10119                           
 10120                           ;pwm_asl.c: 128: T0CONbits.PSA = 0;
 10121  0041A4  96D5               	bcf	4053,3,c	;volatile
 10122                           
 10123                           ;pwm_asl.c: 129: T0CONbits.T08BIT = 1;
 10124  0041A6  8CD5               	bsf	4053,6,c	;volatile
 10125                           
 10126                           ;pwm_asl.c: 130: INTCONbits.T0IF = 0;
 10127  0041A8  94F2               	bcf	intcon,2,c	;volatile
 10128                           
 10129                           ;pwm_asl.c: 131: T0CONbits.T0PS0 = 1;
 10130  0041AA  80D5               	bsf	4053,0,c	;volatile
 10131                           
 10132                           ;pwm_asl.c: 132: T0CONbits.T0PS1 = 1;
 10133  0041AC  82D5               	bsf	4053,1,c	;volatile
 10134                           
 10135                           ;pwm_asl.c: 133: T0CONbits.T0PS2 = 1;
 10136  0041AE  84D5               	bsf	4053,2,c	;volatile
 10137                           
 10138                           ;pwm_asl.c: 134: TMR0H = (unsigned char) ((12500 >> 8) & 0x00FF);
 10139  0041B0  0E30               	movlw	48
 10140  0041B2  6ED7               	movwf	4055,c	;volatile
 10141                           
 10142                           ;pwm_asl.c: 135: TMR0L = (unsigned char) (12500 & 0x00FF);
 10143  0041B4  0ED4               	movlw	212
 10144  0041B6  6ED6               	movwf	4054,c	;volatile
 10145                           
 10146                           ;pwm_asl.c: 144: INTCONbits.GIE = 1;
 10147  0041B8  8EF2               	bsf	intcon,7,c	;volatile
 10148                           
 10149                           ;pwm_asl.c: 145: INTCONbits.T0IE = 1;
 10150  0041BA  8AF2               	bsf	intcon,5,c	;volatile
 10151                           
 10152                           ;pwm_asl.c: 147: T0CONbits.TMR0ON = 1;
 10153  0041BC  8ED5               	bsf	4053,7,c	;volatile
 10154  0041BE  0012               	return		;funcret
 10155  0041C0                     __end_of_initTimers00:
 10156                           	opt stack 0
 10157                           tblptru	equ	0xFF8
 10158                           tblptrh	equ	0xFF7
 10159                           tblptrl	equ	0xFF6
 10160                           tablat	equ	0xFF5
 10161                           prodh	equ	0xFF4
 10162                           prodl	equ	0xFF3
 10163                           intcon	equ	0xFF2
 10164                           postinc0	equ	0xFEE
 10165                           wreg	equ	0xFE8
 10166                           postdec1	equ	0xFE5
 10167                           fsr1l	equ	0xFE1
 10168                           indf2	equ	0xFDF
 10169                           postinc2	equ	0xFDE
 10170                           fsr2h	equ	0xFDA
 10171                           fsr2l	equ	0xFD9
 10172                           status	equ	0xFD8
 10173                           
 10174 ;; *************** function _display7s *****************
 10175 ;; Defined at:
 10176 ;;		line 26 in file "display7ss.c"
 10177 ;; Parameters:    Size  Location     Type
 10178 ;;  v               1    wreg     unsigned char 
 10179 ;;  x               2   22[COMRAM] int 
 10180 ;; Auto vars:     Size  Location     Type
 10181 ;;  v               1   24[COMRAM] unsigned char 
 10182 ;; Return value:  Size  Location     Type
 10183 ;;                  1    wreg      unsigned char 
 10184 ;; Registers used:
 10185 ;;		wreg, status,2, status,0
 10186 ;; Tracked objects:
 10187 ;;		On entry : 0/0
 10188 ;;		On exit  : 0/0
 10189 ;;		Unchanged: 0/0
 10190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10191 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10192 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10194 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;Total ram usage:        3 bytes
 10196 ;; Hardware stack levels used:    1
 10197 ;; Hardware stack levels required when called:    3
 10198 ;; This function calls:
 10199 ;;		Nothing
 10200 ;; This function is called by:
 10201 ;;		_main
 10202 ;; This function uses a non-reentrant model
 10203 ;;
 10204                           
 10205                           	psect	text38
 10206  00319A                     __ptext38:
 10207                           	opt stack 0
 10208  00319A                     _display7s:
 10209                           	opt stack 27
 10210                           
 10211                           ;incstack = 0
 10212                           ;display7s@v stored from wreg
 10213  00319A  6E19               	movwf	display7s@v,c
 10214                           
 10215                           ;display7ss.c: 28: if(x){
 10216  00319C  5017               	movf	display7s@x,w,c
 10217  00319E  1018               	iorwf	display7s@x+1,w,c
 10218  0031A0  A4D8               	btfss	status,2,c
 10219  0031A2  D023               	goto	l365
 10220  0031A4  D076               	goto	l386
 10221  0031A6                     
 10222                           ;display7ss.c: 33: return 0x3F | 0x80;
 10223  0031A6  0EBF               	movlw	191
 10224  0031A8  0012               	return	
 10225  0031AA                     
 10226                           ;display7ss.c: 35: return 0x06| 0x80;;
 10227  0031AA  0E86               	movlw	134
 10228  0031AC  0012               	return	
 10229  0031AE                     
 10230                           ;display7ss.c: 37: return 0x5B| 0x80;;
 10231  0031AE  0EDB               	movlw	219
 10232  0031B0  0012               	return	
 10233  0031B2                     
 10234                           ;display7ss.c: 39: return 0x4F| 0x80;;
 10235  0031B2  0ECF               	movlw	207
 10236  0031B4  0012               	return	
 10237  0031B6                     
 10238                           ;display7ss.c: 41: return 0x66| 0x80;;
 10239  0031B6  0EE6               	movlw	230
 10240  0031B8  0012               	return	
 10241  0031BA                     
 10242                           ;display7ss.c: 43: return 0x6D;
 10243  0031BA  0E6D               	movlw	109
 10244  0031BC  0012               	return	
 10245  0031BE                     
 10246                           ;display7ss.c: 45: return 0x7D;
 10247  0031BE  0E7D               	movlw	125
 10248  0031C0  0012               	return	
 10249  0031C2                     
 10250                           ;display7ss.c: 47: return 0x07;
 10251  0031C2  0E07               	movlw	7
 10252  0031C4  0012               	return	
 10253  0031C6                     
 10254                           ;display7ss.c: 49: return 0x7F;
 10255  0031C6  0E7F               	movlw	127
 10256  0031C8  0012               	return	
 10257  0031CA                     
 10258                           ;display7ss.c: 51: return 0x6F;
 10259  0031CA  0E6F               	movlw	111
 10260  0031CC  0012               	return	
 10261  0031CE                     
 10262                           ;display7ss.c: 53: return 0x77;
 10263  0031CE  0E77               	movlw	119
 10264  0031D0  0012               	return	
 10265  0031D2                     
 10266                           ;display7ss.c: 55: return 0x7c;
 10267  0031D2  0E7C               	movlw	124
 10268  0031D4  0012               	return	
 10269  0031D6                     
 10270                           ;display7ss.c: 57: return 0x58;
 10271  0031D6  0E58               	movlw	88
 10272  0031D8  0012               	return	
 10273  0031DA                     
 10274                           ;display7ss.c: 59: return 0x5E;
 10275  0031DA  0E5E               	movlw	94
 10276  0031DC  0012               	return	
 10277  0031DE                     
 10278                           ;display7ss.c: 61: return 0x79;
 10279  0031DE  0E79               	movlw	121
 10280  0031E0  0012               	return	
 10281  0031E2                     
 10282                           ;display7ss.c: 63: return 0x71;
 10283  0031E2  0E71               	movlw	113
 10284  0031E4  0012               	return	
 10285  0031E6                     
 10286                           ;display7ss.c: 65: return 0;
 10287  0031E6  0E00               	movlw	0
 10288                           
 10289                           ;display7ss.c: 66: }
 10290  0031E8  0012               	return	
 10291  0031EA                     l365:
 10292  0031EA  5019               	movf	display7s@v,w,c
 10293                           
 10294                           ; Switch size 1, requested type "space"
 10295                           ; Number of cases is 16, Range of values is 0 to 15
 10296                           ; switch strategies available:
 10297                           ; Name         Instructions Cycles
 10298                           ; simple_byte           49    25 (average)
 10299                           ;	Chosen strategy is simple_byte
 10300  0031EC  0A00               	xorlw	0	; case 0
 10301  0031EE  B4D8               	btfsc	status,2,c
 10302  0031F0  D7DA               	goto	l366
 10303  0031F2  0A01               	xorlw	1	; case 1
 10304  0031F4  B4D8               	btfsc	status,2,c
 10305  0031F6  D7D9               	goto	l368
 10306  0031F8  0A03               	xorlw	3	; case 2
 10307  0031FA  B4D8               	btfsc	status,2,c
 10308  0031FC  D7D8               	goto	l369
 10309  0031FE  0A01               	xorlw	1	; case 3
 10310  003200  B4D8               	btfsc	status,2,c
 10311  003202  D7D7               	goto	l370
 10312  003204  0A07               	xorlw	7	; case 4
 10313  003206  B4D8               	btfsc	status,2,c
 10314  003208  D7D6               	goto	l371
 10315  00320A  0A01               	xorlw	1	; case 5
 10316  00320C  B4D8               	btfsc	status,2,c
 10317  00320E  D7D5               	goto	l372
 10318  003210  0A03               	xorlw	3	; case 6
 10319  003212  B4D8               	btfsc	status,2,c
 10320  003214  D7D4               	goto	l373
 10321  003216  0A01               	xorlw	1	; case 7
 10322  003218  B4D8               	btfsc	status,2,c
 10323  00321A  D7D3               	goto	l374
 10324  00321C  0A0F               	xorlw	15	; case 8
 10325  00321E  B4D8               	btfsc	status,2,c
 10326  003220  D7D2               	goto	l375
 10327  003222  0A01               	xorlw	1	; case 9
 10328  003224  B4D8               	btfsc	status,2,c
 10329  003226  D7D1               	goto	l376
 10330  003228  0A03               	xorlw	3	; case 10
 10331  00322A  B4D8               	btfsc	status,2,c
 10332  00322C  D7D0               	goto	l377
 10333  00322E  0A01               	xorlw	1	; case 11
 10334  003230  B4D8               	btfsc	status,2,c
 10335  003232  D7CF               	goto	l378
 10336  003234  0A07               	xorlw	7	; case 12
 10337  003236  B4D8               	btfsc	status,2,c
 10338  003238  D7CE               	goto	l379
 10339  00323A  0A01               	xorlw	1	; case 13
 10340  00323C  B4D8               	btfsc	status,2,c
 10341  00323E  D7CD               	goto	l380
 10342  003240  0A03               	xorlw	3	; case 14
 10343  003242  B4D8               	btfsc	status,2,c
 10344  003244  D7CC               	goto	l381
 10345  003246  0A01               	xorlw	1	; case 15
 10346  003248  B4D8               	btfsc	status,2,c
 10347  00324A  D7CB               	goto	l382
 10348  00324C  D7CC               	goto	l383
 10349  00324E                     
 10350                           ;display7ss.c: 75: return 0x3F;
 10351  00324E  0E3F               	movlw	63
 10352  003250  0012               	return	
 10353  003252                     
 10354                           ;display7ss.c: 77: return 0x06;
 10355  003252  0E06               	movlw	6
 10356  003254  0012               	return	
 10357  003256                     
 10358                           ;display7ss.c: 79: return 0x5B;
 10359  003256  0E5B               	movlw	91
 10360  003258  0012               	return	
 10361  00325A                     
 10362                           ;display7ss.c: 81: return 0x4F;
 10363  00325A  0E4F               	movlw	79
 10364  00325C  0012               	return	
 10365  00325E                     
 10366                           ;display7ss.c: 83: return 0x66;
 10367  00325E  0E66               	movlw	102
 10368  003260  0012               	return	
 10369  003262                     
 10370                           ;display7ss.c: 85: return 0x6D;
 10371  003262  0E6D               	movlw	109
 10372  003264  0012               	return	
 10373  003266                     
 10374                           ;display7ss.c: 87: return 0x7D;
 10375  003266  0E7D               	movlw	125
 10376  003268  0012               	return	
 10377  00326A                     
 10378                           ;display7ss.c: 89: return 0x07;
 10379  00326A  0E07               	movlw	7
 10380  00326C  0012               	return	
 10381  00326E                     
 10382                           ;display7ss.c: 91: return 0x7F;
 10383  00326E  0E7F               	movlw	127
 10384  003270  0012               	return	
 10385  003272                     
 10386                           ;display7ss.c: 93: return 0x6F;
 10387  003272  0E6F               	movlw	111
 10388  003274  0012               	return	
 10389  003276                     
 10390                           ;display7ss.c: 95: return 0x77;
 10391  003276  0E77               	movlw	119
 10392  003278  0012               	return	
 10393  00327A                     
 10394                           ;display7ss.c: 97: return 0x7c;
 10395  00327A  0E7C               	movlw	124
 10396  00327C  0012               	return	
 10397  00327E                     
 10398                           ;display7ss.c: 99: return 0x58;
 10399  00327E  0E58               	movlw	88
 10400  003280  0012               	return	
 10401  003282                     
 10402                           ;display7ss.c: 101: return 0x5E;
 10403  003282  0E5E               	movlw	94
 10404  003284  0012               	return	
 10405  003286                     
 10406                           ;display7ss.c: 103: return 0x79;
 10407  003286  0E79               	movlw	121
 10408  003288  0012               	return	
 10409  00328A                     
 10410                           ;display7ss.c: 105: return 0x71;
 10411  00328A  0E71               	movlw	113
 10412  00328C  0012               	return	
 10413  00328E                     
 10414                           ;display7ss.c: 107: return 0;
 10415  00328E  0E00               	movlw	0
 10416                           
 10417                           ;display7ss.c: 108: }
 10418  003290  0012               	return	
 10419  003292                     l386:
 10420  003292  5019               	movf	display7s@v,w,c
 10421                           
 10422                           ; Switch size 1, requested type "space"
 10423                           ; Number of cases is 16, Range of values is 0 to 15
 10424                           ; switch strategies available:
 10425                           ; Name         Instructions Cycles
 10426                           ; simple_byte           49    25 (average)
 10427                           ;	Chosen strategy is simple_byte
 10428  003294  0A00               	xorlw	0	; case 0
 10429  003296  B4D8               	btfsc	status,2,c
 10430  003298  D7DA               	goto	l387
 10431  00329A  0A01               	xorlw	1	; case 1
 10432  00329C  B4D8               	btfsc	status,2,c
 10433  00329E  D7D9               	goto	l388
 10434  0032A0  0A03               	xorlw	3	; case 2
 10435  0032A2  B4D8               	btfsc	status,2,c
 10436  0032A4  D7D8               	goto	l389
 10437  0032A6  0A01               	xorlw	1	; case 3
 10438  0032A8  B4D8               	btfsc	status,2,c
 10439  0032AA  D7D7               	goto	l390
 10440  0032AC  0A07               	xorlw	7	; case 4
 10441  0032AE  B4D8               	btfsc	status,2,c
 10442  0032B0  D7D6               	goto	l391
 10443  0032B2  0A01               	xorlw	1	; case 5
 10444  0032B4  B4D8               	btfsc	status,2,c
 10445  0032B6  D7D5               	goto	l392
 10446  0032B8  0A03               	xorlw	3	; case 6
 10447  0032BA  B4D8               	btfsc	status,2,c
 10448  0032BC  D7D4               	goto	l393
 10449  0032BE  0A01               	xorlw	1	; case 7
 10450  0032C0  B4D8               	btfsc	status,2,c
 10451  0032C2  D7D3               	goto	l394
 10452  0032C4  0A0F               	xorlw	15	; case 8
 10453  0032C6  B4D8               	btfsc	status,2,c
 10454  0032C8  D7D2               	goto	l395
 10455  0032CA  0A01               	xorlw	1	; case 9
 10456  0032CC  B4D8               	btfsc	status,2,c
 10457  0032CE  D7D1               	goto	l396
 10458  0032D0  0A03               	xorlw	3	; case 10
 10459  0032D2  B4D8               	btfsc	status,2,c
 10460  0032D4  D7D0               	goto	l397
 10461  0032D6  0A01               	xorlw	1	; case 11
 10462  0032D8  B4D8               	btfsc	status,2,c
 10463  0032DA  D7CF               	goto	l398
 10464  0032DC  0A07               	xorlw	7	; case 12
 10465  0032DE  B4D8               	btfsc	status,2,c
 10466  0032E0  D7CE               	goto	l399
 10467  0032E2  0A01               	xorlw	1	; case 13
 10468  0032E4  B4D8               	btfsc	status,2,c
 10469  0032E6  D7CD               	goto	l400
 10470  0032E8  0A03               	xorlw	3	; case 14
 10471  0032EA  B4D8               	btfsc	status,2,c
 10472  0032EC  D7CC               	goto	l401
 10473  0032EE  0A01               	xorlw	1	; case 15
 10474  0032F0  B4D8               	btfsc	status,2,c
 10475  0032F2  D7CB               	goto	l402
 10476  0032F4  D7CC               	goto	l403
 10477  0032F6                     __end_of_display7s:
 10478                           	opt stack 0
 10479                           tblptru	equ	0xFF8
 10480                           tblptrh	equ	0xFF7
 10481                           tblptrl	equ	0xFF6
 10482                           tablat	equ	0xFF5
 10483                           prodh	equ	0xFF4
 10484                           prodl	equ	0xFF3
 10485                           intcon	equ	0xFF2
 10486                           postinc0	equ	0xFEE
 10487                           wreg	equ	0xFE8
 10488                           postdec1	equ	0xFE5
 10489                           fsr1l	equ	0xFE1
 10490                           indf2	equ	0xFDF
 10491                           postinc2	equ	0xFDE
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function _atraso_ms *****************
 10497 ;; Defined at:
 10498 ;;		line 97 in file "pwm_asl.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;  n               2   22[COMRAM] unsigned int 
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;  x               2   24[COMRAM] int 
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, status,2, status,0
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10512 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;Total ram usage:        4 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    3
 10519 ;; This function calls:
 10520 ;;		Nothing
 10521 ;; This function is called by:
 10522 ;;		_main
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text39
 10527  0040E6                     __ptext39:
 10528                           	opt stack 0
 10529  0040E6                     _atraso_ms:
 10530                           	opt stack 27
 10531                           
 10532                           ;pwm_asl.c: 99: for (x = 0; x <= n; x++) {
 10533                           
 10534                           ;incstack = 0
 10535  0040E6  0E00               	movlw	0
 10536  0040E8  6E1A               	movwf	atraso_ms@x+1,c
 10537  0040EA  0E00               	movlw	0
 10538  0040EC  6E19               	movwf	atraso_ms@x,c
 10539  0040EE  D007               	goto	l107
 10540  0040F0                     
 10541                           ;pwm_asl.c: 100: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10542  0040F0  0EC8               	movlw	200
 10543  0040F2                     u6967:
 10544  0040F2  0004               	clrwdt	
 10545  0040F4  0004               	clrwdt	
 10546  0040F6  2EE8               	decfsz	wreg,f,c
 10547  0040F8  D7FC               	bra	u6967
 10548  0040FA  4A19               	infsnz	atraso_ms@x,f,c
 10549  0040FC  2A1A               	incf	atraso_ms@x+1,f,c
 10550  0040FE                     l107:
 10551  0040FE  5019               	movf	atraso_ms@x,w,c
 10552  004100  5C17               	subwf	atraso_ms@n,w,c
 10553  004102  501A               	movf	atraso_ms@x+1,w,c
 10554  004104  5818               	subwfb	atraso_ms@n+1,w,c
 10555  004106  A0D8               	btfss	status,0,c
 10556  004108  0012               	return	
 10557  00410A  D7F2               	goto	l108
 10558  00410C                     __end_of_atraso_ms:
 10559                           	opt stack 0
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           prodh	equ	0xFF4
 10565                           prodl	equ	0xFF3
 10566                           intcon	equ	0xFF2
 10567                           postinc0	equ	0xFEE
 10568                           wreg	equ	0xFE8
 10569                           postdec1	equ	0xFE5
 10570                           fsr1l	equ	0xFE1
 10571                           indf2	equ	0xFDF
 10572                           postinc2	equ	0xFDE
 10573                           fsr2h	equ	0xFDA
 10574                           fsr2l	equ	0xFD9
 10575                           status	equ	0xFD8
 10576                           
 10577 ;; *************** function _highIsr *****************
 10578 ;; Defined at:
 10579 ;;		line 308 in file "pwm_asl.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;		None
 10584 ;; Return value:  Size  Location     Type
 10585 ;;                  1    wreg      void 
 10586 ;; Registers used:
 10587 ;;		wreg, status,2, status,0, cstack
 10588 ;; Tracked objects:
 10589 ;;		On entry : 0/0
 10590 ;;		On exit  : 0/0
 10591 ;;		Unchanged: 0/0
 10592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10595 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10596 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10597 ;;Total ram usage:       18 bytes
 10598 ;; Hardware stack levels used:    1
 10599 ;; Hardware stack levels required when called:    2
 10600 ;; This function calls:
 10601 ;;		_RX_isr
 10602 ;;		_Timer0_isr
 10603 ;;		_Timer1_isr
 10604 ;;		i2_delay_ms
 10605 ;; This function is called by:
 10606 ;;		Interrupt level 2
 10607 ;; This function uses a non-reentrant model
 10608 ;;
 10609                           
 10610                           	psect	intcode
 10611  000008                     __pintcode:
 10612                           	opt stack 0
 10613  000008                     _highIsr:
 10614                           	opt stack 22
 10615                           
 10616                           ;incstack = 0
 10617  000008  8269               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10618  00000A  EDD9  F01C         	call	int_func,f	;refresh shadow registers
 10619                           tblptru	equ	0xFF8
 10620                           tblptrh	equ	0xFF7
 10621                           tblptrl	equ	0xFF6
 10622                           tablat	equ	0xFF5
 10623                           prodh	equ	0xFF4
 10624                           prodl	equ	0xFF3
 10625                           intcon	equ	0xFF2
 10626                           postinc0	equ	0xFEE
 10627                           wreg	equ	0xFE8
 10628                           postdec1	equ	0xFE5
 10629                           fsr1l	equ	0xFE1
 10630                           indf2	equ	0xFDF
 10631                           postinc2	equ	0xFDE
 10632                           fsr2h	equ	0xFDA
 10633                           fsr2l	equ	0xFD9
 10634                           status	equ	0xFD8
 10635                           
 10636                           	psect	intcode_body
 10637  0039B2                     __pintcode_body:
 10638                           	opt stack 22
 10639  0039B2                     int_func:
 10640                           	opt stack 22
 10641  0039B2  0006               	pop		; remove dummy address from shadow register refresh
 10642  0039B4  CFFA F005          	movff	pclath,??_highIsr
 10643  0039B8  CFFB F006          	movff	pclatu,??_highIsr+1
 10644  0039BC  CFE9 F007          	movff	fsr0l,??_highIsr+2
 10645  0039C0  CFEA F008          	movff	fsr0h,??_highIsr+3
 10646  0039C4  CFE1 F009          	movff	fsr1l,??_highIsr+4
 10647  0039C8  CFE2 F00A          	movff	fsr1h,??_highIsr+5
 10648  0039CC  CFD9 F00B          	movff	fsr2l,??_highIsr+6
 10649  0039D0  CFDA F00C          	movff	fsr2h,??_highIsr+7
 10650  0039D4  CFF3 F00D          	movff	prodl,??_highIsr+8
 10651  0039D8  CFF4 F00E          	movff	prodh,??_highIsr+9
 10652  0039DC  CFF6 F00F          	movff	tblptrl,??_highIsr+10
 10653  0039E0  CFF7 F010          	movff	tblptrh,??_highIsr+11
 10654  0039E4  CFF8 F011          	movff	tblptru,??_highIsr+12
 10655  0039E8  CFF5 F012          	movff	tablat,??_highIsr+13
 10656  0039EC  C069  F013         	movff	btemp,??_highIsr+14
 10657  0039F0  C06A  F014         	movff	btemp+1,??_highIsr+15
 10658  0039F4  C06B  F015         	movff	btemp+2,??_highIsr+16
 10659  0039F8  C06C  F016         	movff	btemp+3,??_highIsr+17
 10660                           
 10661                           ;pwm_asl.c: 311: if(PIR1bits.TMR1IF) Timer1_isr();
 10662  0039FC  B09E               	btfsc	3998,0,c	;volatile
 10663  0039FE  ECE0  F01B         	call	_Timer1_isr	;wreg free
 10664                           
 10665                           ;pwm_asl.c: 312: if(INTCONbits.T0IF) Timer0_isr();
 10666  003A02  B4F2               	btfsc	intcon,2,c	;volatile
 10667  003A04  EC99  F020         	call	_Timer0_isr	;wreg free
 10668                           
 10669                           ;pwm_asl.c: 313: if(PIR1bits.RCIF) RX_isr();
 10670  003A08  BA9E               	btfsc	3998,5,c	;volatile
 10671  003A0A  EC43  F01D         	call	_RX_isr	;wreg free
 10672                           
 10673                           ;pwm_asl.c: 314: INTCONbits.T0IF = 0;
 10674  003A0E  94F2               	bcf	intcon,2,c	;volatile
 10675                           
 10676                           ;pwm_asl.c: 316: if (INTCONbits.INT0IF) {
 10677  003A10  A2F2               	btfss	intcon,1,c	;volatile
 10678  003A12  D013               	goto	i2l168
 10679                           
 10680                           ;pwm_asl.c: 317: delay_ms(550);
 10681  003A14  0E02               	movlw	2
 10682  003A16  6E02               	movwf	i2delay_ms@n+1,c
 10683  003A18  0E26               	movlw	38
 10684  003A1A  6E01               	movwf	i2delay_ms@n,c
 10685  003A1C  EC86  F020         	call	i2_delay_ms	;wreg free
 10686                           
 10687                           ;pwm_asl.c: 318: INTCONbits.INT0IF = 0;
 10688  003A20  92F2               	bcf	intcon,1,c	;volatile
 10689                           
 10690                           ;pwm_asl.c: 319: if (view_mode==0)
 10691  003A22  5062               	movf	_view_mode,w,c
 10692  003A24  1063               	iorwf	_view_mode+1,w,c
 10693  003A26  A4D8               	btfss	status,2,c
 10694  003A28  D004               	goto	i2l167
 10695                           
 10696                           ;pwm_asl.c: 320: {
 10697                           ;pwm_asl.c: 321: view_mode=1;
 10698  003A2A  0E00               	movlw	0
 10699  003A2C  6E63               	movwf	_view_mode+1,c
 10700  003A2E  0E01               	movlw	1
 10701  003A30  D003               	goto	L14
 10702  003A32                     i2l167:
 10703                           
 10704                           ;pwm_asl.c: 323: else{view_mode = 0;}
 10705  003A32  0E00               	movlw	0
 10706  003A34  6E63               	movwf	_view_mode+1,c
 10707  003A36  0E00               	movlw	0
 10708  003A38                     L14:
 10709  003A38  6E62               	movwf	_view_mode,c
 10710  003A3A                     i2l168:
 10711  003A3A  C016  F06C         	movff	??_highIsr+17,btemp+3
 10712  003A3E  C015  F06B         	movff	??_highIsr+16,btemp+2
 10713  003A42  C014  F06A         	movff	??_highIsr+15,btemp+1
 10714  003A46  C013  F069         	movff	??_highIsr+14,btemp
 10715  003A4A  C012  FFF5         	movff	??_highIsr+13,tablat
 10716  003A4E  C011  FFF8         	movff	??_highIsr+12,tblptru
 10717  003A52  C010  FFF7         	movff	??_highIsr+11,tblptrh
 10718  003A56  C00F  FFF6         	movff	??_highIsr+10,tblptrl
 10719  003A5A  C00E  FFF4         	movff	??_highIsr+9,prodh
 10720  003A5E  C00D  FFF3         	movff	??_highIsr+8,prodl
 10721  003A62  C00C  FFDA         	movff	??_highIsr+7,fsr2h
 10722  003A66  C00B  FFD9         	movff	??_highIsr+6,fsr2l
 10723  003A6A  C00A  FFE2         	movff	??_highIsr+5,fsr1h
 10724  003A6E  C009  FFE1         	movff	??_highIsr+4,fsr1l
 10725  003A72  C008  FFEA         	movff	??_highIsr+3,fsr0h
 10726  003A76  C007  FFE9         	movff	??_highIsr+2,fsr0l
 10727  003A7A  C006  FFFB         	movff	??_highIsr+1,pclatu
 10728  003A7E  C005  FFFA         	movff	??_highIsr,pclath
 10729  003A82  9269               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10730  003A84  0011               	retfie		f
 10731  003A86                     __end_of_highIsr:
 10732                           	opt stack 0
 10733                           pclatu	equ	0xFFB
 10734                           pclath	equ	0xFFA
 10735                           tblptru	equ	0xFF8
 10736                           tblptrh	equ	0xFF7
 10737                           tblptrl	equ	0xFF6
 10738                           tablat	equ	0xFF5
 10739                           prodh	equ	0xFF4
 10740                           prodl	equ	0xFF3
 10741                           intcon	equ	0xFF2
 10742                           postinc0	equ	0xFEE
 10743                           fsr0h	equ	0xFEA
 10744                           fsr0l	equ	0xFE9
 10745                           wreg	equ	0xFE8
 10746                           postdec1	equ	0xFE5
 10747                           fsr1h	equ	0xFE2
 10748                           fsr1l	equ	0xFE1
 10749                           indf2	equ	0xFDF
 10750                           postinc2	equ	0xFDE
 10751                           fsr2h	equ	0xFDA
 10752                           fsr2l	equ	0xFD9
 10753                           status	equ	0xFD8
 10754                           
 10755 ;; *************** function i2_delay_ms *****************
 10756 ;; Defined at:
 10757 ;;		line 12 in file "lcd_x8.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;  n               2    0[COMRAM] unsigned int 
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;  delay_ms        2    2[COMRAM] int 
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  1    wreg      void 
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, status,0
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10772 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10774 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10775 ;;Total ram usage:        4 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; This function calls:
 10778 ;;		Nothing
 10779 ;; This function is called by:
 10780 ;;		_highIsr
 10781 ;; This function uses a non-reentrant model
 10782 ;;
 10783                           
 10784                           	psect	text41
 10785  00410C                     __ptext41:
 10786                           	opt stack 0
 10787  00410C                     i2_delay_ms:
 10788                           	opt stack 23
 10789                           
 10790                           ;lcd_x8.c: 13: int x;
 10791                           ;lcd_x8.c: 14: for (x = 0; x <= n; x++) {
 10792                           
 10793                           ;incstack = 0
 10794  00410C  0E00               	movlw	0
 10795  00410E  6E04               	movwf	i2delay_ms@x+1,c
 10796  004110  0E00               	movlw	0
 10797  004112  6E03               	movwf	i2delay_ms@x,c
 10798  004114  D007               	goto	i2l207
 10799  004116                     
 10800                           ;lcd_x8.c: 15: _delaywdt((unsigned long)((1)*(4000000UL/4000.0)));
 10801  004116  0EC8               	movlw	200
 10802  004118                     i2u697_47:
 10803  004118  0004               	clrwdt	
 10804  00411A  0004               	clrwdt	
 10805  00411C  2EE8               	decfsz	wreg,f,c
 10806  00411E  D7FC               	bra	i2u697_47
 10807  004120  4A03               	infsnz	i2delay_ms@x,f,c
 10808  004122  2A04               	incf	i2delay_ms@x+1,f,c
 10809  004124                     i2l207:
 10810  004124  5003               	movf	i2delay_ms@x,w,c
 10811  004126  5C01               	subwf	i2delay_ms@n,w,c
 10812  004128  5004               	movf	i2delay_ms@x+1,w,c
 10813  00412A  5802               	subwfb	i2delay_ms@n+1,w,c
 10814  00412C  A0D8               	btfss	status,0,c
 10815  00412E  0012               	return	
 10816  004130  D7F2               	goto	i2l208
 10817  004132                     __end_ofi2_delay_ms:
 10818                           	opt stack 0
 10819                           pclatu	equ	0xFFB
 10820                           pclath	equ	0xFFA
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           postinc0	equ	0xFEE
 10829                           fsr0h	equ	0xFEA
 10830                           fsr0l	equ	0xFE9
 10831                           wreg	equ	0xFE8
 10832                           postdec1	equ	0xFE5
 10833                           fsr1h	equ	0xFE2
 10834                           fsr1l	equ	0xFE1
 10835                           indf2	equ	0xFDF
 10836                           postinc2	equ	0xFDE
 10837                           fsr2h	equ	0xFDA
 10838                           fsr2l	equ	0xFD9
 10839                           status	equ	0xFD8
 10840                           
 10841 ;; *************** function _Timer1_isr *****************
 10842 ;; Defined at:
 10843 ;;		line 208 in file "pwm_asl.c"
 10844 ;; Parameters:    Size  Location     Type
 10845 ;;		None
 10846 ;; Auto vars:     Size  Location     Type
 10847 ;;		None
 10848 ;; Return value:  Size  Location     Type
 10849 ;;                  1    wreg      void 
 10850 ;; Registers used:
 10851 ;;		wreg, status,2, status,0, cstack
 10852 ;; Tracked objects:
 10853 ;;		On entry : 0/0
 10854 ;;		On exit  : 0/0
 10855 ;;		Unchanged: 0/0
 10856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10859 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;Total ram usage:        1 bytes
 10862 ;; Hardware stack levels used:    1
 10863 ;; Hardware stack levels required when called:    1
 10864 ;; This function calls:
 10865 ;;		i2_reloadTimer1
 10866 ;; This function is called by:
 10867 ;;		_highIsr
 10868 ;; This function uses a non-reentrant model
 10869 ;;
 10870                           
 10871                           	psect	text42
 10872  0037C0                     __ptext42:
 10873                           	opt stack 0
 10874  0037C0                     _Timer1_isr:
 10875                           	opt stack 22
 10876                           
 10877                           ;pwm_asl.c: 210: PIR1bits.TMR1IF = 0;
 10878                           
 10879                           ;incstack = 0
 10880  0037C0  909E               	bcf	3998,0,c	;volatile
 10881                           
 10882                           ;pwm_asl.c: 211: if(timer_10_flag == 0 && timer_3_flag == 0 && timer_6_flag==0){
 10883  0037C2  0101               	movlb	1	; () banked
 10884  0037C4  5158               	movf	_timer_10_flag& (0+255),w,b
 10885  0037C6  1159               	iorwf	(_timer_10_flag+1)& (0+255),w,b
 10886  0037C8  A4D8               	btfss	status,2,c
 10887  0037CA  D015               	goto	i2l138
 10888                           
 10889                           ; BSR set to: 1
 10890  0037CC  515C               	movf	_timer_3_flag& (0+255),w,b
 10891  0037CE  115D               	iorwf	(_timer_3_flag+1)& (0+255),w,b
 10892  0037D0  A4D8               	btfss	status,2,c
 10893  0037D2  D011               	goto	i2l138
 10894                           
 10895                           ; BSR set to: 1
 10896  0037D4  515A               	movf	_timer_6_flag& (0+255),w,b
 10897  0037D6  115B               	iorwf	(_timer_6_flag+1)& (0+255),w,b
 10898  0037D8  A4D8               	btfss	status,2,c
 10899  0037DA  D00D               	goto	i2l138
 10900                           
 10901                           ; BSR set to: 1
 10902                           ;pwm_asl.c: 212: PORTBbits.RB2 = !PORTBbits.RB2;}
 10903  0037DC  B481               	btfsc	3969,2,c	;volatile
 10904  0037DE  D003               	goto	i2u433_40
 10905  0037E0  6A01               	clrf	??_Timer1_isr& (0+255),c
 10906  0037E2  2A01               	incf	??_Timer1_isr& (0+255),f,c
 10907  0037E4  D001               	goto	i2u434_48
 10908  0037E6                     i2u433_40:
 10909  0037E6  6A01               	clrf	??_Timer1_isr& (0+255),c
 10910  0037E8                     i2u434_48:
 10911  0037E8  4601               	rlncf	??_Timer1_isr,f,c
 10912  0037EA  4601               	rlncf	??_Timer1_isr,f,c
 10913  0037EC  5081               	movf	3969,w,c	;volatile
 10914  0037EE  1801               	xorwf	??_Timer1_isr,w,c
 10915  0037F0  0BFB               	andlw	-5
 10916  0037F2  1801               	xorwf	??_Timer1_isr,w,c
 10917  0037F4  6E81               	movwf	3969,c	;volatile
 10918  0037F6                     i2l138:
 10919                           
 10920                           ;pwm_asl.c: 214: count_t1++;
 10921  0037F6  4A66               	infsnz	_count_t1,f,c
 10922  0037F8  2A67               	incf	_count_t1+1,f,c
 10923                           
 10924                           ;pwm_asl.c: 215: timer_3_counter++ ;
 10925  0037FA  4A60               	infsnz	_timer_3_counter,f,c
 10926  0037FC  2A61               	incf	_timer_3_counter+1,f,c
 10927                           
 10928                           ;pwm_asl.c: 216: timer_6_counter++ ;
 10929  0037FE  4A5E               	infsnz	_timer_6_counter,f,c
 10930  003800  2A5F               	incf	_timer_6_counter+1,f,c
 10931                           
 10932                           ;pwm_asl.c: 217: timer_10_counter++ ;
 10933  003802  4A5C               	infsnz	_timer_10_counter,f,c
 10934  003804  2A5D               	incf	_timer_10_counter+1,f,c
 10935                           
 10936                           ;pwm_asl.c: 220: if(timer_3_flag==1){
 10937  003806  0101               	movlb	1	; () banked
 10938  003808  055C               	decf	_timer_3_flag& (0+255),w,b
 10939  00380A  115D               	iorwf	(_timer_3_flag+1)& (0+255),w,b
 10940  00380C  B4D8               	btfsc	status,2,c
 10941                           
 10942                           ; BSR set to: 1
 10943                           ;pwm_asl.c: 221: if(timer_3_counter >= 6) {
 10944  00380E  BE61               	btfsc	_timer_3_counter+1,7,c
 10945  003810  D01C               	goto	i2l140
 10946  003812  5061               	movf	_timer_3_counter+1,w,c
 10947  003814  E104               	bnz	i2u436_40
 10948  003816  0E06               	movlw	6
 10949  003818  5C60               	subwf	_timer_3_counter,w,c
 10950  00381A  A0D8               	btfss	status,0,c
 10951  00381C  D016               	goto	i2l140
 10952  00381E                     i2u436_40:
 10953                           
 10954                           ; BSR set to: 1
 10955                           ;pwm_asl.c: 223: PORTBbits.RB2 = !PORTBbits.RB2;
 10956  00381E  B481               	btfsc	3969,2,c	;volatile
 10957  003820  D003               	goto	i2u437_40
 10958  003822  6A01               	clrf	??_Timer1_isr& (0+255),c
 10959  003824  2A01               	incf	??_Timer1_isr& (0+255),f,c
 10960  003826  D001               	goto	i2u438_48
 10961  003828                     i2u437_40:
 10962  003828  6A01               	clrf	??_Timer1_isr& (0+255),c
 10963  00382A                     i2u438_48:
 10964  00382A  4601               	rlncf	??_Timer1_isr,f,c
 10965  00382C  4601               	rlncf	??_Timer1_isr,f,c
 10966  00382E  5081               	movf	3969,w,c	;volatile
 10967  003830  1801               	xorwf	??_Timer1_isr,w,c
 10968  003832  0BFB               	andlw	-5
 10969  003834  1801               	xorwf	??_Timer1_isr,w,c
 10970  003836  6E81               	movwf	3969,c	;volatile
 10971                           
 10972                           ;pwm_asl.c: 224: timer_3_counter=0;
 10973  003838  0E00               	movlw	0
 10974  00383A  6E61               	movwf	_timer_3_counter+1,c
 10975  00383C  0E00               	movlw	0
 10976  00383E  6E60               	movwf	_timer_3_counter,c
 10977                           
 10978                           ;pwm_asl.c: 225: timer_3_flag = 0 ;
 10979  003840  0E00               	movlw	0
 10980  003842  0101               	movlb	1	; () banked
 10981  003844  6F5D               	movwf	(_timer_3_flag+1)& (0+255),b
 10982  003846  0E00               	movlw	0
 10983  003848  6F5C               	movwf	_timer_3_flag& (0+255),b
 10984  00384A                     i2l140:
 10985                           
 10986                           ; BSR set to: 1
 10987                           ;pwm_asl.c: 226: }}
 10988                           ;pwm_asl.c: 228: if(timer_6_flag==1){
 10989                           
 10990                           ; BSR set to: 1
 10991  00384A  055A               	decf	_timer_6_flag& (0+255),w,b
 10992  00384C  115B               	iorwf	(_timer_6_flag+1)& (0+255),w,b
 10993  00384E  B4D8               	btfsc	status,2,c
 10994                           
 10995                           ; BSR set to: 1
 10996                           ;pwm_asl.c: 229: if(timer_6_counter >= 12) {
 10997  003850  BE5F               	btfsc	_timer_6_counter+1,7,c
 10998  003852  D01C               	goto	i2l142
 10999  003854  505F               	movf	_timer_6_counter+1,w,c
 11000  003856  E104               	bnz	i2u440_40
 11001  003858  0E0C               	movlw	12
 11002  00385A  5C5E               	subwf	_timer_6_counter,w,c
 11003  00385C  A0D8               	btfss	status,0,c
 11004  00385E  D016               	goto	i2l142
 11005  003860                     i2u440_40:
 11006                           
 11007                           ; BSR set to: 1
 11008                           ;pwm_asl.c: 231: PORTBbits.RB2 = !PORTBbits.RB2;
 11009  003860  B481               	btfsc	3969,2,c	;volatile
 11010  003862  D003               	goto	i2u441_40
 11011  003864  6A01               	clrf	??_Timer1_isr& (0+255),c
 11012  003866  2A01               	incf	??_Timer1_isr& (0+255),f,c
 11013  003868  D001               	goto	i2u442_48
 11014  00386A                     i2u441_40:
 11015  00386A  6A01               	clrf	??_Timer1_isr& (0+255),c
 11016  00386C                     i2u442_48:
 11017  00386C  4601               	rlncf	??_Timer1_isr,f,c
 11018  00386E  4601               	rlncf	??_Timer1_isr,f,c
 11019  003870  5081               	movf	3969,w,c	;volatile
 11020  003872  1801               	xorwf	??_Timer1_isr,w,c
 11021  003874  0BFB               	andlw	-5
 11022  003876  1801               	xorwf	??_Timer1_isr,w,c
 11023  003878  6E81               	movwf	3969,c	;volatile
 11024                           
 11025                           ;pwm_asl.c: 232: timer_6_counter=0;
 11026  00387A  0E00               	movlw	0
 11027  00387C  6E5F               	movwf	_timer_6_counter+1,c
 11028  00387E  0E00               	movlw	0
 11029  003880  6E5E               	movwf	_timer_6_counter,c
 11030                           
 11031                           ;pwm_asl.c: 233: timer_6_flag = 0 ;
 11032  003882  0E00               	movlw	0
 11033  003884  0101               	movlb	1	; () banked
 11034  003886  6F5B               	movwf	(_timer_6_flag+1)& (0+255),b
 11035  003888  0E00               	movlw	0
 11036  00388A  6F5A               	movwf	_timer_6_flag& (0+255),b
 11037  00388C                     i2l142:
 11038                           
 11039                           ; BSR set to: 1
 11040                           ;pwm_asl.c: 234: }}
 11041                           ;pwm_asl.c: 236: if(timer_10_flag==1){
 11042                           
 11043                           ; BSR set to: 1
 11044  00388C  0558               	decf	_timer_10_flag& (0+255),w,b
 11045  00388E  1159               	iorwf	(_timer_10_flag+1)& (0+255),w,b
 11046  003890  B4D8               	btfsc	status,2,c
 11047                           
 11048                           ; BSR set to: 1
 11049                           ;pwm_asl.c: 237: if(timer_10_counter >= 20) {
 11050  003892  BE5D               	btfsc	_timer_10_counter+1,7,c
 11051  003894  D01C               	goto	i2l144
 11052  003896  505D               	movf	_timer_10_counter+1,w,c
 11053  003898  E104               	bnz	i2u444_40
 11054  00389A  0E14               	movlw	20
 11055  00389C  5C5C               	subwf	_timer_10_counter,w,c
 11056  00389E  A0D8               	btfss	status,0,c
 11057  0038A0  D016               	goto	i2l144
 11058  0038A2                     i2u444_40:
 11059                           
 11060                           ; BSR set to: 1
 11061                           ;pwm_asl.c: 239: PORTBbits.RB2 = !PORTBbits.RB2;
 11062  0038A2  B481               	btfsc	3969,2,c	;volatile
 11063  0038A4  D003               	goto	i2u445_40
 11064  0038A6  6A01               	clrf	??_Timer1_isr& (0+255),c
 11065  0038A8  2A01               	incf	??_Timer1_isr& (0+255),f,c
 11066  0038AA  D001               	goto	i2u446_48
 11067  0038AC                     i2u445_40:
 11068  0038AC  6A01               	clrf	??_Timer1_isr& (0+255),c
 11069  0038AE                     i2u446_48:
 11070  0038AE  4601               	rlncf	??_Timer1_isr,f,c
 11071  0038B0  4601               	rlncf	??_Timer1_isr,f,c
 11072  0038B2  5081               	movf	3969,w,c	;volatile
 11073  0038B4  1801               	xorwf	??_Timer1_isr,w,c
 11074  0038B6  0BFB               	andlw	-5
 11075  0038B8  1801               	xorwf	??_Timer1_isr,w,c
 11076  0038BA  6E81               	movwf	3969,c	;volatile
 11077                           
 11078                           ;pwm_asl.c: 240: timer_10_counter=0;
 11079  0038BC  0E00               	movlw	0
 11080  0038BE  6E5D               	movwf	_timer_10_counter+1,c
 11081  0038C0  0E00               	movlw	0
 11082  0038C2  6E5C               	movwf	_timer_10_counter,c
 11083                           
 11084                           ;pwm_asl.c: 241: timer_10_flag = 0 ;
 11085  0038C4  0E00               	movlw	0
 11086  0038C6  0101               	movlb	1	; () banked
 11087  0038C8  6F59               	movwf	(_timer_10_flag+1)& (0+255),b
 11088  0038CA  0E00               	movlw	0
 11089  0038CC  6F58               	movwf	_timer_10_flag& (0+255),b
 11090  0038CE                     i2l144:
 11091                           
 11092                           ; BSR set to: 1
 11093                           ;pwm_asl.c: 242: }}
 11094                           ;pwm_asl.c: 244: reloadTimer1();
 11095                           
 11096                           ; BSR set to: 1
 11097                           
 11098                           ; BSR set to: 1
 11099  0038CE  EC1F  F021         	call	i2_reloadTimer1	;wreg free
 11100  0038D2  0012               	return		;funcret
 11101  0038D4                     __end_of_Timer1_isr:
 11102                           	opt stack 0
 11103                           pclatu	equ	0xFFB
 11104                           pclath	equ	0xFFA
 11105                           tblptru	equ	0xFF8
 11106                           tblptrh	equ	0xFF7
 11107                           tblptrl	equ	0xFF6
 11108                           tablat	equ	0xFF5
 11109                           prodh	equ	0xFF4
 11110                           prodl	equ	0xFF3
 11111                           intcon	equ	0xFF2
 11112                           postinc0	equ	0xFEE
 11113                           fsr0h	equ	0xFEA
 11114                           fsr0l	equ	0xFE9
 11115                           wreg	equ	0xFE8
 11116                           postdec1	equ	0xFE5
 11117                           fsr1h	equ	0xFE2
 11118                           fsr1l	equ	0xFE1
 11119                           indf2	equ	0xFDF
 11120                           postinc2	equ	0xFDE
 11121                           fsr2h	equ	0xFDA
 11122                           fsr2l	equ	0xFD9
 11123                           status	equ	0xFD8
 11124                           
 11125 ;; *************** function i2_reloadTimer1 *****************
 11126 ;; Defined at:
 11127 ;;		line 155 in file "pwm_asl.c"
 11128 ;; Parameters:    Size  Location     Type
 11129 ;;		None
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;		None
 11132 ;; Return value:  Size  Location     Type
 11133 ;;                  1    wreg      void 
 11134 ;; Registers used:
 11135 ;;		wreg, status,2
 11136 ;; Tracked objects:
 11137 ;;		On entry : 0/0
 11138 ;;		On exit  : 0/0
 11139 ;;		Unchanged: 0/0
 11140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11144 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11145 ;;Total ram usage:        0 bytes
 11146 ;; Hardware stack levels used:    1
 11147 ;; This function calls:
 11148 ;;		Nothing
 11149 ;; This function is called by:
 11150 ;;		_Timer1_isr
 11151 ;; This function uses a non-reentrant model
 11152 ;;
 11153                           
 11154                           	psect	text43
 11155  00423E                     __ptext43:
 11156                           	opt stack 0
 11157  00423E                     i2_reloadTimer1:
 11158                           	opt stack 22
 11159                           
 11160                           ;pwm_asl.c: 157: TMR1H = (unsigned char) ((start_t1 >> 8) & 0x00FF);
 11161                           
 11162                           ;incstack = 0
 11163  00423E  0101               	movlb	1	; () banked
 11164  004240  515F               	movf	(_start_t1+1)& (0+255),w,b
 11165  004242  6ECF               	movwf	4047,c	;volatile
 11166                           
 11167                           ; BSR set to: 1
 11168                           ;pwm_asl.c: 158: TMR1L = (unsigned char)(start_t1 & 0x00FF );
 11169  004244  C15E  FFCE         	movff	_start_t1,4046	;volatile
 11170                           
 11171                           ; BSR set to: 1
 11172  004248  0012               	return		;funcret
 11173  00424A                     __end_ofi2_reloadTimer1:
 11174                           	opt stack 0
 11175                           pclatu	equ	0xFFB
 11176                           pclath	equ	0xFFA
 11177                           tblptru	equ	0xFF8
 11178                           tblptrh	equ	0xFF7
 11179                           tblptrl	equ	0xFF6
 11180                           tablat	equ	0xFF5
 11181                           prodh	equ	0xFF4
 11182                           prodl	equ	0xFF3
 11183                           intcon	equ	0xFF2
 11184                           postinc0	equ	0xFEE
 11185                           fsr0h	equ	0xFEA
 11186                           fsr0l	equ	0xFE9
 11187                           wreg	equ	0xFE8
 11188                           postdec1	equ	0xFE5
 11189                           fsr1h	equ	0xFE2
 11190                           fsr1l	equ	0xFE1
 11191                           indf2	equ	0xFDF
 11192                           postinc2	equ	0xFDE
 11193                           fsr2h	equ	0xFDA
 11194                           fsr2l	equ	0xFD9
 11195                           status	equ	0xFD8
 11196                           
 11197 ;; *************** function _Timer0_isr *****************
 11198 ;; Defined at:
 11199 ;;		line 249 in file "pwm_asl.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11216 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11217 ;;Total ram usage:        1 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    1
 11220 ;; This function calls:
 11221 ;;		_reloadTimer0
 11222 ;; This function is called by:
 11223 ;;		_highIsr
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           	psect	text44
 11228  004132                     __ptext44:
 11229                           	opt stack 0
 11230  004132                     _Timer0_isr:
 11231                           	opt stack 22
 11232                           
 11233                           ;pwm_asl.c: 251: INTCONbits.TMR0IF=0;
 11234                           
 11235                           ; BSR set to: 1
 11236                           ;incstack = 0
 11237  004132  94F2               	bcf	intcon,2,c	;volatile
 11238                           
 11239                           ;pwm_asl.c: 252: INTCONbits.T0IF = 0;
 11240  004134  94F2               	bcf	intcon,2,c	;volatile
 11241                           
 11242                           ;pwm_asl.c: 253: PORTBbits.RB3= !PORTBbits.RB3;
 11243  004136  B681               	btfsc	3969,3,c	;volatile
 11244  004138  D003               	goto	i2u172_40
 11245  00413A  6A01               	clrf	??_Timer0_isr& (0+255),c
 11246  00413C  2A01               	incf	??_Timer0_isr& (0+255),f,c
 11247  00413E  D001               	goto	i2u173_48
 11248  004140                     i2u172_40:
 11249  004140  6A01               	clrf	??_Timer0_isr& (0+255),c
 11250  004142                     i2u173_48:
 11251  004142  4601               	rlncf	??_Timer0_isr,f,c
 11252  004144  4601               	rlncf	??_Timer0_isr,f,c
 11253  004146  4601               	rlncf	??_Timer0_isr,f,c
 11254  004148  5081               	movf	3969,w,c	;volatile
 11255  00414A  1801               	xorwf	??_Timer0_isr,w,c
 11256  00414C  0BF7               	andlw	-9
 11257  00414E  1801               	xorwf	??_Timer0_isr,w,c
 11258  004150  6E81               	movwf	3969,c	;volatile
 11259                           
 11260                           ;pwm_asl.c: 255: reloadTimer0();
 11261  004152  EC25  F021         	call	_reloadTimer0	;wreg free
 11262  004156  0012               	return		;funcret
 11263  004158                     __end_of_Timer0_isr:
 11264                           	opt stack 0
 11265                           pclatu	equ	0xFFB
 11266                           pclath	equ	0xFFA
 11267                           tblptru	equ	0xFF8
 11268                           tblptrh	equ	0xFF7
 11269                           tblptrl	equ	0xFF6
 11270                           tablat	equ	0xFF5
 11271                           prodh	equ	0xFF4
 11272                           prodl	equ	0xFF3
 11273                           intcon	equ	0xFF2
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           postdec1	equ	0xFE5
 11279                           fsr1h	equ	0xFE2
 11280                           fsr1l	equ	0xFE1
 11281                           indf2	equ	0xFDF
 11282                           postinc2	equ	0xFDE
 11283                           fsr2h	equ	0xFDA
 11284                           fsr2l	equ	0xFD9
 11285                           status	equ	0xFD8
 11286                           
 11287 ;; *************** function _reloadTimer0 *****************
 11288 ;; Defined at:
 11289 ;;		line 199 in file "pwm_asl.c"
 11290 ;; Parameters:    Size  Location     Type
 11291 ;;		None
 11292 ;; Auto vars:     Size  Location     Type
 11293 ;;		None
 11294 ;; Return value:  Size  Location     Type
 11295 ;;                  1    wreg      void 
 11296 ;; Registers used:
 11297 ;;		wreg, status,2
 11298 ;; Tracked objects:
 11299 ;;		On entry : 0/0
 11300 ;;		On exit  : 0/0
 11301 ;;		Unchanged: 0/0
 11302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;Total ram usage:        0 bytes
 11308 ;; Hardware stack levels used:    1
 11309 ;; This function calls:
 11310 ;;		Nothing
 11311 ;; This function is called by:
 11312 ;;		_Timer0_isr
 11313 ;; This function uses a non-reentrant model
 11314 ;;
 11315                           
 11316                           	psect	text45
 11317  00424A                     __ptext45:
 11318                           	opt stack 0
 11319  00424A                     _reloadTimer0:
 11320                           	opt stack 22
 11321                           
 11322                           ;pwm_asl.c: 201: TMR0H = (unsigned char) ((12500 >> 8) & 0x00FF);
 11323                           
 11324                           ;incstack = 0
 11325  00424A  0E30               	movlw	48
 11326  00424C  6ED7               	movwf	4055,c	;volatile
 11327                           
 11328                           ;pwm_asl.c: 202: TMR0L = (unsigned char)(12500 & 0x00FF );
 11329  00424E  0ED4               	movlw	212
 11330  004250  6ED6               	movwf	4054,c	;volatile
 11331  004252  0012               	return		;funcret
 11332  004254                     __end_of_reloadTimer0:
 11333                           	opt stack 0
 11334                           pclatu	equ	0xFFB
 11335                           pclath	equ	0xFFA
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           postinc0	equ	0xFEE
 11344                           fsr0h	equ	0xFEA
 11345                           fsr0l	equ	0xFE9
 11346                           wreg	equ	0xFE8
 11347                           postdec1	equ	0xFE5
 11348                           fsr1h	equ	0xFE2
 11349                           fsr1l	equ	0xFE1
 11350                           indf2	equ	0xFDF
 11351                           postinc2	equ	0xFDE
 11352                           fsr2h	equ	0xFDA
 11353                           fsr2l	equ	0xFD9
 11354                           status	equ	0xFD8
 11355                           
 11356 ;; *************** function _RX_isr *****************
 11357 ;; Defined at:
 11358 ;;		line 259 in file "pwm_asl.c"
 11359 ;; Parameters:    Size  Location     Type
 11360 ;;		None
 11361 ;; Auto vars:     Size  Location     Type
 11362 ;;		None
 11363 ;; Return value:  Size  Location     Type
 11364 ;;                  1    wreg      void 
 11365 ;; Registers used:
 11366 ;;		wreg, status,2, status,0
 11367 ;; Tracked objects:
 11368 ;;		On entry : 0/0
 11369 ;;		On exit  : 0/0
 11370 ;;		Unchanged: 0/0
 11371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11374 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11376 ;;Total ram usage:        1 bytes
 11377 ;; Hardware stack levels used:    1
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_highIsr
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           	psect	text46
 11386  003A86                     __ptext46:
 11387                           	opt stack 0
 11388  003A86                     _RX_isr:
 11389                           	opt stack 23
 11390                           
 11391                           ;incstack = 0
 11392  003A86  0004               	clrwdt		;# 
 11393                           
 11394                           ;pwm_asl.c: 264: PORTDbits.RD3 = !PORTDbits.RD3;
 11395  003A88  B683               	btfsc	3971,3,c	;volatile
 11396  003A8A  D003               	goto	i2u447_40
 11397  003A8C  6A01               	clrf	??_RX_isr& (0+255),c
 11398  003A8E  2A01               	incf	??_RX_isr& (0+255),f,c
 11399  003A90  D001               	goto	i2u448_48
 11400  003A92                     i2u447_40:
 11401  003A92  6A01               	clrf	??_RX_isr& (0+255),c
 11402  003A94                     i2u448_48:
 11403  003A94  4601               	rlncf	??_RX_isr,f,c
 11404  003A96  4601               	rlncf	??_RX_isr,f,c
 11405  003A98  4601               	rlncf	??_RX_isr,f,c
 11406  003A9A  5083               	movf	3971,w,c	;volatile
 11407  003A9C  1801               	xorwf	??_RX_isr,w,c
 11408  003A9E  0BF7               	andlw	-9
 11409  003AA0  1801               	xorwf	??_RX_isr,w,c
 11410  003AA2  6E83               	movwf	3971,c	;volatile
 11411                           
 11412                           ;pwm_asl.c: 265: RecvedChar = RCREG;
 11413  003AA4  CFAE F068          	movff	4014,_RecvedChar	;volatile
 11414                           
 11415                           ;pwm_asl.c: 267: if (RecvedChar == 'O'&&O!=1)
 11416  003AA8  0E4F               	movlw	79
 11417  003AAA  1868               	xorwf	_RecvedChar,w,c
 11418  003AAC  A4D8               	btfss	status,2,c
 11419  003AAE  D008               	goto	i2l153
 11420  003AB0  0456               	decf	_O,w,c
 11421  003AB2  1057               	iorwf	_O+1,w,c
 11422  003AB4  B4D8               	btfsc	status,2,c
 11423  003AB6  D004               	goto	i2l153
 11424                           
 11425                           ;pwm_asl.c: 268: {
 11426                           ;pwm_asl.c: 269: O=1;
 11427  003AB8  0E00               	movlw	0
 11428  003ABA  6E57               	movwf	_O+1,c
 11429  003ABC  0E01               	movlw	1
 11430  003ABE  6E56               	movwf	_O,c
 11431  003AC0                     i2l153:
 11432                           
 11433                           ;pwm_asl.c: 270: }
 11434                           ;pwm_asl.c: 271: if (RecvedChar =='N'&&O==1)
 11435  003AC0  0E4E               	movlw	78
 11436  003AC2  1868               	xorwf	_RecvedChar,w,c
 11437  003AC4  A4D8               	btfss	status,2,c
 11438  003AC6  D015               	goto	i2l154
 11439  003AC8  0456               	decf	_O,w,c
 11440  003ACA  1057               	iorwf	_O+1,w,c
 11441  003ACC  A4D8               	btfss	status,2,c
 11442  003ACE  D011               	goto	i2l154
 11443                           
 11444                           ;pwm_asl.c: 272: {
 11445                           ;pwm_asl.c: 273: on_flag=1;
 11446  003AD0  0E00               	movlw	0
 11447  003AD2  0101               	movlb	1	; () banked
 11448  003AD4  6F57               	movwf	(_on_flag+1)& (0+255),b
 11449  003AD6  0E01               	movlw	1
 11450  003AD8  6F56               	movwf	_on_flag& (0+255),b
 11451                           
 11452                           ;pwm_asl.c: 274: off_flag=0;
 11453  003ADA  0E00               	movlw	0
 11454  003ADC  6F55               	movwf	(_off_flag+1)& (0+255),b
 11455  003ADE  0E00               	movlw	0
 11456  003AE0  6F54               	movwf	_off_flag& (0+255),b
 11457                           
 11458                           ;pwm_asl.c: 275: O=0;
 11459  003AE2  0E00               	movlw	0
 11460  003AE4  6E57               	movwf	_O+1,c
 11461  003AE6  0E00               	movlw	0
 11462  003AE8  6E56               	movwf	_O,c
 11463                           
 11464                           ;pwm_asl.c: 276: F=0;
 11465  003AEA  0E00               	movlw	0
 11466  003AEC  6E5B               	movwf	_F+1,c
 11467  003AEE  0E00               	movlw	0
 11468  003AF0  6E5A               	movwf	_F,c
 11469  003AF2                     i2l154:
 11470                           
 11471                           ;pwm_asl.c: 277: }
 11472                           ;pwm_asl.c: 278: if (RecvedChar == 'F'&&O==1)
 11473                           
 11474                           ; BSR set to: 1
 11475  003AF2  0E46               	movlw	70
 11476  003AF4  1868               	xorwf	_RecvedChar,w,c
 11477  003AF6  A4D8               	btfss	status,2,c
 11478  003AF8  D008               	goto	i2l155
 11479  003AFA  0456               	decf	_O,w,c
 11480  003AFC  1057               	iorwf	_O+1,w,c
 11481  003AFE  A4D8               	btfss	status,2,c
 11482  003B00  D004               	goto	i2l155
 11483                           
 11484                           ;pwm_asl.c: 279: {
 11485                           ;pwm_asl.c: 280: F=1;
 11486  003B02  0E00               	movlw	0
 11487  003B04  6E5B               	movwf	_F+1,c
 11488  003B06  0E01               	movlw	1
 11489  003B08  6E5A               	movwf	_F,c
 11490  003B0A                     i2l155:
 11491                           
 11492                           ;pwm_asl.c: 282: }
 11493                           ;pwm_asl.c: 283: if (RecvedChar == 'F'&&F==1)
 11494  003B0A  0E46               	movlw	70
 11495  003B0C  1868               	xorwf	_RecvedChar,w,c
 11496  003B0E  A4D8               	btfss	status,2,c
 11497  003B10  0012               	return	
 11498  003B12  045A               	decf	_F,w,c
 11499  003B14  105B               	iorwf	_F+1,w,c
 11500  003B16  A4D8               	btfss	status,2,c
 11501  003B18  0012               	return	
 11502                           
 11503                           ;pwm_asl.c: 284: {
 11504                           ;pwm_asl.c: 286: on_flag=0;
 11505  003B1A  0E00               	movlw	0
 11506  003B1C  0101               	movlb	1	; () banked
 11507  003B1E  6F57               	movwf	(_on_flag+1)& (0+255),b
 11508  003B20  0E00               	movlw	0
 11509  003B22  6F56               	movwf	_on_flag& (0+255),b
 11510                           
 11511                           ;pwm_asl.c: 287: off_flag=1;
 11512  003B24  0E00               	movlw	0
 11513  003B26  6F55               	movwf	(_off_flag+1)& (0+255),b
 11514  003B28  0E01               	movlw	1
 11515  003B2A  6F54               	movwf	_off_flag& (0+255),b
 11516                           
 11517                           ;pwm_asl.c: 288: O=0;
 11518  003B2C  0E00               	movlw	0
 11519  003B2E  6E57               	movwf	_O+1,c
 11520  003B30  0E00               	movlw	0
 11521  003B32  6E56               	movwf	_O,c
 11522                           
 11523                           ;pwm_asl.c: 289: F=0;
 11524  003B34  0E00               	movlw	0
 11525  003B36  6E5B               	movwf	_F+1,c
 11526  003B38  0E00               	movlw	0
 11527  003B3A  6E5A               	movwf	_F,c
 11528                           
 11529                           ; BSR set to: 1
 11530                           
 11531                           ;pwm_asl.c: 290: }
 11532  003B3C  0012               	return	
 11533  003B3E                     __end_of_RX_isr:
 11534                           	opt stack 0
 11535                           pclatu	equ	0xFFB
 11536                           pclath	equ	0xFFA
 11537                           tblptru	equ	0xFF8
 11538                           tblptrh	equ	0xFF7
 11539                           tblptrl	equ	0xFF6
 11540                           tablat	equ	0xFF5
 11541                           prodh	equ	0xFF4
 11542                           prodl	equ	0xFF3
 11543                           intcon	equ	0xFF2
 11544                           postinc0	equ	0xFEE
 11545                           fsr0h	equ	0xFEA
 11546                           fsr0l	equ	0xFE9
 11547                           wreg	equ	0xFE8
 11548                           postdec1	equ	0xFE5
 11549                           fsr1h	equ	0xFE2
 11550                           fsr1l	equ	0xFE1
 11551                           indf2	equ	0xFDF
 11552                           postinc2	equ	0xFDE
 11553                           fsr2h	equ	0xFDA
 11554                           fsr2l	equ	0xFD9
 11555                           status	equ	0xFD8
 11556                           pclatu	equ	0xFFB
 11557                           pclath	equ	0xFFA
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           postinc0	equ	0xFEE
 11566                           fsr0h	equ	0xFEA
 11567                           fsr0l	equ	0xFE9
 11568                           wreg	equ	0xFE8
 11569                           postdec1	equ	0xFE5
 11570                           fsr1h	equ	0xFE2
 11571                           fsr1l	equ	0xFE1
 11572                           indf2	equ	0xFDF
 11573                           postinc2	equ	0xFDE
 11574                           fsr2h	equ	0xFDA
 11575                           fsr2l	equ	0xFD9
 11576                           status	equ	0xFD8
 11577                           
 11578                           	psect	rparam
 11579  0000                     pclatu	equ	0xFFB
 11580                           pclath	equ	0xFFA
 11581                           tblptru	equ	0xFF8
 11582                           tblptrh	equ	0xFF7
 11583                           tblptrl	equ	0xFF6
 11584                           tablat	equ	0xFF5
 11585                           prodh	equ	0xFF4
 11586                           prodl	equ	0xFF3
 11587                           intcon	equ	0xFF2
 11588                           postinc0	equ	0xFEE
 11589                           fsr0h	equ	0xFEA
 11590                           fsr0l	equ	0xFE9
 11591                           wreg	equ	0xFE8
 11592                           postdec1	equ	0xFE5
 11593                           fsr1h	equ	0xFE2
 11594                           fsr1l	equ	0xFE1
 11595                           indf2	equ	0xFDF
 11596                           postinc2	equ	0xFDE
 11597                           fsr2h	equ	0xFDA
 11598                           fsr2l	equ	0xFD9
 11599                           status	equ	0xFD8
 11600                           
 11601                           	psect	temp
 11602  000069                     btemp:
 11603                           	opt stack 0
 11604  000069                     	ds	1
 11605  0000                     int$flags	set	btemp
 11606  0000                     wtemp6	set	btemp+1
 11607                           pclatu	equ	0xFFB
 11608                           pclath	equ	0xFFA
 11609                           tblptru	equ	0xFF8
 11610                           tblptrh	equ	0xFF7
 11611                           tblptrl	equ	0xFF6
 11612                           tablat	equ	0xFF5
 11613                           prodh	equ	0xFF4
 11614                           prodl	equ	0xFF3
 11615                           intcon	equ	0xFF2
 11616                           postinc0	equ	0xFEE
 11617                           fsr0h	equ	0xFEA
 11618                           fsr0l	equ	0xFE9
 11619                           wreg	equ	0xFE8
 11620                           postdec1	equ	0xFE5
 11621                           fsr1h	equ	0xFE2
 11622                           fsr1l	equ	0xFE1
 11623                           indf2	equ	0xFDF
 11624                           postinc2	equ	0xFDE
 11625                           fsr2h	equ	0xFDA
 11626                           fsr2l	equ	0xFD9
 11627                           status	equ	0xFD8


Data Sizes:
    Strings     107
    Constant    144
    Data        6
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     85     104
    BANK0           128     91      95
    BANK1           256     84      96
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_6(CODE[15]), STR_5(CODE[16]), STR_4(CODE[6]), STR_3(CODE[18]), 
		 -> STR_2(CODE[17]), STR_1(CODE[17]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 32
		 -> main@Buffer44(BANK1[3]), main@Buffer(BANK1[32]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    send_string_no_lib@p	PTR unsigned char  size(2) Largest target is 22
		 -> STR_7(CODE[22]), 

    lcd_puts@s	PTR unsigned char  size(2) Largest target is 32
		 -> STR_8(CODE[2]), main@Buffer(BANK1[32]), 


Critical Paths under _main in COMRAM

    _main->___fltol
    _sprintf->___fltol
    _scale->___flmul
    _fround->___flmul
    ___flmul->___fldiv
    ___awdiv->___awmod
    ___fltol->_scale
    ___fladd->_fround
    _send_string_no_lib->_send_byte_no_lib
    _read_adc_voltage->___fldiv
    ___xxtofl->___wmul
    ___fldiv->___xxtofl
    _lcd_puts->_lcd_putc
    _lcd_putc->_lcd_gotoxy
    _lcd_gotoxy->_lcd_send_byte
    _lcd_init->_lcd_send_byte
    _lcd_send_byte->_lcd_send_nibble
    _lcd_send_nibble->_delay_cycles

Critical Paths under _highIsr in COMRAM

    _highIsr->i2_delay_ms

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___flsub
    _scale->___flmul
    _fround->___flmul
    ___fltol->_scale
    ___flsub->___fladd
    ___fladd->_fround

Critical Paths under _highIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _highIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _highIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _highIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _highIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _highIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _highIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _highIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _highIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _highIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _highIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _highIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _highIsr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _highIsr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _highIsr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _highIsr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               119   119      0   85942
                                             89 BANK0      2     2      0
                                              0 BANK1     84    84      0
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___fltol
                          _atraso_ms
                          _display7s
                       _initTimers00
                       _initTimers01
                    _init_adc_no_lib
                         _lcd_gotoxy
                           _lcd_init
                           _lcd_putc
                           _lcd_puts
                   _read_adc_voltage
                 _send_string_no_lib
                         _setupPorts
                        _setupSerial
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             45    37      8   51661
                                             50 BANK0     39    31      8
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                                9     5      4   11220
                                             79 COMRAM     4     0      4
                                             13 BANK0      5     5      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                             22 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13     9      4   10941
                                             79 COMRAM     4     0      4
                                             13 BANK0      9     9      0
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    6113
                                             67 COMRAM    12     4      8
                                              0 BANK0     13    13      0
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    2233
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    2245
                                             28 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     455
                                             22 COMRAM    17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     455
                                             22 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     615
                                             22 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     466
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     837
                                             83 COMRAM     2     2      0
                                             18 BANK0      8     4      4
                            ___flmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    4907
                                             42 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    4522
                                             22 BANK0     20    12      8
                            ___flmul (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     273
                                             22 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2310
                                             22 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (1) _setupSerial                                          1     1      0       2
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setupPorts                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_string_no_lib                                   2     0      2     143
                                             23 COMRAM     2     0      2
                   _send_byte_no_lib
 ---------------------------------------------------------------------------------
 (2) _send_byte_no_lib                                     1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_adc_voltage                                    11     7      4    3619
                                             67 COMRAM    11     7      4
                            ___fldiv
                             ___wmul
                           ___xxtofl
                _read_adc_raw_no_lib
 ---------------------------------------------------------------------------------
 (2) _read_adc_raw_no_lib                                  7     5      2      45
                                             22 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     474
                                             28 COMRAM    14    10      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     767
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2265
                                             42 COMRAM    25    17      8
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _lcd_puts                                             2     0      2    3588
                                             36 COMRAM     2     0      2
                           _lcd_putc
 ---------------------------------------------------------------------------------
 (2) _lcd_putc                                             1     1      0    3163
                                             35 COMRAM     1     1      0
                           _delay_ms
                         _lcd_gotoxy
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (3) _lcd_gotoxy                                           3     2      1    1585
                                             32 COMRAM     3     2      1
                      _lcd_send_byte
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0    1716
                                             32 COMRAM     1     1      0
                           _delay_ms
                      _lcd_send_byte
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (3) _lcd_send_byte                                        2     1      1    1134
                                             30 COMRAM     2     1      1
                       _delay_cycles
                           _delay_ms
                    _lcd_send_nibble
 ---------------------------------------------------------------------------------
 (4) _lcd_send_nibble                                      2     2      0      68
                                             28 COMRAM     2     2      0
                       _delay_cycles
 ---------------------------------------------------------------------------------
 (5) _delay_cycles                                         6     6      0      46
                                             22 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             4     2      2     400
                                             22 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _init_adc_no_lib                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers01                                         0     0      0       0
                       _reloadTimer1
 ---------------------------------------------------------------------------------
 (2) _reloadTimer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTimers00                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _display7s                                            3     1      2     218
                                             22 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _atraso_ms                                            4     2      2     122
                                             22 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _highIsr                                             18    18      0      72
                                              4 COMRAM    18    18      0
                             _RX_isr
                         _Timer0_isr
                         _Timer1_isr
                         i2_delay_ms
 ---------------------------------------------------------------------------------
 (8) i2_delay_ms                                           4     2      2      72
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _Timer1_isr                                           1     1      0       0
                                              0 COMRAM     1     1      0
                     i2_reloadTimer1
 ---------------------------------------------------------------------------------
 (9) i2_reloadTimer1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _Timer0_isr                                           1     1      0       0
                                              0 COMRAM     1     1      0
                       _reloadTimer0
 ---------------------------------------------------------------------------------
 (9) _reloadTimer0                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _RX_isr                                               1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   ___fladd
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
   ___fldiv
     ___wmul (ARG)
     ___xxtofl (ARG)
       ___wmul (ARG)
   ___flge
   ___flmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___fldiv (ARG)
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
   ___fltol
     ___flmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
   _atraso_ms
   _display7s
   _initTimers00
   _initTimers01
     _reloadTimer1
   _init_adc_no_lib
   _lcd_gotoxy
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_init
     _delay_ms
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
     _lcd_send_nibble
       _delay_cycles
   _lcd_putc
     _delay_ms
     _lcd_gotoxy
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
     _lcd_send_byte
       _delay_cycles
       _delay_ms
       _lcd_send_nibble
         _delay_cycles
   _lcd_puts
     _lcd_putc
       _delay_ms
       _lcd_gotoxy
         _lcd_send_byte
           _delay_cycles
           _delay_ms
           _lcd_send_nibble
             _delay_cycles
       _lcd_send_byte
         _delay_cycles
         _delay_ms
         _lcd_send_nibble
           _delay_cycles
   _read_adc_voltage
     ___fldiv
       ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     _read_adc_raw_no_lib
   _send_string_no_lib
     _send_byte_no_lib
   _setupPorts
   _setupSerial
   _sprintf
     ___awdiv
       ___awmod (ARG)
     ___fladd
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___fldiv (ARG)
         ___wmul (ARG)
         ___xxtofl (ARG)
           ___wmul (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___fldiv (ARG)
               ___wmul (ARG)
               ___xxtofl (ARG)
                 ___wmul (ARG)
       ___xxtofl (ARG)
         ___wmul (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___fldiv (ARG)
             ___wmul (ARG)
             ___xxtofl (ARG)
               ___wmul (ARG)
     ___lldiv
     ___llmod
     ___wmul
     ___xxtofl
       ___wmul (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)
     _isdigit
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___fldiv (ARG)
           ___wmul (ARG)
           ___xxtofl (ARG)
             ___wmul (ARG)

 _highIsr (ROOT)
   _RX_isr
   _Timer0_isr
     _reloadTimer0
   _Timer1_isr
     i2_reloadTimer1
   i2_delay_ms

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     54      60       7       37.5%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5B      5F       5       74.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     55      68       1       82.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     127      34        0.0%
DATA                 0      0     127       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Sat Jul 23 23:29:41 2022

           ?_read_adc_voltage 0044                i2_reloadTimer1 423E                             _F 005A  
                           _H 0058                             _O 0056                  ___fldiv@aexp 0043  
                ___fldiv@bexp 0042                  ___fldiv@sign 0037            ??_read_adc_voltage 0048  
              ?_lcd_send_byte 001F                  ___awdiv@sign 0022                  main@Buffer44 0140  
         ___wmul@multiplicand 0019                   __CFG_BORV$3 000000                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                 __CFG_OSC$XT 000000                   __CFG_LVP$ON 000000                   __CFG_WDT$ON 000000  
                         l107 40FE                           l108 40F0                           l213 4054  
                         l214 404E                           l222 3F8A                           l207 40D8  
                         l400 3282                           l208 40CA                           l401 3286  
                         l402 328A                           l234 3FAE                           l403 328E  
                         l227 3DB8                           l235 3F9C                           l243 3EF2  
                         l236 3FC8                           l244 3EB6                           l252 3E88  
                         l500 1686                           l180 1EE4                           l229 3DE0  
                         l237 3FA0                           l253 3E5E                           l501 1670  
                         l238 3FA4                           l246 3ECE                           l510 178C  
                         l182 1F16                           l174 1B12                           l239 3FA8  
                         l247 3EDA                           l431 306C                           l511 1790  
                         l191 20E8                           l183 1F52                           l175 1B40  
                         l248 3EE6                           l352 421C                           l520 1954  
                         l512 17B2                           l504 1748                           l353 421A  
                         l441 2376                           l513 18F4                           l505 16B4  
                         l177 2146                           l185 1FB2                           l370 31B2  
                         l434 314A                           l442 24E0                           l530 1A14  
                         l522 1974                           l514 1812                           l178 1D38  
                         l371 31B6                           l523 1996                           l507 1768  
                         l451 113E                           l187 201A                           l179 1D5E  
                         l380 31DA                           l372 31BA                           l444 2598  
                         l516 1916                           l508 1752                           l460 1228  
                         l452 1136                           l365 31EA                           l381 31DE  
                         l373 31BE                           l437 23A2                           l525 19B8  
                         l517 1900                           l461 11F0                           l189 2082  
                         l390 325A                           l382 31E2                           l374 31C2  
                         l366 31A6                           l278 3FF0                           l358 4086  
                         l438 22BE                           l526 19C0                           l470 1920  
                         l391 325E                           l383 31E6                           l375 31C6  
                         l359 4072                           l711 3B80                           l527 19E4  
                         l519 1938                           l471 128C                           l392 3262  
                         l376 31CA                           l368 31AA                           l712 3B78  
                         l528 19EC                           l472 12DA                           l464 1250  
                         l448 110C                           l393 3266                           l377 31CE  
                         l369 31AE                           l721 3CDA                           l529 1A34  
                         l457 116E                           l449 1124                           l386 3292  
                         l394 326A                           l378 31D2                           l730 3D2C  
                         l722 3CE6                           l538 1A7E                           l482 14BA  
                         l474 1346                           l395 326E                           l387 324E  
                         l379 31D6                           l715 3BA0                           l475 13C4  
                         l467 124C                           l459 123E                           l396 3272  
                         l388 3252                           l740 3596                           l716 3BAA  
                         l708 3B52                           l724 3CFC                           l492 1606  
                         l468 1278                           l397 3276                           l389 3256  
                         l717 3BB8                           l709 3B62                           l725 3CF4  
                         l493 1620                           l477 13F2                           l398 327A  
                         l742 35B4                           l478 143E                           l399 327E  
                         l743 35F6                           l479 1522                           l760 3784  
                         l752 3688                           l744 3626                           l728 3D14  
                         l904 41D6                           l496 1660                           l488 159A  
                         l753 367C                           l729 3D1E                           l497 164A  
                         l930 3BF0                           l746 3664                           l850 353C  
                         l931 3BE4                           l747 3654                           l851 352C  
                         l764 4030                           l940 3D54                           l844 3472  
                         l757 36D4                           l941 3D48                           l758 3708  
                         l790 3950                           l934 3C24                           l846 349E  
                         l759 3746                           l935 3C32                           l847 34D8  
                         l944 3D7C                           l856 3560                           l848 3500  
                         l945 3D8A                           l857 3554                           l795 3984  
                         l787 38F4                           l796 3978                           l789 3960  
                         l798 39A0                  __CFG_CPB$OFF 000000                           _PR2 000FCB  
                __CFG_CPD$OFF 000000                           _lcd 000F83                  ___awmod@sign 001C  
                         prod 000FF3     read_adc_voltage@raw_value 004C                           wreg 000FE8  
                ___flmul@aexp 0081                  ___flmul@bexp 0086                    i2_delay_ms 410C  
                ___flmul@sign 0080                  ___flmul@temp 008B                  ___flmul@prod 0087  
                 lcd_gotoxy@x 0022                   lcd_gotoxy@y 0021                   main@analogs 012E  
                ___fltol@exp1 0055                          l1020 29EC                          l1012 2948  
                        l1021 29B0                          l1013 2944                          l1030 2AC6  
                        l1110 2664                          l1031 2A8C                          l1103 25F6  
                        l1040 2B5E                          l1024 2A68                          l1104 25F2  
                        l1025 2A46                          l1017 2990                          l1121 285C  
                        l1105 2606                          l1034 2AB0                          l1026 2A54  
                        l1018 298C                          l1114 2824                          l1131 3334  
                        l1043 2B82                          l1035 2AB4                          l1027 2A58  
                        l1123 28A0                          l1115 2806                          l1107 2636  
                        l1132 3344                          l1060 2C36                          l1052 2BC2  
                        l1124 28BE                          l1108 2632                          l1141 33E4  
                        l1133 3362                          l1061 2C38                          l1045 2B98  
                        l1109 2646                          l1070 2C80                          l1142 33D8  
                        l1038 2B4E                          l1126 28E2                          l1135 3374  
                        l1055 2C08                          l1047 2BA2                          l1127 2900  
                        l1080 2D90                          l1136 3368                          l1081 2DB8  
                        l1073 2CC4                          l1074 2CC0                          l1146 3402  
                        l1138 33B2                          l1083 2DDE                          l1147 3434  
                        l1139 339A                          l1059 2C2E                          l1076 2D0A  
                        l1093 2E4C                          l1069 2C84                          l1086 2E14  
                        l1078 2D32                          l1095 2E90                          l1087 2DF6  
                        l1079 2DE0                          l1096 2EB4                          l1097 2EDE  
                        l1098 2EEA                          l1099 2EEC                          l3135 37BC  
                        l4273 3DB0                          l4287 3DD8                          l5617 159E  
                        l3955 2EDE                          l5653 1670                          l5645 164A  
                        l5911 1FAE                          l5823 1B38                          l5677 1752  
                        l5597 148C                          l5589 143E                          l5783 1A7A  
                        l5899 1F4E                          STR_1 10B9                          STR_2 10CA  
                        STR_3 10A7                          STR_4 10C4                          STR_5 10DB  
                        STR_6 10EB                          STR_7 1091                          STR_8 10FA  
                        u4110 398A                          u4140 3BF4                          u4070 3912  
                        u5120 3E80                          u6000 28CC                          _PIE2 000FA0  
                        u5130 3EAA                          u4250 33EE                          u4170 3D58  
                        u4075 3908                          u3611 3456                          u6110 3D00  
                        u5127 3E76                          u3631 3482                          u5137 3EA0  
                        u6050 3B84                          u6230 11CC                          u3760 368E  
                        u2785 3F5A                          u2786 3F5C                          u5530 2A1C  
                        u3690 3566                          u6410 15D6                          u6330 1404  
                        u4580 3DCE                          u3940 2E48                          u5540 2A2C  
                        u6500 1776                          u6340 1450                          u5710 2BA6  
                        u5550 2A2E                          u6510 1786                          _PIR1 000F9E  
                        u3970 2E9E                          u6370 148C                          u3980 2EC2  
                        u5740 2BBE                          u5580 2A70                          u5900 2652  
                        u5910 27C8                          u6710 1A98                          u6470 1694  
                        u6730 1BA0                          u5915 27BE                          u5790 2C14  
                        u5960 2858                          u6680 1A3C                          u6690 1A5A  
                        u5990 28AE                          u6937 1B22                          u6947 3F82  
                        u6957 40CC                          u6967 40F2              ?_lcd_send_nibble 0001  
                        _main 1AA6              _send_byte_no_lib 4216                          fsr0h 000FEA  
                        fsr1h 000FE2                          fsr2h 000FDA                          fsr0l 000FE9  
                        indf2 000FDF                          fsr1l 000FE1                          fsr2l 000FD9  
                        btemp 0069                          prodh 000FF4                          prodl 000FF3  
                        start 000E                 __CFG_IESO$OFF 000000               ___fldiv@new_exp 003C  
                 main@voltage 0120        __end_ofi2_reloadTimer1 424A                  _sprintf$1932 00BE  
               __CFG_MCLRE$ON 000000                  ___param_bank 000000          __end_of_delay_cycles 4070  
               ___fltol@sign1 0054               __end_of___fladd 2C54                         ?_main 0001  
             __end_of___fldiv 2F08               __end_of___awdiv 3BC2               __end_of___flneg 4042  
             __end_of___awmod 3D36               __end_of___flmul 2916               __end_of___flsub 3F50  
             __end_of___fltol 39B2               __end_of___lldiv 3C44                         _T0CON 000FD5  
             ___awdiv@divisor 001F                         _T1CON 000FCD               __end_of___llmod 3D9C  
                       _T2CON 000FCA                         i2l140 384A                         i2l142 388C  
                       i2l207 4124                         i2l144 38CE                         i2l208 4116  
                       i2l153 3AC0                         i2l154 3AF2                         i2l138 37F6  
                       i2l155 3B0A                         i2l167 3A32                         i2l168 3A3A  
             ___awdiv@counter 0021                         _RCREG 000FAE                         _RCSTA 000FAB  
                       _TMR0H 000FD7                         _TMR1H 000FCF                         _TMR0L 000FD6  
                       _TMR1L 000FCE                         _SPBRG 000FAF                         _PORTA 000F80  
                       _PORTB 000F81                         _PORTD 000F83       read_adc_voltage@channel 004E  
                       _TRISA 000F92                         _TRISB 000F93                         _TRISC 000F94  
                       _TRISD 000F95                         _TRISE 000F96                         _TXREG 000FAD  
                       _TXSTA 000FAC                 __CFG_PWRT$OFF 000000                 __CFG_WRT0$OFF 000000  
               __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000  
              __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000  
              __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000               __end_of_highIsr 3A86  
               __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000  
              __CFG_EBTRB$OFF 000000               __end_of_dpowers 1091                         _scale 2174  
             __end_of_isdigit 41DE               _init_adc_no_lib 4226                         main@x 013E  
                       pclath 000FFA                         tablat 000FF5                         status 000FD8  
     read_adc_voltage@voltage 0048                         wtemp6 006A               __end_of_sprintf 1AA6  
                 i2delay_ms@n 0001                   i2delay_ms@x 0003                __CFG_PBADEN$ON 000000  
             ?i2_reloadTimer1 0001               __initialization 3DFE                  __end_of_main 2174  
             ??_lcd_send_byte 0020                        ??_main 00D9                 __activetblptr 000002  
               ?_initTimers00 0001                 ?_initTimers01 0001          __size_of__tdiv_to_l_ 0132  
                 ?i2_delay_ms 0001                    _RecvedChar 0068                        _ADCON0 000FC2  
                      _ADCON1 000FC1                        _ADCON2 000FC0                 main@led_speed 0150  
            ___llmod@dividend 0017                        ?_scale 0050                        _ADRESH 000FC4  
                      _ADRESL 000FC3                        _CCPR1L 000FBE              ___awdiv@dividend 001D  
                      _SPBRGH 000FB0              __end_of___xxtofl 3446              __end_of_delay_ms 40E6  
                      _RX_isr 3A86                __CFG_XINST$OFF 000000              __end_of__powers_ 1035  
                  _Timer0_isr 4132                    _Timer1_isr 37C0              __end_of_lcd_init 3DFE  
                      ___flge 36A0              __end_of_lcd_putc 3F08              __end_of_lcd_puts 3EB2  
                   ??___fladd 009E                        ___wmul 409A                     ??___fldiv 0033  
                   ??___awdiv 0021                     ??___flneg 001B                __CFG_STVREN$ON 000000  
                   ??___awmod 001B                     ??___flmul 004C                     ??___flsub 0054  
                   ??___fltol 0096                     ??___lldiv 001F                     ??___llmod 001F  
                      _fround 2F08                        clear_0 3E3C                        clear_1 3E48  
            ___awdiv@quotient 0023               ___awmod@divisor 0019               ___awmod@counter 001B  
                      main@n1 0124                        main@n2 0126                     ??_highIsr 0005  
                      main@ii 0128                ??_initTimers00 0017                ??_initTimers01 0017  
     __end_of_init_adc_no_lib 4232                     ??_isdigit 0017                 main@threshold 014C  
                __mediumconst 0000           send_string_no_lib@p 0018                        tblptrh 000FF7  
                      tblptrl 000FF6                        tblptru 000FF8            _send_string_no_lib 4070  
                ?_setupSerial 0001                     ??_sprintf 00BA                    ___flge@ff1 0017  
                  ___flge@ff2 001B                  ___xxtofl@arg 0027                  ___xxtofl@exp 0026  
                ___xxtofl@val 001D                    __accesstop 0080       __end_of__initialization 3E4E  
                  ___flneg@f1 0017           ?_send_string_no_lib 0018                 ___rparam_used 000001  
                  ___fltol@f1 0092                __pcstackCOMRAM 0001               _timer_3_counter 0060  
         __size_ofi2_delay_ms 0026         __size_of_delay_cycles 002E                  __pidataBANK0 4254  
                __pidataBANK1 4258                 __end_of_scale 25C4               _timer_6_counter 005E  
        ??_send_string_no_lib 001A      __end_of_send_byte_no_lib 4226                    __div_to_l_ 3578  
   __size_of_read_adc_voltage 0082             lcd_gotoxy@address 0023              _timer_10_counter 005C  
          __size_of_display7s 015C               __div_to_l_@exp1 0024               __div_to_l_@cntr 0023  
                     ??_scale 0054               __div_to_l_@quot 001F                  sprintf@width 00D0  
          __size_of_atraso_ms 0026                    __pbssBANK1 0154   __end_of_read_adc_raw_no_lib 4014  
                _delay_cycles 4042                 __div_to_l_@f1 0017                 __div_to_l_@f2 001B  
                     ?_RX_isr 0001                 ?_reloadTimer0 0001                 ?_reloadTimer1 0001  
                 ?_Timer0_isr 0001                   ?_Timer1_isr 0001                lcd_send_byte@n 001F  
                     ?___flge 0017                       ?___wmul 0017              lcd_send_nibble@n 001E  
                     _CCP1CON 000FBD                       ?_fround 0050              ?_init_adc_no_lib 0001  
                   ?___xxtofl 001D                     ?_delay_ms 0017                    _lcd_gotoxy 3F98  
                   ?_lcd_init 0001                     ?_lcd_putc 0001                     ?_lcd_puts 0025  
            ??i2_reloadTimer1 0001                ??_reloadTimer0 0001                ??_reloadTimer1 0017  
        __end_of_initTimers00 41C0          __end_of_initTimers01 4216             __end_of__npowers_ 1069  
                     __Hparam 0000               __size_of_RX_isr 00B8                    _scale$1931 008D  
                     __Lparam 0000      __size_of_lcd_send_nibble 0022               __size_of___flge 0120  
           __end_of_display7s 32F6                       ___fladd 2916                       ___fldiv 2C54  
                     ___awdiv 3B3E                       ___flneg 4014                       ___awmod 3CC6  
                     ___flmul 25C4                       ___flsub 3F08                       ___fltol 38D4  
                     ___lldiv 3BC2               __size_of___wmul 0026                       ___llmod 3D36  
           __end_of_atraso_ms 410C                  __psmallconst 1000                       __pcinit 3DFE  
             __size_of_fround 0292                       __ramtop 1000                       __ptext0 1AA6  
                     __ptext1 10FE                       __ptext2 2174                       __ptext3 41C0  
                     __ptext4 2F08                       __ptext5 25C4                       __ptext6 3CC6  
                     __ptext7 3B3E                       __ptext8 3446                       __ptext9 3578  
                     _highIsr 0008                     _T0CONbits 000FD5                     _T1CONbits 000FCD  
                 ?__div_to_l_ 0017                       _dpowers 1069                     _T2CONbits 000FCA  
                     _isdigit 41C0                    ??___xxtofl 0021              ___awmod@dividend 0017  
                     _on_flag 0156                  ??i2_delay_ms 0003                    ??_delay_ms 0019  
         __size_of_Timer0_isr 0026           __size_of_Timer1_isr 0114                       main@iii 013C  
                     _sprintf 10FE                    ??_lcd_init 0021                __pintcode_body 39B2  
                  ??_lcd_putc 0024                    ??_lcd_puts 0027          end_of_initialization 3E4E  
        __size_of_setupSerial 0024                 __Lmediumconst 0000                       int_func 39B2  
        lcd_send_byte@cm_data 0020               ___lldiv@divisor 001B               ___lldiv@counter 0023  
                   _RCSTAbits 000FAB                       postdec1 000FE5                       postinc0 000FEE  
                     postinc2 000FDE            __end_ofi2_delay_ms 4132                __tdiv_to_l_@f1 0017  
              __tdiv_to_l_@f2 001B         __end_of_lcd_send_byte 3F98              setupSerial@dummy 0017  
               ??__tdiv_to_l_ 001F                     _PORTBbits 000F81                     _PORTCbits 000F82  
                   _PORTDbits 000F83                     _PORTEbits 000F84                    _setupPorts 41DE  
                 ___fladd@grs 00A9                 ___xxtofl@sign 0025              _read_adc_voltage 3C44  
                   _TRISCbits 000F94                   ?_lcd_gotoxy 0021                   ___fldiv@grs 003E  
                  main@Buffer 0100                   ___fldiv@rem 0038               _LCD_INIT_STRING 00DB  
                   _RPS_count 0064                   ___flmul@grs 0082          main@thresholded_Temp 0143  
                 _CCP1CONbits 000FBD                     _TXSTAbits 000FAC                    display7s@v 0019  
                  display7s@x 0017           __size_of__div_to_l_ 0128                __end_of_RX_isr 3B3E  
           send_byte_no_lib@c 0017                __end_of___flge 37C0                    atraso_ms@n 0017  
                  atraso_ms@x 0019                __end_of___wmul 40C0                   _BAUDCONbits 000FB8  
               delay_cycles@n 001A                 delay_cycles@x 001B             ??_lcd_send_nibble 001D  
              __end_of_fround 319A             ?_send_byte_no_lib 0001          __end_of_reloadTimer0 4254  
        __end_of_reloadTimer1 423E           start_initialization 3DFE            ??_send_byte_no_lib 0017  
             main@channel_692 014B           __end_of__tdiv_to_l_ 3578         __size_of_initTimers00 0022  
       __size_of_initTimers01 001A               ___llmod@divisor 001B               ___llmod@counter 001F  
                    ??_RX_isr 0001                  ??_Timer0_isr 0001                  ??_Timer1_isr 0001  
                    ??___flge 001F           __size_of_lcd_gotoxy 0042                      ??___wmul 001B  
                 __pdataBANK0 00DB                   __pdataBANK1 015E  read_adc_raw_no_lib@raw_value 001B  
            __CFG_LPT1OSC$OFF 000000                      ??_fround 0054                 sprintf@tmpval 00C8  
 __size_of_send_string_no_lib 002A                   ?_setupPorts 0001                     ___fladd@a 009A  
                   ___fladd@b 0096                    fround@prec 0095                     ___fldiv@a 002F  
                   ___fldiv@b 002B                  _initTimers00 419E                  _initTimers01 41FC  
                   ___flmul@a 0048                     ___flmul@b 0044                   __pbssCOMRAM 0056  
                   ___flsub@a 00AE                     ___flsub@b 00AA                 __pcstackBANK0 0080  
               __pcstackBANK1 0100             __size_of___xxtofl 0150                  _isdigit$1542 0018  
          __end_of_Timer0_isr 4158             __size_of_delay_ms 0026            __end_of_Timer1_isr 38D4  
           __size_of_lcd_init 0062                   sprintf@flag 00CE             __size_of_lcd_putc 0056  
           __size_of_lcd_puts 0056                   sprintf@fval 00D2                   sprintf@prec 00D6  
           __CFG_CCP2MX$PORTC 000000                     __pintcode 0008  __size_of_read_adc_raw_no_lib 003A  
                    ?___fladd 0096                      ?___fldiv 002B                      ?___awdiv 001D  
                    ?___flneg 0017                      ?___awmod 0017                      ?___flmul 0044  
                    ?___flsub 00AA                      ?___fltol 0092                      ?___lldiv 0017  
                    ?___llmod 0017                     __npowers_ 1035                   __tdiv_to_l_ 3446  
                   _display7s 319A                      ?_highIsr 0001                  ??__div_to_l_ 001F  
                   _atraso_ms 40E6                   __smallconst 1000                      ?_isdigit 0001  
                    ?_sprintf 00B2                __size_of_scale 0450      __size_of_init_adc_no_lib 000C  
              ___wmul@product 001B                     delay_ms@n 0017                     delay_ms@x 0019  
                    _PIE1bits 000F9D           __size_of_setupPorts 001E                      i2u172_40 4140  
                    i2u173_48 4142                      i2u440_40 3860                      i2u441_40 386A  
                    i2u433_40 37E6                      _PIR1bits 000F9E            __end_of__div_to_l_ 36A0  
                    i2u442_48 386C                      i2u434_48 37E8                      i2u444_40 38A2  
                    i2u436_40 381E      __end_of_read_adc_voltage 3CC6                      i2u445_40 38AC  
                    i2u437_40 3828                      i2u447_40 3A92                      i2u446_48 38AE  
                    i2u438_48 382A                      i2u448_48 3A94                      i2u697_47 4118  
            __CFG_WDTPS$32768 000000    read_adc_raw_no_lib@channel 001D         __size_of_reloadTimer0 000A  
       __size_of_reloadTimer1 000C                     _view_mode 0062                    ?_display7s 0017  
                  _ADCON0bits 000FC2             ___wmul@multiplier 0017                     main@TempC 0147  
                   main@TempF 012A                     lcd_init@i 0021                    ?_atraso_ms 0017  
                   main@flag2 013A                     lcd_putc@c 0024                     lcd_puts@s 0025  
                ??_lcd_gotoxy 0022                 ??_setupSerial 0017                     copy_data0 3E2A  
               _timer_10_flag 0158               _lcd_send_nibble 417C                  _reloadTimer0 424A  
                _reloadTimer1 4232                      __Hrparam 0000                      __Lrparam 0000  
          __CFG_BOREN$SBORDIS 000000       __size_ofi2_reloadTimer1 000C            __end_of_lcd_gotoxy 3FDA  
            __size_of___fladd 033E              __size_of___fldiv 02B4              __size_of___awdiv 0084  
            __size_of___flneg 002E              __size_of___awmod 0070              __size_of___flmul 0352  
            __size_of___flsub 0048              __size_of___fltol 00DE              __size_of___lldiv 0082  
            __size_of___llmod 0066                   _fround$1930 008D                   _fround$1929 0091  
            __size_of_highIsr 3A7E                    sprintf@exp 00CC                    sprintf@val 00C4  
                    ___xxtofl 32F6              __size_of_isdigit 001E                      _delay_ms 40C0  
                    __ptext10 3D36                      __ptext11 3BC2                      __ptext20 4216  
                    __ptext12 38D4                      __ptext21 3C44                      __ptext13 3F08  
                    __ptext30 3F50                      __ptext22 3FDA                      __ptext14 2916  
                    __ptext31 417C                      __ptext23 32F6                      __ptext15 4014  
                    __ptext32 4042                      __ptext24 409A                      __ptext16 36A0  
                    __ptext41 410C                      __ptext33 40C0                      __ptext25 2C54  
                    __ptext17 4158                      __ptext42 37C0                      __ptext34 4226  
                    __ptext26 3E5C                      __ptext18 41DE                      __ptext43 423E  
                    __ptext35 41FC                      __ptext27 3EB2                      __ptext19 4070  
                    __ptext44 4132                      __ptext36 4232                      __ptext28 3F98  
                    __ptext45 424A                      __ptext37 419E                      __ptext29 3D9C  
                    __ptext46 3A86                      __ptext38 319A                      __ptext39 40E6  
                    __powers_ 1001                      _lcd_init 3D9C                      _lcd_putc 3EB2  
                    _lcd_puts 3E5C              __size_of_sprintf 09A8                      _count_t1 0066  
      __size_of_lcd_send_byte 0048                      _off_flag 0154                 ?_delay_cycles 0001  
               __size_of_main 06CE     __size_of_send_byte_no_lib 0010           __end_of_setupSerial 417C  
           ??_init_adc_no_lib 0017                      int$flags 0069                      _start_t1 015E  
                 ??_display7s 0019                  ??_setupPorts 0017                   ??_atraso_ms 0019  
                  _INTCONbits 000FF2                      isdigit@c 0019           _read_adc_raw_no_lib 3FDA  
                    scale@scl 0091                  _timer_3_flag 015C                  _timer_6_flag 015A  
                    intlevel2 0000                     sprintf@ap 00C2       __end_of_lcd_send_nibble 419E  
            __tdiv_to_l_@exp1 0027              __tdiv_to_l_@cntr 0026                     sprintf@sp 00B2  
              ??_delay_cycles 0017              __tdiv_to_l_@quot 0022              ___lldiv@dividend 0017  
          __end_of_setupPorts 41FC          ?_read_adc_raw_no_lib 0017    __end_of_send_string_no_lib 409A  
               _lcd_send_byte 3F50                  ?__tdiv_to_l_ 0017                      sprintf@c 00D8  
                    sprintf@f 00B4              ___lldiv@quotient 001F                   _setupSerial 4158  
               ___fladd@signs 00A6                  ___fladd@aexp 00A7                  ___fladd@bexp 00A8  
       ??_read_adc_raw_no_lib 0019  
